// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HighLevelEvent.proto

#ifndef PROTOBUF_HighLevelEvent_2eproto__INCLUDED
#define PROTOBUF_HighLevelEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_HighLevelEvent_2eproto();
void protobuf_AssignDesc_HighLevelEvent_2eproto();
void protobuf_ShutdownFile_HighLevelEvent_2eproto();

class HighLevelEvent;
class SimpleHaptic;
class UUID;

// ===================================================================

class UUID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.UUID) */ {
 public:
  UUID();
  virtual ~UUID();

  UUID(const UUID& from);

  inline UUID& operator=(const UUID& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UUID& default_instance();

  void Swap(UUID* other);

  // implements Message ----------------------------------------------

  inline UUID* New() const { return New(NULL); }

  UUID* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UUID& from);
  void MergeFrom(const UUID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UUID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:NullSpaceIPC.UUID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_HighLevelEvent_2eproto();
  friend void protobuf_AssignDesc_HighLevelEvent_2eproto();
  friend void protobuf_ShutdownFile_HighLevelEvent_2eproto();

  void InitAsDefaultInstance();
  static UUID* default_instance_;
};
// -------------------------------------------------------------------

class SimpleHaptic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.SimpleHaptic) */ {
 public:
  SimpleHaptic();
  virtual ~SimpleHaptic();

  SimpleHaptic(const SimpleHaptic& from);

  inline SimpleHaptic& operator=(const SimpleHaptic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleHaptic& default_instance();

  void Swap(SimpleHaptic* other);

  // implements Message ----------------------------------------------

  inline SimpleHaptic* New() const { return New(NULL); }

  SimpleHaptic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleHaptic& from);
  void MergeFrom(const SimpleHaptic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleHaptic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 effect = 1;
  void clear_effect();
  static const int kEffectFieldNumber = 1;
  ::google::protobuf::uint32 effect() const;
  void set_effect(::google::protobuf::uint32 value);

  // optional float strength = 2;
  void clear_strength();
  static const int kStrengthFieldNumber = 2;
  float strength() const;
  void set_strength(float value);

  // optional float duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  float duration() const;
  void set_duration(float value);

  // @@protoc_insertion_point(class_scope:NullSpaceIPC.SimpleHaptic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 effect_;
  float strength_;
  float duration_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_HighLevelEvent_2eproto();
  friend void protobuf_AssignDesc_HighLevelEvent_2eproto();
  friend void protobuf_ShutdownFile_HighLevelEvent_2eproto();

  void InitAsDefaultInstance();
  static SimpleHaptic* default_instance_;
};
// -------------------------------------------------------------------

class HighLevelEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.HighLevelEvent) */ {
 public:
  HighLevelEvent();
  virtual ~HighLevelEvent();

  HighLevelEvent(const HighLevelEvent& from);

  inline HighLevelEvent& operator=(const HighLevelEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HighLevelEvent& default_instance();

  enum EventsCase {
    kSimpleHaptic = 3,
    EVENTS_NOT_SET = 0,
  };

  void Swap(HighLevelEvent* other);

  // implements Message ----------------------------------------------

  inline HighLevelEvent* New() const { return New(NULL); }

  HighLevelEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HighLevelEvent& from);
  void MergeFrom(const HighLevelEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HighLevelEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NullSpaceIPC.UUID parent_id = 1;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 1;
  const ::NullSpaceIPC::UUID& parent_id() const;
  ::NullSpaceIPC::UUID* mutable_parent_id();
  ::NullSpaceIPC::UUID* release_parent_id();
  void set_allocated_parent_id(::NullSpaceIPC::UUID* parent_id);

  // optional string region = 2;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
  bool has_simple_haptic() const;
  void clear_simple_haptic();
  static const int kSimpleHapticFieldNumber = 3;
  const ::NullSpaceIPC::SimpleHaptic& simple_haptic() const;
  ::NullSpaceIPC::SimpleHaptic* mutable_simple_haptic();
  ::NullSpaceIPC::SimpleHaptic* release_simple_haptic();
  void set_allocated_simple_haptic(::NullSpaceIPC::SimpleHaptic* simple_haptic);

  EventsCase events_case() const;
  // @@protoc_insertion_point(class_scope:NullSpaceIPC.HighLevelEvent)
 private:
  inline void set_has_simple_haptic();

  inline bool has_events() const;
  void clear_events();
  inline void clear_has_events();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::NullSpaceIPC::UUID* parent_id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  union EventsUnion {
    EventsUnion() {}
    ::NullSpaceIPC::SimpleHaptic* simple_haptic_;
  } events_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_HighLevelEvent_2eproto();
  friend void protobuf_AssignDesc_HighLevelEvent_2eproto();
  friend void protobuf_ShutdownFile_HighLevelEvent_2eproto();

  void InitAsDefaultInstance();
  static HighLevelEvent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UUID

// optional bytes value = 1;
inline void UUID::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UUID::value() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.UUID.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UUID::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.UUID.value)
}
inline void UUID::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.UUID.value)
}
inline void UUID::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.UUID.value)
}
inline ::std::string* UUID::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.UUID.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UUID::release_value() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.UUID.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UUID::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.UUID.value)
}

// -------------------------------------------------------------------

// SimpleHaptic

// optional uint32 effect = 1;
inline void SimpleHaptic::clear_effect() {
  effect_ = 0u;
}
inline ::google::protobuf::uint32 SimpleHaptic::effect() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.effect)
  return effect_;
}
inline void SimpleHaptic::set_effect(::google::protobuf::uint32 value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.effect)
}

// optional float strength = 2;
inline void SimpleHaptic::clear_strength() {
  strength_ = 0;
}
inline float SimpleHaptic::strength() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.strength)
  return strength_;
}
inline void SimpleHaptic::set_strength(float value) {
  
  strength_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.strength)
}

// optional float duration = 3;
inline void SimpleHaptic::clear_duration() {
  duration_ = 0;
}
inline float SimpleHaptic::duration() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.duration)
  return duration_;
}
inline void SimpleHaptic::set_duration(float value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.duration)
}

// -------------------------------------------------------------------

// HighLevelEvent

// optional .NullSpaceIPC.UUID parent_id = 1;
inline bool HighLevelEvent::has_parent_id() const {
  return !_is_default_instance_ && parent_id_ != NULL;
}
inline void HighLevelEvent::clear_parent_id() {
  if (GetArenaNoVirtual() == NULL && parent_id_ != NULL) delete parent_id_;
  parent_id_ = NULL;
}
inline const ::NullSpaceIPC::UUID& HighLevelEvent::parent_id() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.parent_id)
  return parent_id_ != NULL ? *parent_id_ : *default_instance_->parent_id_;
}
inline ::NullSpaceIPC::UUID* HighLevelEvent::mutable_parent_id() {
  
  if (parent_id_ == NULL) {
    parent_id_ = new ::NullSpaceIPC::UUID;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.parent_id)
  return parent_id_;
}
inline ::NullSpaceIPC::UUID* HighLevelEvent::release_parent_id() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.parent_id)
  
  ::NullSpaceIPC::UUID* temp = parent_id_;
  parent_id_ = NULL;
  return temp;
}
inline void HighLevelEvent::set_allocated_parent_id(::NullSpaceIPC::UUID* parent_id) {
  delete parent_id_;
  parent_id_ = parent_id;
  if (parent_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.parent_id)
}

// optional string region = 2;
inline void HighLevelEvent::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HighLevelEvent::region() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.region)
  return region_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HighLevelEvent::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.HighLevelEvent.region)
}
inline void HighLevelEvent::set_region(const char* value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.HighLevelEvent.region)
}
inline void HighLevelEvent::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.HighLevelEvent.region)
}
inline ::std::string* HighLevelEvent::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HighLevelEvent::release_region() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HighLevelEvent::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.region)
}

// optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
inline bool HighLevelEvent::has_simple_haptic() const {
  return events_case() == kSimpleHaptic;
}
inline void HighLevelEvent::set_has_simple_haptic() {
  _oneof_case_[0] = kSimpleHaptic;
}
inline void HighLevelEvent::clear_simple_haptic() {
  if (has_simple_haptic()) {
    delete events_.simple_haptic_;
    clear_has_events();
  }
}
inline  const ::NullSpaceIPC::SimpleHaptic& HighLevelEvent::simple_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return has_simple_haptic()
      ? *events_.simple_haptic_
      : ::NullSpaceIPC::SimpleHaptic::default_instance();
}
inline ::NullSpaceIPC::SimpleHaptic* HighLevelEvent::mutable_simple_haptic() {
  if (!has_simple_haptic()) {
    clear_events();
    set_has_simple_haptic();
    events_.simple_haptic_ = new ::NullSpaceIPC::SimpleHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return events_.simple_haptic_;
}
inline ::NullSpaceIPC::SimpleHaptic* HighLevelEvent::release_simple_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.simple_haptic)
  if (has_simple_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::SimpleHaptic* temp = events_.simple_haptic_;
    events_.simple_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HighLevelEvent::set_allocated_simple_haptic(::NullSpaceIPC::SimpleHaptic* simple_haptic) {
  clear_events();
  if (simple_haptic) {
    set_has_simple_haptic();
    events_.simple_haptic_ = simple_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.simple_haptic)
}

inline bool HighLevelEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
inline void HighLevelEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
inline HighLevelEvent::EventsCase HighLevelEvent::events_case() const {
  return HighLevelEvent::EventsCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HighLevelEvent_2eproto__INCLUDED
