// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HighLevelEvent.proto

#ifndef PROTOBUF_HighLevelEvent_2eproto__INCLUDED
#define PROTOBUF_HighLevelEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_HighLevelEvent_2eproto();
void protobuf_AssignDesc_HighLevelEvent_2eproto();
void protobuf_ShutdownFile_HighLevelEvent_2eproto();

class HighLevelEvent;
class PlaybackEvent;
class SimpleHaptic;

enum PlaybackEvent_Command {
  PlaybackEvent_Command_UNKNOWN = 0,
  PlaybackEvent_Command_PAUSE = 1,
  PlaybackEvent_Command_UNPAUSE = 2,
  PlaybackEvent_Command_CANCEL = 3,
  PlaybackEvent_Command_PlaybackEvent_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlaybackEvent_Command_PlaybackEvent_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlaybackEvent_Command_IsValid(int value);
const PlaybackEvent_Command PlaybackEvent_Command_Command_MIN = PlaybackEvent_Command_UNKNOWN;
const PlaybackEvent_Command PlaybackEvent_Command_Command_MAX = PlaybackEvent_Command_CANCEL;
const int PlaybackEvent_Command_Command_ARRAYSIZE = PlaybackEvent_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlaybackEvent_Command_descriptor();
inline const ::std::string& PlaybackEvent_Command_Name(PlaybackEvent_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlaybackEvent_Command_descriptor(), value);
}
inline bool PlaybackEvent_Command_Parse(
    const ::std::string& name, PlaybackEvent_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlaybackEvent_Command>(
    PlaybackEvent_Command_descriptor(), name, value);
}
// ===================================================================

class SimpleHaptic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.SimpleHaptic) */ {
 public:
  SimpleHaptic();
  virtual ~SimpleHaptic();

  SimpleHaptic(const SimpleHaptic& from);

  inline SimpleHaptic& operator=(const SimpleHaptic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleHaptic& default_instance();

  void Swap(SimpleHaptic* other);

  // implements Message ----------------------------------------------

  inline SimpleHaptic* New() const { return New(NULL); }

  SimpleHaptic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleHaptic& from);
  void MergeFrom(const SimpleHaptic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleHaptic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 effect = 1;
  void clear_effect();
  static const int kEffectFieldNumber = 1;
  ::google::protobuf::uint32 effect() const;
  void set_effect(::google::protobuf::uint32 value);

  // optional float strength = 2;
  void clear_strength();
  static const int kStrengthFieldNumber = 2;
  float strength() const;
  void set_strength(float value);

  // optional float duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  float duration() const;
  void set_duration(float value);

  // @@protoc_insertion_point(class_scope:NullSpaceIPC.SimpleHaptic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 effect_;
  float strength_;
  float duration_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_HighLevelEvent_2eproto();
  friend void protobuf_AssignDesc_HighLevelEvent_2eproto();
  friend void protobuf_ShutdownFile_HighLevelEvent_2eproto();

  void InitAsDefaultInstance();
  static SimpleHaptic* default_instance_;
};
// -------------------------------------------------------------------

class PlaybackEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.PlaybackEvent) */ {
 public:
  PlaybackEvent();
  virtual ~PlaybackEvent();

  PlaybackEvent(const PlaybackEvent& from);

  inline PlaybackEvent& operator=(const PlaybackEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaybackEvent& default_instance();

  void Swap(PlaybackEvent* other);

  // implements Message ----------------------------------------------

  inline PlaybackEvent* New() const { return New(NULL); }

  PlaybackEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaybackEvent& from);
  void MergeFrom(const PlaybackEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlaybackEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlaybackEvent_Command Command;
  static const Command UNKNOWN =
    PlaybackEvent_Command_UNKNOWN;
  static const Command PAUSE =
    PlaybackEvent_Command_PAUSE;
  static const Command UNPAUSE =
    PlaybackEvent_Command_UNPAUSE;
  static const Command CANCEL =
    PlaybackEvent_Command_CANCEL;
  static inline bool Command_IsValid(int value) {
    return PlaybackEvent_Command_IsValid(value);
  }
  static const Command Command_MIN =
    PlaybackEvent_Command_Command_MIN;
  static const Command Command_MAX =
    PlaybackEvent_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    PlaybackEvent_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return PlaybackEvent_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return PlaybackEvent_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return PlaybackEvent_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::NullSpaceIPC::PlaybackEvent_Command command() const;
  void set_command(::NullSpaceIPC::PlaybackEvent_Command value);

  // @@protoc_insertion_point(class_scope:NullSpaceIPC.PlaybackEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int command_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_HighLevelEvent_2eproto();
  friend void protobuf_AssignDesc_HighLevelEvent_2eproto();
  friend void protobuf_ShutdownFile_HighLevelEvent_2eproto();

  void InitAsDefaultInstance();
  static PlaybackEvent* default_instance_;
};
// -------------------------------------------------------------------

class HighLevelEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.HighLevelEvent) */ {
 public:
  HighLevelEvent();
  virtual ~HighLevelEvent();

  HighLevelEvent(const HighLevelEvent& from);

  inline HighLevelEvent& operator=(const HighLevelEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HighLevelEvent& default_instance();

  enum EventsCase {
    kPlaybackEvent = 3,
    kSimpleHaptic = 4,
    EVENTS_NOT_SET = 0,
  };

  void Swap(HighLevelEvent* other);

  // implements Message ----------------------------------------------

  inline HighLevelEvent* New() const { return New(NULL); }

  HighLevelEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HighLevelEvent& from);
  void MergeFrom(const HighLevelEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HighLevelEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 parent_id = 1;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 1;
  ::google::protobuf::uint64 parent_id() const;
  void set_parent_id(::google::protobuf::uint64 value);

  // optional string region = 2;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // optional .NullSpaceIPC.PlaybackEvent playback_event = 3;
  bool has_playback_event() const;
  void clear_playback_event();
  static const int kPlaybackEventFieldNumber = 3;
  const ::NullSpaceIPC::PlaybackEvent& playback_event() const;
  ::NullSpaceIPC::PlaybackEvent* mutable_playback_event();
  ::NullSpaceIPC::PlaybackEvent* release_playback_event();
  void set_allocated_playback_event(::NullSpaceIPC::PlaybackEvent* playback_event);

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 4;
  bool has_simple_haptic() const;
  void clear_simple_haptic();
  static const int kSimpleHapticFieldNumber = 4;
  const ::NullSpaceIPC::SimpleHaptic& simple_haptic() const;
  ::NullSpaceIPC::SimpleHaptic* mutable_simple_haptic();
  ::NullSpaceIPC::SimpleHaptic* release_simple_haptic();
  void set_allocated_simple_haptic(::NullSpaceIPC::SimpleHaptic* simple_haptic);

  EventsCase events_case() const;
  // @@protoc_insertion_point(class_scope:NullSpaceIPC.HighLevelEvent)
 private:
  inline void set_has_playback_event();
  inline void set_has_simple_haptic();

  inline bool has_events() const;
  void clear_events();
  inline void clear_has_events();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 parent_id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  union EventsUnion {
    EventsUnion() {}
    ::NullSpaceIPC::PlaybackEvent* playback_event_;
    ::NullSpaceIPC::SimpleHaptic* simple_haptic_;
  } events_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_HighLevelEvent_2eproto();
  friend void protobuf_AssignDesc_HighLevelEvent_2eproto();
  friend void protobuf_ShutdownFile_HighLevelEvent_2eproto();

  void InitAsDefaultInstance();
  static HighLevelEvent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleHaptic

// optional uint32 effect = 1;
inline void SimpleHaptic::clear_effect() {
  effect_ = 0u;
}
inline ::google::protobuf::uint32 SimpleHaptic::effect() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.effect)
  return effect_;
}
inline void SimpleHaptic::set_effect(::google::protobuf::uint32 value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.effect)
}

// optional float strength = 2;
inline void SimpleHaptic::clear_strength() {
  strength_ = 0;
}
inline float SimpleHaptic::strength() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.strength)
  return strength_;
}
inline void SimpleHaptic::set_strength(float value) {
  
  strength_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.strength)
}

// optional float duration = 3;
inline void SimpleHaptic::clear_duration() {
  duration_ = 0;
}
inline float SimpleHaptic::duration() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.duration)
  return duration_;
}
inline void SimpleHaptic::set_duration(float value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.duration)
}

// -------------------------------------------------------------------

// PlaybackEvent

// optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
inline void PlaybackEvent::clear_command() {
  command_ = 0;
}
inline ::NullSpaceIPC::PlaybackEvent_Command PlaybackEvent::command() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.PlaybackEvent.command)
  return static_cast< ::NullSpaceIPC::PlaybackEvent_Command >(command_);
}
inline void PlaybackEvent::set_command(::NullSpaceIPC::PlaybackEvent_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.PlaybackEvent.command)
}

// -------------------------------------------------------------------

// HighLevelEvent

// optional uint64 parent_id = 1;
inline void HighLevelEvent::clear_parent_id() {
  parent_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HighLevelEvent::parent_id() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.parent_id)
  return parent_id_;
}
inline void HighLevelEvent::set_parent_id(::google::protobuf::uint64 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.HighLevelEvent.parent_id)
}

// optional string region = 2;
inline void HighLevelEvent::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HighLevelEvent::region() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.region)
  return region_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HighLevelEvent::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.HighLevelEvent.region)
}
inline void HighLevelEvent::set_region(const char* value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.HighLevelEvent.region)
}
inline void HighLevelEvent::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.HighLevelEvent.region)
}
inline ::std::string* HighLevelEvent::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HighLevelEvent::release_region() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HighLevelEvent::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.region)
}

// optional .NullSpaceIPC.PlaybackEvent playback_event = 3;
inline bool HighLevelEvent::has_playback_event() const {
  return events_case() == kPlaybackEvent;
}
inline void HighLevelEvent::set_has_playback_event() {
  _oneof_case_[0] = kPlaybackEvent;
}
inline void HighLevelEvent::clear_playback_event() {
  if (has_playback_event()) {
    delete events_.playback_event_;
    clear_has_events();
  }
}
inline  const ::NullSpaceIPC::PlaybackEvent& HighLevelEvent::playback_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.playback_event)
  return has_playback_event()
      ? *events_.playback_event_
      : ::NullSpaceIPC::PlaybackEvent::default_instance();
}
inline ::NullSpaceIPC::PlaybackEvent* HighLevelEvent::mutable_playback_event() {
  if (!has_playback_event()) {
    clear_events();
    set_has_playback_event();
    events_.playback_event_ = new ::NullSpaceIPC::PlaybackEvent;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.playback_event)
  return events_.playback_event_;
}
inline ::NullSpaceIPC::PlaybackEvent* HighLevelEvent::release_playback_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.playback_event)
  if (has_playback_event()) {
    clear_has_events();
    ::NullSpaceIPC::PlaybackEvent* temp = events_.playback_event_;
    events_.playback_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HighLevelEvent::set_allocated_playback_event(::NullSpaceIPC::PlaybackEvent* playback_event) {
  clear_events();
  if (playback_event) {
    set_has_playback_event();
    events_.playback_event_ = playback_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.playback_event)
}

// optional .NullSpaceIPC.SimpleHaptic simple_haptic = 4;
inline bool HighLevelEvent::has_simple_haptic() const {
  return events_case() == kSimpleHaptic;
}
inline void HighLevelEvent::set_has_simple_haptic() {
  _oneof_case_[0] = kSimpleHaptic;
}
inline void HighLevelEvent::clear_simple_haptic() {
  if (has_simple_haptic()) {
    delete events_.simple_haptic_;
    clear_has_events();
  }
}
inline  const ::NullSpaceIPC::SimpleHaptic& HighLevelEvent::simple_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return has_simple_haptic()
      ? *events_.simple_haptic_
      : ::NullSpaceIPC::SimpleHaptic::default_instance();
}
inline ::NullSpaceIPC::SimpleHaptic* HighLevelEvent::mutable_simple_haptic() {
  if (!has_simple_haptic()) {
    clear_events();
    set_has_simple_haptic();
    events_.simple_haptic_ = new ::NullSpaceIPC::SimpleHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return events_.simple_haptic_;
}
inline ::NullSpaceIPC::SimpleHaptic* HighLevelEvent::release_simple_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.simple_haptic)
  if (has_simple_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::SimpleHaptic* temp = events_.simple_haptic_;
    events_.simple_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HighLevelEvent::set_allocated_simple_haptic(::NullSpaceIPC::SimpleHaptic* simple_haptic) {
  clear_events();
  if (simple_haptic) {
    set_has_simple_haptic();
    events_.simple_haptic_ = simple_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.simple_haptic)
}

inline bool HighLevelEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
inline void HighLevelEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
inline HighLevelEvent::EventsCase HighLevelEvent::events_case() const {
  return HighLevelEvent::EventsCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NullSpaceIPC::PlaybackEvent_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NullSpaceIPC::PlaybackEvent_Command>() {
  return ::NullSpaceIPC::PlaybackEvent_Command_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HighLevelEvent_2eproto__INCLUDED
