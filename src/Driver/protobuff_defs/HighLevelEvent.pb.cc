// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HighLevelEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HighLevelEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

namespace {

const ::google::protobuf::Descriptor* RegionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
struct LocationOneofInstance {
  const ::NullSpaceIPC::RegionList* regions_;
  const ::NullSpaceIPC::NodeList* nodes_;
}* Location_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SimpleHaptic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleHaptic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContinuousHaptic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContinuousHaptic_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferedHaptic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferedHaptic_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginAnalogAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginAnalogAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndAnalogAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndAnalogAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaybackEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaybackEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlaybackEvent_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LocationalEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationalEvent_reflection_ = NULL;
struct LocationalEventOneofInstance {
  const ::NullSpaceIPC::SimpleHaptic* simple_haptic_;
  const ::NullSpaceIPC::ContinuousHaptic* continuous_haptic_;
  const ::NullSpaceIPC::BufferedHaptic* buffered_haptic_;
  const ::NullSpaceIPC::BeginAnalogAudio* begin_analog_audio_;
  const ::NullSpaceIPC::EndAnalogAudio* end_analog_audio_;
}* LocationalEvent_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* HighLevelEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HighLevelEvent_reflection_ = NULL;
struct HighLevelEventOneofInstance {
  const ::NullSpaceIPC::PlaybackEvent* playback_event_;
  const ::NullSpaceIPC::LocationalEvent* locational_event_;
}* HighLevelEvent_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_HighLevelEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_HighLevelEvent_2eproto() {
  protobuf_AddDesc_HighLevelEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HighLevelEvent.proto");
  GOOGLE_CHECK(file != NULL);
  RegionList_descriptor_ = file->message_type(0);
  static const int RegionList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, regions_),
  };
  RegionList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionList_descriptor_,
      RegionList::default_instance_,
      RegionList_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, _is_default_instance_));
  NodeList_descriptor_ = file->message_type(1);
  static const int NodeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, nodes_),
  };
  NodeList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeList_descriptor_,
      NodeList::default_instance_,
      NodeList_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _is_default_instance_));
  Location_descriptor_ = file->message_type(2);
  static const int Location_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Location_default_oneof_instance_, regions_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Location_default_oneof_instance_, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, where_),
  };
  Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      -1,
      -1,
      -1,
      Location_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _oneof_case_[0]),
      sizeof(Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _is_default_instance_));
  SimpleHaptic_descriptor_ = file->message_type(3);
  static const int SimpleHaptic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, repetitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, strength_),
  };
  SimpleHaptic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleHaptic_descriptor_,
      SimpleHaptic::default_instance_,
      SimpleHaptic_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleHaptic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, _is_default_instance_));
  ContinuousHaptic_descriptor_ = file->message_type(4);
  static const int ContinuousHaptic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousHaptic, strength_),
  };
  ContinuousHaptic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContinuousHaptic_descriptor_,
      ContinuousHaptic::default_instance_,
      ContinuousHaptic_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContinuousHaptic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousHaptic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousHaptic, _is_default_instance_));
  BufferedHaptic_descriptor_ = file->message_type(5);
  static const int BufferedHaptic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferedHaptic, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferedHaptic, frequency_),
  };
  BufferedHaptic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BufferedHaptic_descriptor_,
      BufferedHaptic::default_instance_,
      BufferedHaptic_offsets_,
      -1,
      -1,
      -1,
      sizeof(BufferedHaptic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferedHaptic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferedHaptic, _is_default_instance_));
  BeginAnalogAudio_descriptor_ = file->message_type(6);
  static const int BeginAnalogAudio_offsets_[1] = {
  };
  BeginAnalogAudio_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeginAnalogAudio_descriptor_,
      BeginAnalogAudio::default_instance_,
      BeginAnalogAudio_offsets_,
      -1,
      -1,
      -1,
      sizeof(BeginAnalogAudio),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginAnalogAudio, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginAnalogAudio, _is_default_instance_));
  EndAnalogAudio_descriptor_ = file->message_type(7);
  static const int EndAnalogAudio_offsets_[1] = {
  };
  EndAnalogAudio_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EndAnalogAudio_descriptor_,
      EndAnalogAudio::default_instance_,
      EndAnalogAudio_offsets_,
      -1,
      -1,
      -1,
      sizeof(EndAnalogAudio),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndAnalogAudio, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndAnalogAudio, _is_default_instance_));
  PlaybackEvent_descriptor_ = file->message_type(8);
  static const int PlaybackEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackEvent, command_),
  };
  PlaybackEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlaybackEvent_descriptor_,
      PlaybackEvent::default_instance_,
      PlaybackEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlaybackEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackEvent, _is_default_instance_));
  PlaybackEvent_Command_descriptor_ = PlaybackEvent_descriptor_->enum_type(0);
  LocationalEvent_descriptor_ = file->message_type(9);
  static const int LocationalEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationalEvent, location_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationalEvent_default_oneof_instance_, simple_haptic_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationalEvent_default_oneof_instance_, continuous_haptic_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationalEvent_default_oneof_instance_, buffered_haptic_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationalEvent_default_oneof_instance_, begin_analog_audio_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationalEvent_default_oneof_instance_, end_analog_audio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationalEvent, events_),
  };
  LocationalEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocationalEvent_descriptor_,
      LocationalEvent::default_instance_,
      LocationalEvent_offsets_,
      -1,
      -1,
      -1,
      LocationalEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationalEvent, _oneof_case_[0]),
      sizeof(LocationalEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationalEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationalEvent, _is_default_instance_));
  HighLevelEvent_descriptor_ = file->message_type(10);
  static const int HighLevelEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, parent_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HighLevelEvent_default_oneof_instance_, playback_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HighLevelEvent_default_oneof_instance_, locational_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, events_),
  };
  HighLevelEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HighLevelEvent_descriptor_,
      HighLevelEvent::default_instance_,
      HighLevelEvent_offsets_,
      -1,
      -1,
      -1,
      HighLevelEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _oneof_case_[0]),
      sizeof(HighLevelEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HighLevelEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionList_descriptor_, &RegionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeList_descriptor_, &NodeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleHaptic_descriptor_, &SimpleHaptic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContinuousHaptic_descriptor_, &ContinuousHaptic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BufferedHaptic_descriptor_, &BufferedHaptic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeginAnalogAudio_descriptor_, &BeginAnalogAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EndAnalogAudio_descriptor_, &EndAnalogAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlaybackEvent_descriptor_, &PlaybackEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocationalEvent_descriptor_, &LocationalEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HighLevelEvent_descriptor_, &HighLevelEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HighLevelEvent_2eproto() {
  delete RegionList::default_instance_;
  delete RegionList_reflection_;
  delete NodeList::default_instance_;
  delete NodeList_reflection_;
  delete Location::default_instance_;
  delete Location_default_oneof_instance_;
  delete Location_reflection_;
  delete SimpleHaptic::default_instance_;
  delete SimpleHaptic_reflection_;
  delete ContinuousHaptic::default_instance_;
  delete ContinuousHaptic_reflection_;
  delete BufferedHaptic::default_instance_;
  delete BufferedHaptic_reflection_;
  delete BeginAnalogAudio::default_instance_;
  delete BeginAnalogAudio_reflection_;
  delete EndAnalogAudio::default_instance_;
  delete EndAnalogAudio_reflection_;
  delete PlaybackEvent::default_instance_;
  delete PlaybackEvent_reflection_;
  delete LocationalEvent::default_instance_;
  delete LocationalEvent_default_oneof_instance_;
  delete LocationalEvent_reflection_;
  delete HighLevelEvent::default_instance_;
  delete HighLevelEvent_default_oneof_instance_;
  delete HighLevelEvent_reflection_;
}

void protobuf_AddDesc_HighLevelEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_HighLevelEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024HighLevelEvent.proto\022\014NullSpaceIPC\"\035\n\n"
    "RegionList\022\017\n\007regions\030\001 \003(\r\"\031\n\010NodeList\022"
    "\r\n\005nodes\030\001 \003(\r\"i\n\010Location\022+\n\007regions\030\001 "
    "\001(\0132\030.NullSpaceIPC.RegionListH\000\022\'\n\005nodes"
    "\030\002 \001(\0132\026.NullSpaceIPC.NodeListH\000B\007\n\005wher"
    "e\"E\n\014SimpleHaptic\022\016\n\006effect\030\001 \001(\r\022\023\n\013rep"
    "etitions\030\002 \001(\r\022\020\n\010strength\030\003 \001(\002\"$\n\020Cont"
    "inuousHaptic\022\020\n\010strength\030\001 \001(\002\"4\n\016Buffer"
    "edHaptic\022\017\n\007samples\030\001 \003(\002\022\021\n\tfrequency\030\002"
    " \001(\002\"\022\n\020BeginAnalogAudio\"\020\n\016EndAnalogAud"
    "io\"\201\001\n\rPlaybackEvent\0224\n\007command\030\001 \001(\0162#."
    "NullSpaceIPC.PlaybackEvent.Command\":\n\007Co"
    "mmand\022\013\n\007UNKNOWN\020\000\022\t\n\005PAUSE\020\001\022\013\n\007UNPAUSE"
    "\020\002\022\n\n\006CANCEL\020\003\"\350\002\n\017LocationalEvent\022(\n\010lo"
    "cation\030\001 \001(\0132\026.NullSpaceIPC.Location\0223\n\r"
    "simple_haptic\030\002 \001(\0132\032.NullSpaceIPC.Simpl"
    "eHapticH\000\022;\n\021continuous_haptic\030\003 \001(\0132\036.N"
    "ullSpaceIPC.ContinuousHapticH\000\0227\n\017buffer"
    "ed_haptic\030\004 \001(\0132\034.NullSpaceIPC.BufferedH"
    "apticH\000\022<\n\022begin_analog_audio\030\020 \001(\0132\036.Nu"
    "llSpaceIPC.BeginAnalogAudioH\000\0228\n\020end_ana"
    "log_audio\030\021 \001(\0132\034.NullSpaceIPC.EndAnalog"
    "AudioH\000B\010\n\006events\"\237\001\n\016HighLevelEvent\022\021\n\t"
    "parent_id\030\001 \001(\004\0225\n\016playback_event\030\002 \001(\0132"
    "\033.NullSpaceIPC.PlaybackEventH\000\0229\n\020locati"
    "onal_event\030\003 \001(\0132\035.NullSpaceIPC.Location"
    "alEventH\000B\010\n\006eventsb\006proto3", 1067);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HighLevelEvent.proto", &protobuf_RegisterTypes);
  RegionList::default_instance_ = new RegionList();
  NodeList::default_instance_ = new NodeList();
  Location::default_instance_ = new Location();
  Location_default_oneof_instance_ = new LocationOneofInstance();
  SimpleHaptic::default_instance_ = new SimpleHaptic();
  ContinuousHaptic::default_instance_ = new ContinuousHaptic();
  BufferedHaptic::default_instance_ = new BufferedHaptic();
  BeginAnalogAudio::default_instance_ = new BeginAnalogAudio();
  EndAnalogAudio::default_instance_ = new EndAnalogAudio();
  PlaybackEvent::default_instance_ = new PlaybackEvent();
  LocationalEvent::default_instance_ = new LocationalEvent();
  LocationalEvent_default_oneof_instance_ = new LocationalEventOneofInstance();
  HighLevelEvent::default_instance_ = new HighLevelEvent();
  HighLevelEvent_default_oneof_instance_ = new HighLevelEventOneofInstance();
  RegionList::default_instance_->InitAsDefaultInstance();
  NodeList::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  SimpleHaptic::default_instance_->InitAsDefaultInstance();
  ContinuousHaptic::default_instance_->InitAsDefaultInstance();
  BufferedHaptic::default_instance_->InitAsDefaultInstance();
  BeginAnalogAudio::default_instance_->InitAsDefaultInstance();
  EndAnalogAudio::default_instance_->InitAsDefaultInstance();
  PlaybackEvent::default_instance_->InitAsDefaultInstance();
  LocationalEvent::default_instance_->InitAsDefaultInstance();
  HighLevelEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HighLevelEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HighLevelEvent_2eproto {
  StaticDescriptorInitializer_HighLevelEvent_2eproto() {
    protobuf_AddDesc_HighLevelEvent_2eproto();
  }
} static_descriptor_initializer_HighLevelEvent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionList::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionList::RegionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.RegionList)
}

void RegionList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegionList::RegionList(const RegionList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.RegionList)
}

void RegionList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RegionList::~RegionList() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.RegionList)
  SharedDtor();
}

void RegionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionList_descriptor_;
}

const RegionList& RegionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

RegionList* RegionList::default_instance_ = NULL;

RegionList* RegionList::New(::google::protobuf::Arena* arena) const {
  RegionList* n = new RegionList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionList::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.RegionList)
  regions_.Clear();
}

bool RegionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.RegionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 regions = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.RegionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.RegionList)
  return false;
#undef DO_
}

void RegionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.RegionList)
  // repeated uint32 regions = 1;
  if (this->regions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_regions_cached_byte_size_);
  }
  for (int i = 0; i < this->regions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->regions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.RegionList)
}

::google::protobuf::uint8* RegionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.RegionList)
  // repeated uint32 regions = 1;
  if (this->regions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _regions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->regions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->regions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.RegionList)
  return target;
}

int RegionList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.RegionList)
  int total_size = 0;

  // repeated uint32 regions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->regions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->regions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _regions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.RegionList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegionList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.RegionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.RegionList)
    MergeFrom(*source);
  }
}

void RegionList::MergeFrom(const RegionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.RegionList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  regions_.MergeFrom(from.regions_);
}

void RegionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.RegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionList::CopyFrom(const RegionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.RegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionList::IsInitialized() const {

  return true;
}

void RegionList::Swap(RegionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionList::InternalSwap(RegionList* other) {
  regions_.UnsafeArenaSwap(&other->regions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionList_descriptor_;
  metadata.reflection = RegionList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionList

// repeated uint32 regions = 1;
int RegionList::regions_size() const {
  return regions_.size();
}
void RegionList::clear_regions() {
  regions_.Clear();
}
 ::google::protobuf::uint32 RegionList::regions(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.RegionList.regions)
  return regions_.Get(index);
}
 void RegionList::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.RegionList.regions)
}
 void RegionList::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:NullSpaceIPC.RegionList.regions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RegionList::regions() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.RegionList.regions)
  return regions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RegionList::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.RegionList.regions)
  return &regions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeList::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeList::NodeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.NodeList)
}

void NodeList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeList::NodeList(const NodeList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.NodeList)
}

void NodeList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NodeList::~NodeList() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.NodeList)
  SharedDtor();
}

void NodeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeList_descriptor_;
}

const NodeList& NodeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

NodeList* NodeList::default_instance_ = NULL;

NodeList* NodeList::New(::google::protobuf::Arena* arena) const {
  NodeList* n = new NodeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.NodeList)
  nodes_.Clear();
}

bool NodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.NodeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nodes())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.NodeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.NodeList)
  return false;
#undef DO_
}

void NodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.NodeList)
  // repeated uint32 nodes = 1;
  if (this->nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_cached_byte_size_);
  }
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.NodeList)
}

::google::protobuf::uint8* NodeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.NodeList)
  // repeated uint32 nodes = 1;
  if (this->nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nodes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->nodes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.NodeList)
  return target;
}

int NodeList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.NodeList)
  int total_size = 0;

  // repeated uint32 nodes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->nodes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.NodeList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.NodeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.NodeList)
    MergeFrom(*source);
  }
}

void NodeList::MergeFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.NodeList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
}

void NodeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeList::CopyFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeList::IsInitialized() const {

  return true;
}

void NodeList::Swap(NodeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeList::InternalSwap(NodeList* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeList_descriptor_;
  metadata.reflection = NodeList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeList

// repeated uint32 nodes = 1;
int NodeList::nodes_size() const {
  return nodes_.size();
}
void NodeList::clear_nodes() {
  nodes_.Clear();
}
 ::google::protobuf::uint32 NodeList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.NodeList.nodes)
  return nodes_.Get(index);
}
 void NodeList::set_nodes(int index, ::google::protobuf::uint32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.NodeList.nodes)
}
 void NodeList::add_nodes(::google::protobuf::uint32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:NullSpaceIPC.NodeList.nodes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NodeList::nodes() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.NodeList.nodes)
  return nodes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NodeList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.NodeList.nodes)
  return &nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kRegionsFieldNumber;
const int Location::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.Location)
}

void Location::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Location_default_oneof_instance_->regions_ = const_cast< ::NullSpaceIPC::RegionList*>(&::NullSpaceIPC::RegionList::default_instance());
  Location_default_oneof_instance_->nodes_ = const_cast< ::NullSpaceIPC::NodeList*>(&::NullSpaceIPC::NodeList::default_instance());
}

Location::Location(const Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.Location)
}

void Location::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_where();
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (has_where()) {
    clear_where();
  }
  if (this != default_instance_) {
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::clear_where() {
// @@protoc_insertion_point(one_of_clear_start:NullSpaceIPC.Location)
  switch(where_case()) {
    case kRegions: {
      delete where_.regions_;
      break;
    }
    case kNodes: {
      delete where_.nodes_;
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHERE_NOT_SET;
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.Location)
  clear_where();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.RegionList regions = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // optional .NullSpaceIPC.NodeList nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.Location)
  // optional .NullSpaceIPC.RegionList regions = 1;
  if (has_regions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *where_.regions_, output);
  }

  // optional .NullSpaceIPC.NodeList nodes = 2;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *where_.nodes_, output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.Location)
  // optional .NullSpaceIPC.RegionList regions = 1;
  if (has_regions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *where_.regions_, false, target);
  }

  // optional .NullSpaceIPC.NodeList nodes = 2;
  if (has_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *where_.nodes_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.Location)
  return target;
}

int Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.Location)
  int total_size = 0;

  switch (where_case()) {
    // optional .NullSpaceIPC.RegionList regions = 1;
    case kRegions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *where_.regions_);
      break;
    }
    // optional .NullSpaceIPC.NodeList nodes = 2;
    case kNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *where_.nodes_);
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Location* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.where_case()) {
    case kRegions: {
      mutable_regions()->::NullSpaceIPC::RegionList::MergeFrom(from.regions());
      break;
    }
    case kNodes: {
      mutable_nodes()->::NullSpaceIPC::NodeList::MergeFrom(from.nodes());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(where_, other->where_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional .NullSpaceIPC.RegionList regions = 1;
bool Location::has_regions() const {
  return where_case() == kRegions;
}
void Location::set_has_regions() {
  _oneof_case_[0] = kRegions;
}
void Location::clear_regions() {
  if (has_regions()) {
    delete where_.regions_;
    clear_has_where();
  }
}
 const ::NullSpaceIPC::RegionList& Location::regions() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.Location.regions)
  return has_regions()
      ? *where_.regions_
      : ::NullSpaceIPC::RegionList::default_instance();
}
::NullSpaceIPC::RegionList* Location::mutable_regions() {
  if (!has_regions()) {
    clear_where();
    set_has_regions();
    where_.regions_ = new ::NullSpaceIPC::RegionList;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.Location.regions)
  return where_.regions_;
}
::NullSpaceIPC::RegionList* Location::release_regions() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.Location.regions)
  if (has_regions()) {
    clear_has_where();
    ::NullSpaceIPC::RegionList* temp = where_.regions_;
    where_.regions_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Location::set_allocated_regions(::NullSpaceIPC::RegionList* regions) {
  clear_where();
  if (regions) {
    set_has_regions();
    where_.regions_ = regions;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.Location.regions)
}

// optional .NullSpaceIPC.NodeList nodes = 2;
bool Location::has_nodes() const {
  return where_case() == kNodes;
}
void Location::set_has_nodes() {
  _oneof_case_[0] = kNodes;
}
void Location::clear_nodes() {
  if (has_nodes()) {
    delete where_.nodes_;
    clear_has_where();
  }
}
 const ::NullSpaceIPC::NodeList& Location::nodes() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.Location.nodes)
  return has_nodes()
      ? *where_.nodes_
      : ::NullSpaceIPC::NodeList::default_instance();
}
::NullSpaceIPC::NodeList* Location::mutable_nodes() {
  if (!has_nodes()) {
    clear_where();
    set_has_nodes();
    where_.nodes_ = new ::NullSpaceIPC::NodeList;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.Location.nodes)
  return where_.nodes_;
}
::NullSpaceIPC::NodeList* Location::release_nodes() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.Location.nodes)
  if (has_nodes()) {
    clear_has_where();
    ::NullSpaceIPC::NodeList* temp = where_.nodes_;
    where_.nodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Location::set_allocated_nodes(::NullSpaceIPC::NodeList* nodes) {
  clear_where();
  if (nodes) {
    set_has_nodes();
    where_.nodes_ = nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.Location.nodes)
}

bool Location::has_where() const {
  return where_case() != WHERE_NOT_SET;
}
void Location::clear_has_where() {
  _oneof_case_[0] = WHERE_NOT_SET;
}
Location::WhereCase Location::where_case() const {
  return Location::WhereCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleHaptic::kEffectFieldNumber;
const int SimpleHaptic::kRepetitionsFieldNumber;
const int SimpleHaptic::kStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleHaptic::SimpleHaptic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.SimpleHaptic)
}

void SimpleHaptic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimpleHaptic::SimpleHaptic(const SimpleHaptic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.SimpleHaptic)
}

void SimpleHaptic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  effect_ = 0u;
  repetitions_ = 0u;
  strength_ = 0;
}

SimpleHaptic::~SimpleHaptic() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.SimpleHaptic)
  SharedDtor();
}

void SimpleHaptic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleHaptic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleHaptic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleHaptic_descriptor_;
}

const SimpleHaptic& SimpleHaptic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

SimpleHaptic* SimpleHaptic::default_instance_ = NULL;

SimpleHaptic* SimpleHaptic::New(::google::protobuf::Arena* arena) const {
  SimpleHaptic* n = new SimpleHaptic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleHaptic::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.SimpleHaptic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimpleHaptic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleHaptic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(effect_, strength_);

#undef ZR_HELPER_
#undef ZR_

}

bool SimpleHaptic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.SimpleHaptic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 effect = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repetitions;
        break;
      }

      // optional uint32 repetitions = 2;
      case 2: {
        if (tag == 16) {
         parse_repetitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repetitions_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_strength;
        break;
      }

      // optional float strength = 3;
      case 3: {
        if (tag == 29) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.SimpleHaptic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.SimpleHaptic)
  return false;
#undef DO_
}

void SimpleHaptic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.SimpleHaptic)
  // optional uint32 effect = 1;
  if (this->effect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect(), output);
  }

  // optional uint32 repetitions = 2;
  if (this->repetitions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->repetitions(), output);
  }

  // optional float strength = 3;
  if (this->strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->strength(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.SimpleHaptic)
}

::google::protobuf::uint8* SimpleHaptic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.SimpleHaptic)
  // optional uint32 effect = 1;
  if (this->effect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect(), target);
  }

  // optional uint32 repetitions = 2;
  if (this->repetitions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->repetitions(), target);
  }

  // optional float strength = 3;
  if (this->strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->strength(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.SimpleHaptic)
  return target;
}

int SimpleHaptic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.SimpleHaptic)
  int total_size = 0;

  // optional uint32 effect = 1;
  if (this->effect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect());
  }

  // optional uint32 repetitions = 2;
  if (this->repetitions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->repetitions());
  }

  // optional float strength = 3;
  if (this->strength() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleHaptic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.SimpleHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleHaptic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleHaptic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.SimpleHaptic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.SimpleHaptic)
    MergeFrom(*source);
  }
}

void SimpleHaptic::MergeFrom(const SimpleHaptic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.SimpleHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.effect() != 0) {
    set_effect(from.effect());
  }
  if (from.repetitions() != 0) {
    set_repetitions(from.repetitions());
  }
  if (from.strength() != 0) {
    set_strength(from.strength());
  }
}

void SimpleHaptic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.SimpleHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleHaptic::CopyFrom(const SimpleHaptic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.SimpleHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleHaptic::IsInitialized() const {

  return true;
}

void SimpleHaptic::Swap(SimpleHaptic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleHaptic::InternalSwap(SimpleHaptic* other) {
  std::swap(effect_, other->effect_);
  std::swap(repetitions_, other->repetitions_);
  std::swap(strength_, other->strength_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleHaptic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleHaptic_descriptor_;
  metadata.reflection = SimpleHaptic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleHaptic

// optional uint32 effect = 1;
void SimpleHaptic::clear_effect() {
  effect_ = 0u;
}
 ::google::protobuf::uint32 SimpleHaptic::effect() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.effect)
  return effect_;
}
 void SimpleHaptic::set_effect(::google::protobuf::uint32 value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.effect)
}

// optional uint32 repetitions = 2;
void SimpleHaptic::clear_repetitions() {
  repetitions_ = 0u;
}
 ::google::protobuf::uint32 SimpleHaptic::repetitions() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.repetitions)
  return repetitions_;
}
 void SimpleHaptic::set_repetitions(::google::protobuf::uint32 value) {
  
  repetitions_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.repetitions)
}

// optional float strength = 3;
void SimpleHaptic::clear_strength() {
  strength_ = 0;
}
 float SimpleHaptic::strength() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.strength)
  return strength_;
}
 void SimpleHaptic::set_strength(float value) {
  
  strength_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.strength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContinuousHaptic::kStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContinuousHaptic::ContinuousHaptic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.ContinuousHaptic)
}

void ContinuousHaptic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ContinuousHaptic::ContinuousHaptic(const ContinuousHaptic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.ContinuousHaptic)
}

void ContinuousHaptic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  strength_ = 0;
}

ContinuousHaptic::~ContinuousHaptic() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.ContinuousHaptic)
  SharedDtor();
}

void ContinuousHaptic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContinuousHaptic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContinuousHaptic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContinuousHaptic_descriptor_;
}

const ContinuousHaptic& ContinuousHaptic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

ContinuousHaptic* ContinuousHaptic::default_instance_ = NULL;

ContinuousHaptic* ContinuousHaptic::New(::google::protobuf::Arena* arena) const {
  ContinuousHaptic* n = new ContinuousHaptic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContinuousHaptic::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.ContinuousHaptic)
  strength_ = 0;
}

bool ContinuousHaptic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.ContinuousHaptic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float strength = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.ContinuousHaptic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.ContinuousHaptic)
  return false;
#undef DO_
}

void ContinuousHaptic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.ContinuousHaptic)
  // optional float strength = 1;
  if (this->strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->strength(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.ContinuousHaptic)
}

::google::protobuf::uint8* ContinuousHaptic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.ContinuousHaptic)
  // optional float strength = 1;
  if (this->strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->strength(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.ContinuousHaptic)
  return target;
}

int ContinuousHaptic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.ContinuousHaptic)
  int total_size = 0;

  // optional float strength = 1;
  if (this->strength() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContinuousHaptic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.ContinuousHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContinuousHaptic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContinuousHaptic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.ContinuousHaptic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.ContinuousHaptic)
    MergeFrom(*source);
  }
}

void ContinuousHaptic::MergeFrom(const ContinuousHaptic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.ContinuousHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.strength() != 0) {
    set_strength(from.strength());
  }
}

void ContinuousHaptic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.ContinuousHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinuousHaptic::CopyFrom(const ContinuousHaptic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.ContinuousHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinuousHaptic::IsInitialized() const {

  return true;
}

void ContinuousHaptic::Swap(ContinuousHaptic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContinuousHaptic::InternalSwap(ContinuousHaptic* other) {
  std::swap(strength_, other->strength_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContinuousHaptic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContinuousHaptic_descriptor_;
  metadata.reflection = ContinuousHaptic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContinuousHaptic

// optional float strength = 1;
void ContinuousHaptic::clear_strength() {
  strength_ = 0;
}
 float ContinuousHaptic::strength() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.ContinuousHaptic.strength)
  return strength_;
}
 void ContinuousHaptic::set_strength(float value) {
  
  strength_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.ContinuousHaptic.strength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BufferedHaptic::kSamplesFieldNumber;
const int BufferedHaptic::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BufferedHaptic::BufferedHaptic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.BufferedHaptic)
}

void BufferedHaptic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BufferedHaptic::BufferedHaptic(const BufferedHaptic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.BufferedHaptic)
}

void BufferedHaptic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frequency_ = 0;
}

BufferedHaptic::~BufferedHaptic() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.BufferedHaptic)
  SharedDtor();
}

void BufferedHaptic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BufferedHaptic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferedHaptic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferedHaptic_descriptor_;
}

const BufferedHaptic& BufferedHaptic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

BufferedHaptic* BufferedHaptic::default_instance_ = NULL;

BufferedHaptic* BufferedHaptic::New(::google::protobuf::Arena* arena) const {
  BufferedHaptic* n = new BufferedHaptic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BufferedHaptic::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.BufferedHaptic)
  frequency_ = 0;
  samples_.Clear();
}

bool BufferedHaptic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.BufferedHaptic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float samples = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_samples())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_samples())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_frequency;
        break;
      }

      // optional float frequency = 2;
      case 2: {
        if (tag == 21) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.BufferedHaptic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.BufferedHaptic)
  return false;
#undef DO_
}

void BufferedHaptic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.BufferedHaptic)
  // repeated float samples = 1;
  if (this->samples_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_samples_cached_byte_size_);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->samples(i), output);
  }

  // optional float frequency = 2;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->frequency(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.BufferedHaptic)
}

::google::protobuf::uint8* BufferedHaptic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.BufferedHaptic)
  // repeated float samples = 1;
  if (this->samples_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _samples_cached_byte_size_, target);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->samples(i), target);
  }

  // optional float frequency = 2;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->frequency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.BufferedHaptic)
  return target;
}

int BufferedHaptic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.BufferedHaptic)
  int total_size = 0;

  // optional float frequency = 2;
  if (this->frequency() != 0) {
    total_size += 1 + 4;
  }

  // repeated float samples = 1;
  {
    int data_size = 0;
    data_size = 4 * this->samples_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _samples_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferedHaptic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.BufferedHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BufferedHaptic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BufferedHaptic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.BufferedHaptic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.BufferedHaptic)
    MergeFrom(*source);
  }
}

void BufferedHaptic::MergeFrom(const BufferedHaptic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.BufferedHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  samples_.MergeFrom(from.samples_);
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void BufferedHaptic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.BufferedHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferedHaptic::CopyFrom(const BufferedHaptic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.BufferedHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferedHaptic::IsInitialized() const {

  return true;
}

void BufferedHaptic::Swap(BufferedHaptic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BufferedHaptic::InternalSwap(BufferedHaptic* other) {
  samples_.UnsafeArenaSwap(&other->samples_);
  std::swap(frequency_, other->frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BufferedHaptic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferedHaptic_descriptor_;
  metadata.reflection = BufferedHaptic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BufferedHaptic

// repeated float samples = 1;
int BufferedHaptic::samples_size() const {
  return samples_.size();
}
void BufferedHaptic::clear_samples() {
  samples_.Clear();
}
 float BufferedHaptic::samples(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.BufferedHaptic.samples)
  return samples_.Get(index);
}
 void BufferedHaptic::set_samples(int index, float value) {
  samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.BufferedHaptic.samples)
}
 void BufferedHaptic::add_samples(float value) {
  samples_.Add(value);
  // @@protoc_insertion_point(field_add:NullSpaceIPC.BufferedHaptic.samples)
}
 const ::google::protobuf::RepeatedField< float >&
BufferedHaptic::samples() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.BufferedHaptic.samples)
  return samples_;
}
 ::google::protobuf::RepeatedField< float >*
BufferedHaptic::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.BufferedHaptic.samples)
  return &samples_;
}

// optional float frequency = 2;
void BufferedHaptic::clear_frequency() {
  frequency_ = 0;
}
 float BufferedHaptic::frequency() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.BufferedHaptic.frequency)
  return frequency_;
}
 void BufferedHaptic::set_frequency(float value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.BufferedHaptic.frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginAnalogAudio::BeginAnalogAudio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.BeginAnalogAudio)
}

void BeginAnalogAudio::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BeginAnalogAudio::BeginAnalogAudio(const BeginAnalogAudio& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.BeginAnalogAudio)
}

void BeginAnalogAudio::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BeginAnalogAudio::~BeginAnalogAudio() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.BeginAnalogAudio)
  SharedDtor();
}

void BeginAnalogAudio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginAnalogAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginAnalogAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginAnalogAudio_descriptor_;
}

const BeginAnalogAudio& BeginAnalogAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

BeginAnalogAudio* BeginAnalogAudio::default_instance_ = NULL;

BeginAnalogAudio* BeginAnalogAudio::New(::google::protobuf::Arena* arena) const {
  BeginAnalogAudio* n = new BeginAnalogAudio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginAnalogAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.BeginAnalogAudio)
}

bool BeginAnalogAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.BeginAnalogAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.BeginAnalogAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.BeginAnalogAudio)
  return false;
#undef DO_
}

void BeginAnalogAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.BeginAnalogAudio)
  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.BeginAnalogAudio)
}

::google::protobuf::uint8* BeginAnalogAudio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.BeginAnalogAudio)
  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.BeginAnalogAudio)
  return target;
}

int BeginAnalogAudio::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.BeginAnalogAudio)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginAnalogAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.BeginAnalogAudio)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BeginAnalogAudio* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginAnalogAudio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.BeginAnalogAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.BeginAnalogAudio)
    MergeFrom(*source);
  }
}

void BeginAnalogAudio::MergeFrom(const BeginAnalogAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.BeginAnalogAudio)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void BeginAnalogAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.BeginAnalogAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginAnalogAudio::CopyFrom(const BeginAnalogAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.BeginAnalogAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginAnalogAudio::IsInitialized() const {

  return true;
}

void BeginAnalogAudio::Swap(BeginAnalogAudio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginAnalogAudio::InternalSwap(BeginAnalogAudio* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginAnalogAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginAnalogAudio_descriptor_;
  metadata.reflection = BeginAnalogAudio_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginAnalogAudio

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndAnalogAudio::EndAnalogAudio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.EndAnalogAudio)
}

void EndAnalogAudio::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EndAnalogAudio::EndAnalogAudio(const EndAnalogAudio& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.EndAnalogAudio)
}

void EndAnalogAudio::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EndAnalogAudio::~EndAnalogAudio() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.EndAnalogAudio)
  SharedDtor();
}

void EndAnalogAudio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndAnalogAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndAnalogAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndAnalogAudio_descriptor_;
}

const EndAnalogAudio& EndAnalogAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

EndAnalogAudio* EndAnalogAudio::default_instance_ = NULL;

EndAnalogAudio* EndAnalogAudio::New(::google::protobuf::Arena* arena) const {
  EndAnalogAudio* n = new EndAnalogAudio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndAnalogAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.EndAnalogAudio)
}

bool EndAnalogAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.EndAnalogAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.EndAnalogAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.EndAnalogAudio)
  return false;
#undef DO_
}

void EndAnalogAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.EndAnalogAudio)
  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.EndAnalogAudio)
}

::google::protobuf::uint8* EndAnalogAudio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.EndAnalogAudio)
  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.EndAnalogAudio)
  return target;
}

int EndAnalogAudio::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.EndAnalogAudio)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndAnalogAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.EndAnalogAudio)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EndAnalogAudio* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EndAnalogAudio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.EndAnalogAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.EndAnalogAudio)
    MergeFrom(*source);
  }
}

void EndAnalogAudio::MergeFrom(const EndAnalogAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.EndAnalogAudio)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void EndAnalogAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.EndAnalogAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndAnalogAudio::CopyFrom(const EndAnalogAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.EndAnalogAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndAnalogAudio::IsInitialized() const {

  return true;
}

void EndAnalogAudio::Swap(EndAnalogAudio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndAnalogAudio::InternalSwap(EndAnalogAudio* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndAnalogAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndAnalogAudio_descriptor_;
  metadata.reflection = EndAnalogAudio_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndAnalogAudio

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PlaybackEvent_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackEvent_Command_descriptor_;
}
bool PlaybackEvent_Command_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlaybackEvent_Command PlaybackEvent::UNKNOWN;
const PlaybackEvent_Command PlaybackEvent::PAUSE;
const PlaybackEvent_Command PlaybackEvent::UNPAUSE;
const PlaybackEvent_Command PlaybackEvent::CANCEL;
const PlaybackEvent_Command PlaybackEvent::Command_MIN;
const PlaybackEvent_Command PlaybackEvent::Command_MAX;
const int PlaybackEvent::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackEvent::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackEvent::PlaybackEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.PlaybackEvent)
}

void PlaybackEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlaybackEvent::PlaybackEvent(const PlaybackEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.PlaybackEvent)
}

void PlaybackEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  command_ = 0;
}

PlaybackEvent::~PlaybackEvent() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.PlaybackEvent)
  SharedDtor();
}

void PlaybackEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaybackEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaybackEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackEvent_descriptor_;
}

const PlaybackEvent& PlaybackEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

PlaybackEvent* PlaybackEvent::default_instance_ = NULL;

PlaybackEvent* PlaybackEvent::New(::google::protobuf::Arena* arena) const {
  PlaybackEvent* n = new PlaybackEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaybackEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.PlaybackEvent)
  command_ = 0;
}

bool PlaybackEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.PlaybackEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::NullSpaceIPC::PlaybackEvent_Command >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.PlaybackEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.PlaybackEvent)
  return false;
#undef DO_
}

void PlaybackEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.PlaybackEvent)
  // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.PlaybackEvent)
}

::google::protobuf::uint8* PlaybackEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.PlaybackEvent)
  // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.PlaybackEvent)
  return target;
}

int PlaybackEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.PlaybackEvent)
  int total_size = 0;

  // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaybackEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.PlaybackEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlaybackEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaybackEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.PlaybackEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.PlaybackEvent)
    MergeFrom(*source);
  }
}

void PlaybackEvent::MergeFrom(const PlaybackEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.PlaybackEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void PlaybackEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.PlaybackEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackEvent::CopyFrom(const PlaybackEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.PlaybackEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackEvent::IsInitialized() const {

  return true;
}

void PlaybackEvent::Swap(PlaybackEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackEvent::InternalSwap(PlaybackEvent* other) {
  std::swap(command_, other->command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaybackEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaybackEvent_descriptor_;
  metadata.reflection = PlaybackEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaybackEvent

// optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
void PlaybackEvent::clear_command() {
  command_ = 0;
}
 ::NullSpaceIPC::PlaybackEvent_Command PlaybackEvent::command() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.PlaybackEvent.command)
  return static_cast< ::NullSpaceIPC::PlaybackEvent_Command >(command_);
}
 void PlaybackEvent::set_command(::NullSpaceIPC::PlaybackEvent_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.PlaybackEvent.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationalEvent::kLocationFieldNumber;
const int LocationalEvent::kSimpleHapticFieldNumber;
const int LocationalEvent::kContinuousHapticFieldNumber;
const int LocationalEvent::kBufferedHapticFieldNumber;
const int LocationalEvent::kBeginAnalogAudioFieldNumber;
const int LocationalEvent::kEndAnalogAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationalEvent::LocationalEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.LocationalEvent)
}

void LocationalEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_ = const_cast< ::NullSpaceIPC::Location*>(&::NullSpaceIPC::Location::default_instance());
  LocationalEvent_default_oneof_instance_->simple_haptic_ = const_cast< ::NullSpaceIPC::SimpleHaptic*>(&::NullSpaceIPC::SimpleHaptic::default_instance());
  LocationalEvent_default_oneof_instance_->continuous_haptic_ = const_cast< ::NullSpaceIPC::ContinuousHaptic*>(&::NullSpaceIPC::ContinuousHaptic::default_instance());
  LocationalEvent_default_oneof_instance_->buffered_haptic_ = const_cast< ::NullSpaceIPC::BufferedHaptic*>(&::NullSpaceIPC::BufferedHaptic::default_instance());
  LocationalEvent_default_oneof_instance_->begin_analog_audio_ = const_cast< ::NullSpaceIPC::BeginAnalogAudio*>(&::NullSpaceIPC::BeginAnalogAudio::default_instance());
  LocationalEvent_default_oneof_instance_->end_analog_audio_ = const_cast< ::NullSpaceIPC::EndAnalogAudio*>(&::NullSpaceIPC::EndAnalogAudio::default_instance());
}

LocationalEvent::LocationalEvent(const LocationalEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.LocationalEvent)
}

void LocationalEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  location_ = NULL;
  clear_has_events();
}

LocationalEvent::~LocationalEvent() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.LocationalEvent)
  SharedDtor();
}

void LocationalEvent::SharedDtor() {
  if (has_events()) {
    clear_events();
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void LocationalEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationalEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationalEvent_descriptor_;
}

const LocationalEvent& LocationalEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

LocationalEvent* LocationalEvent::default_instance_ = NULL;

LocationalEvent* LocationalEvent::New(::google::protobuf::Arena* arena) const {
  LocationalEvent* n = new LocationalEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocationalEvent::clear_events() {
// @@protoc_insertion_point(one_of_clear_start:NullSpaceIPC.LocationalEvent)
  switch(events_case()) {
    case kSimpleHaptic: {
      delete events_.simple_haptic_;
      break;
    }
    case kContinuousHaptic: {
      delete events_.continuous_haptic_;
      break;
    }
    case kBufferedHaptic: {
      delete events_.buffered_haptic_;
      break;
    }
    case kBeginAnalogAudio: {
      delete events_.begin_analog_audio_;
      break;
    }
    case kEndAnalogAudio: {
      delete events_.end_analog_audio_;
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENTS_NOT_SET;
}


void LocationalEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.LocationalEvent)
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
  clear_events();
}

bool LocationalEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.LocationalEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.Location location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_simple_haptic;
        break;
      }

      // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 2;
      case 2: {
        if (tag == 18) {
         parse_simple_haptic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_haptic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_continuous_haptic;
        break;
      }

      // optional .NullSpaceIPC.ContinuousHaptic continuous_haptic = 3;
      case 3: {
        if (tag == 26) {
         parse_continuous_haptic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continuous_haptic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buffered_haptic;
        break;
      }

      // optional .NullSpaceIPC.BufferedHaptic buffered_haptic = 4;
      case 4: {
        if (tag == 34) {
         parse_buffered_haptic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffered_haptic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_begin_analog_audio;
        break;
      }

      // optional .NullSpaceIPC.BeginAnalogAudio begin_analog_audio = 16;
      case 16: {
        if (tag == 130) {
         parse_begin_analog_audio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_analog_audio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_end_analog_audio;
        break;
      }

      // optional .NullSpaceIPC.EndAnalogAudio end_analog_audio = 17;
      case 17: {
        if (tag == 138) {
         parse_end_analog_audio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_analog_audio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.LocationalEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.LocationalEvent)
  return false;
#undef DO_
}

void LocationalEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.LocationalEvent)
  // optional .NullSpaceIPC.Location location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 2;
  if (has_simple_haptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *events_.simple_haptic_, output);
  }

  // optional .NullSpaceIPC.ContinuousHaptic continuous_haptic = 3;
  if (has_continuous_haptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *events_.continuous_haptic_, output);
  }

  // optional .NullSpaceIPC.BufferedHaptic buffered_haptic = 4;
  if (has_buffered_haptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *events_.buffered_haptic_, output);
  }

  // optional .NullSpaceIPC.BeginAnalogAudio begin_analog_audio = 16;
  if (has_begin_analog_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *events_.begin_analog_audio_, output);
  }

  // optional .NullSpaceIPC.EndAnalogAudio end_analog_audio = 17;
  if (has_end_analog_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *events_.end_analog_audio_, output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.LocationalEvent)
}

::google::protobuf::uint8* LocationalEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.LocationalEvent)
  // optional .NullSpaceIPC.Location location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 2;
  if (has_simple_haptic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *events_.simple_haptic_, false, target);
  }

  // optional .NullSpaceIPC.ContinuousHaptic continuous_haptic = 3;
  if (has_continuous_haptic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *events_.continuous_haptic_, false, target);
  }

  // optional .NullSpaceIPC.BufferedHaptic buffered_haptic = 4;
  if (has_buffered_haptic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *events_.buffered_haptic_, false, target);
  }

  // optional .NullSpaceIPC.BeginAnalogAudio begin_analog_audio = 16;
  if (has_begin_analog_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *events_.begin_analog_audio_, false, target);
  }

  // optional .NullSpaceIPC.EndAnalogAudio end_analog_audio = 17;
  if (has_end_analog_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *events_.end_analog_audio_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.LocationalEvent)
  return target;
}

int LocationalEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.LocationalEvent)
  int total_size = 0;

  // optional .NullSpaceIPC.Location location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  switch (events_case()) {
    // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 2;
    case kSimpleHaptic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.simple_haptic_);
      break;
    }
    // optional .NullSpaceIPC.ContinuousHaptic continuous_haptic = 3;
    case kContinuousHaptic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.continuous_haptic_);
      break;
    }
    // optional .NullSpaceIPC.BufferedHaptic buffered_haptic = 4;
    case kBufferedHaptic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.buffered_haptic_);
      break;
    }
    // optional .NullSpaceIPC.BeginAnalogAudio begin_analog_audio = 16;
    case kBeginAnalogAudio: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.begin_analog_audio_);
      break;
    }
    // optional .NullSpaceIPC.EndAnalogAudio end_analog_audio = 17;
    case kEndAnalogAudio: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.end_analog_audio_);
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationalEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.LocationalEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocationalEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationalEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.LocationalEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.LocationalEvent)
    MergeFrom(*source);
  }
}

void LocationalEvent::MergeFrom(const LocationalEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.LocationalEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.events_case()) {
    case kSimpleHaptic: {
      mutable_simple_haptic()->::NullSpaceIPC::SimpleHaptic::MergeFrom(from.simple_haptic());
      break;
    }
    case kContinuousHaptic: {
      mutable_continuous_haptic()->::NullSpaceIPC::ContinuousHaptic::MergeFrom(from.continuous_haptic());
      break;
    }
    case kBufferedHaptic: {
      mutable_buffered_haptic()->::NullSpaceIPC::BufferedHaptic::MergeFrom(from.buffered_haptic());
      break;
    }
    case kBeginAnalogAudio: {
      mutable_begin_analog_audio()->::NullSpaceIPC::BeginAnalogAudio::MergeFrom(from.begin_analog_audio());
      break;
    }
    case kEndAnalogAudio: {
      mutable_end_analog_audio()->::NullSpaceIPC::EndAnalogAudio::MergeFrom(from.end_analog_audio());
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  if (from.has_location()) {
    mutable_location()->::NullSpaceIPC::Location::MergeFrom(from.location());
  }
}

void LocationalEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.LocationalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationalEvent::CopyFrom(const LocationalEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.LocationalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationalEvent::IsInitialized() const {

  return true;
}

void LocationalEvent::Swap(LocationalEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationalEvent::InternalSwap(LocationalEvent* other) {
  std::swap(location_, other->location_);
  std::swap(events_, other->events_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocationalEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationalEvent_descriptor_;
  metadata.reflection = LocationalEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocationalEvent

// optional .NullSpaceIPC.Location location = 1;
bool LocationalEvent::has_location() const {
  return !_is_default_instance_ && location_ != NULL;
}
void LocationalEvent::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::NullSpaceIPC::Location& LocationalEvent::location() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.LocationalEvent.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::NullSpaceIPC::Location* LocationalEvent::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::NullSpaceIPC::Location;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.LocationalEvent.location)
  return location_;
}
::NullSpaceIPC::Location* LocationalEvent::release_location() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.LocationalEvent.location)
  
  ::NullSpaceIPC::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void LocationalEvent::set_allocated_location(::NullSpaceIPC::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.LocationalEvent.location)
}

// optional .NullSpaceIPC.SimpleHaptic simple_haptic = 2;
bool LocationalEvent::has_simple_haptic() const {
  return events_case() == kSimpleHaptic;
}
void LocationalEvent::set_has_simple_haptic() {
  _oneof_case_[0] = kSimpleHaptic;
}
void LocationalEvent::clear_simple_haptic() {
  if (has_simple_haptic()) {
    delete events_.simple_haptic_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::SimpleHaptic& LocationalEvent::simple_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.LocationalEvent.simple_haptic)
  return has_simple_haptic()
      ? *events_.simple_haptic_
      : ::NullSpaceIPC::SimpleHaptic::default_instance();
}
::NullSpaceIPC::SimpleHaptic* LocationalEvent::mutable_simple_haptic() {
  if (!has_simple_haptic()) {
    clear_events();
    set_has_simple_haptic();
    events_.simple_haptic_ = new ::NullSpaceIPC::SimpleHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.LocationalEvent.simple_haptic)
  return events_.simple_haptic_;
}
::NullSpaceIPC::SimpleHaptic* LocationalEvent::release_simple_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.LocationalEvent.simple_haptic)
  if (has_simple_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::SimpleHaptic* temp = events_.simple_haptic_;
    events_.simple_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationalEvent::set_allocated_simple_haptic(::NullSpaceIPC::SimpleHaptic* simple_haptic) {
  clear_events();
  if (simple_haptic) {
    set_has_simple_haptic();
    events_.simple_haptic_ = simple_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.LocationalEvent.simple_haptic)
}

// optional .NullSpaceIPC.ContinuousHaptic continuous_haptic = 3;
bool LocationalEvent::has_continuous_haptic() const {
  return events_case() == kContinuousHaptic;
}
void LocationalEvent::set_has_continuous_haptic() {
  _oneof_case_[0] = kContinuousHaptic;
}
void LocationalEvent::clear_continuous_haptic() {
  if (has_continuous_haptic()) {
    delete events_.continuous_haptic_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::ContinuousHaptic& LocationalEvent::continuous_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.LocationalEvent.continuous_haptic)
  return has_continuous_haptic()
      ? *events_.continuous_haptic_
      : ::NullSpaceIPC::ContinuousHaptic::default_instance();
}
::NullSpaceIPC::ContinuousHaptic* LocationalEvent::mutable_continuous_haptic() {
  if (!has_continuous_haptic()) {
    clear_events();
    set_has_continuous_haptic();
    events_.continuous_haptic_ = new ::NullSpaceIPC::ContinuousHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.LocationalEvent.continuous_haptic)
  return events_.continuous_haptic_;
}
::NullSpaceIPC::ContinuousHaptic* LocationalEvent::release_continuous_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.LocationalEvent.continuous_haptic)
  if (has_continuous_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::ContinuousHaptic* temp = events_.continuous_haptic_;
    events_.continuous_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationalEvent::set_allocated_continuous_haptic(::NullSpaceIPC::ContinuousHaptic* continuous_haptic) {
  clear_events();
  if (continuous_haptic) {
    set_has_continuous_haptic();
    events_.continuous_haptic_ = continuous_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.LocationalEvent.continuous_haptic)
}

// optional .NullSpaceIPC.BufferedHaptic buffered_haptic = 4;
bool LocationalEvent::has_buffered_haptic() const {
  return events_case() == kBufferedHaptic;
}
void LocationalEvent::set_has_buffered_haptic() {
  _oneof_case_[0] = kBufferedHaptic;
}
void LocationalEvent::clear_buffered_haptic() {
  if (has_buffered_haptic()) {
    delete events_.buffered_haptic_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::BufferedHaptic& LocationalEvent::buffered_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.LocationalEvent.buffered_haptic)
  return has_buffered_haptic()
      ? *events_.buffered_haptic_
      : ::NullSpaceIPC::BufferedHaptic::default_instance();
}
::NullSpaceIPC::BufferedHaptic* LocationalEvent::mutable_buffered_haptic() {
  if (!has_buffered_haptic()) {
    clear_events();
    set_has_buffered_haptic();
    events_.buffered_haptic_ = new ::NullSpaceIPC::BufferedHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.LocationalEvent.buffered_haptic)
  return events_.buffered_haptic_;
}
::NullSpaceIPC::BufferedHaptic* LocationalEvent::release_buffered_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.LocationalEvent.buffered_haptic)
  if (has_buffered_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::BufferedHaptic* temp = events_.buffered_haptic_;
    events_.buffered_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationalEvent::set_allocated_buffered_haptic(::NullSpaceIPC::BufferedHaptic* buffered_haptic) {
  clear_events();
  if (buffered_haptic) {
    set_has_buffered_haptic();
    events_.buffered_haptic_ = buffered_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.LocationalEvent.buffered_haptic)
}

// optional .NullSpaceIPC.BeginAnalogAudio begin_analog_audio = 16;
bool LocationalEvent::has_begin_analog_audio() const {
  return events_case() == kBeginAnalogAudio;
}
void LocationalEvent::set_has_begin_analog_audio() {
  _oneof_case_[0] = kBeginAnalogAudio;
}
void LocationalEvent::clear_begin_analog_audio() {
  if (has_begin_analog_audio()) {
    delete events_.begin_analog_audio_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::BeginAnalogAudio& LocationalEvent::begin_analog_audio() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.LocationalEvent.begin_analog_audio)
  return has_begin_analog_audio()
      ? *events_.begin_analog_audio_
      : ::NullSpaceIPC::BeginAnalogAudio::default_instance();
}
::NullSpaceIPC::BeginAnalogAudio* LocationalEvent::mutable_begin_analog_audio() {
  if (!has_begin_analog_audio()) {
    clear_events();
    set_has_begin_analog_audio();
    events_.begin_analog_audio_ = new ::NullSpaceIPC::BeginAnalogAudio;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.LocationalEvent.begin_analog_audio)
  return events_.begin_analog_audio_;
}
::NullSpaceIPC::BeginAnalogAudio* LocationalEvent::release_begin_analog_audio() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.LocationalEvent.begin_analog_audio)
  if (has_begin_analog_audio()) {
    clear_has_events();
    ::NullSpaceIPC::BeginAnalogAudio* temp = events_.begin_analog_audio_;
    events_.begin_analog_audio_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationalEvent::set_allocated_begin_analog_audio(::NullSpaceIPC::BeginAnalogAudio* begin_analog_audio) {
  clear_events();
  if (begin_analog_audio) {
    set_has_begin_analog_audio();
    events_.begin_analog_audio_ = begin_analog_audio;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.LocationalEvent.begin_analog_audio)
}

// optional .NullSpaceIPC.EndAnalogAudio end_analog_audio = 17;
bool LocationalEvent::has_end_analog_audio() const {
  return events_case() == kEndAnalogAudio;
}
void LocationalEvent::set_has_end_analog_audio() {
  _oneof_case_[0] = kEndAnalogAudio;
}
void LocationalEvent::clear_end_analog_audio() {
  if (has_end_analog_audio()) {
    delete events_.end_analog_audio_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::EndAnalogAudio& LocationalEvent::end_analog_audio() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.LocationalEvent.end_analog_audio)
  return has_end_analog_audio()
      ? *events_.end_analog_audio_
      : ::NullSpaceIPC::EndAnalogAudio::default_instance();
}
::NullSpaceIPC::EndAnalogAudio* LocationalEvent::mutable_end_analog_audio() {
  if (!has_end_analog_audio()) {
    clear_events();
    set_has_end_analog_audio();
    events_.end_analog_audio_ = new ::NullSpaceIPC::EndAnalogAudio;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.LocationalEvent.end_analog_audio)
  return events_.end_analog_audio_;
}
::NullSpaceIPC::EndAnalogAudio* LocationalEvent::release_end_analog_audio() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.LocationalEvent.end_analog_audio)
  if (has_end_analog_audio()) {
    clear_has_events();
    ::NullSpaceIPC::EndAnalogAudio* temp = events_.end_analog_audio_;
    events_.end_analog_audio_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationalEvent::set_allocated_end_analog_audio(::NullSpaceIPC::EndAnalogAudio* end_analog_audio) {
  clear_events();
  if (end_analog_audio) {
    set_has_end_analog_audio();
    events_.end_analog_audio_ = end_analog_audio;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.LocationalEvent.end_analog_audio)
}

bool LocationalEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
void LocationalEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
LocationalEvent::EventsCase LocationalEvent::events_case() const {
  return LocationalEvent::EventsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HighLevelEvent::kParentIdFieldNumber;
const int HighLevelEvent::kPlaybackEventFieldNumber;
const int HighLevelEvent::kLocationalEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HighLevelEvent::HighLevelEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.HighLevelEvent)
}

void HighLevelEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  HighLevelEvent_default_oneof_instance_->playback_event_ = const_cast< ::NullSpaceIPC::PlaybackEvent*>(&::NullSpaceIPC::PlaybackEvent::default_instance());
  HighLevelEvent_default_oneof_instance_->locational_event_ = const_cast< ::NullSpaceIPC::LocationalEvent*>(&::NullSpaceIPC::LocationalEvent::default_instance());
}

HighLevelEvent::HighLevelEvent(const HighLevelEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.HighLevelEvent)
}

void HighLevelEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  parent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_events();
}

HighLevelEvent::~HighLevelEvent() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.HighLevelEvent)
  SharedDtor();
}

void HighLevelEvent::SharedDtor() {
  if (has_events()) {
    clear_events();
  }
  if (this != default_instance_) {
  }
}

void HighLevelEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HighLevelEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HighLevelEvent_descriptor_;
}

const HighLevelEvent& HighLevelEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

HighLevelEvent* HighLevelEvent::default_instance_ = NULL;

HighLevelEvent* HighLevelEvent::New(::google::protobuf::Arena* arena) const {
  HighLevelEvent* n = new HighLevelEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HighLevelEvent::clear_events() {
// @@protoc_insertion_point(one_of_clear_start:NullSpaceIPC.HighLevelEvent)
  switch(events_case()) {
    case kPlaybackEvent: {
      delete events_.playback_event_;
      break;
    }
    case kLocationalEvent: {
      delete events_.locational_event_;
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENTS_NOT_SET;
}


void HighLevelEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.HighLevelEvent)
  parent_id_ = GOOGLE_ULONGLONG(0);
  clear_events();
}

bool HighLevelEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.HighLevelEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 parent_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playback_event;
        break;
      }

      // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
      case 2: {
        if (tag == 18) {
         parse_playback_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playback_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_locational_event;
        break;
      }

      // optional .NullSpaceIPC.LocationalEvent locational_event = 3;
      case 3: {
        if (tag == 26) {
         parse_locational_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locational_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.HighLevelEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.HighLevelEvent)
  return false;
#undef DO_
}

void HighLevelEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.HighLevelEvent)
  // optional uint64 parent_id = 1;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->parent_id(), output);
  }

  // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
  if (has_playback_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *events_.playback_event_, output);
  }

  // optional .NullSpaceIPC.LocationalEvent locational_event = 3;
  if (has_locational_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *events_.locational_event_, output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.HighLevelEvent)
}

::google::protobuf::uint8* HighLevelEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.HighLevelEvent)
  // optional uint64 parent_id = 1;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->parent_id(), target);
  }

  // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
  if (has_playback_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *events_.playback_event_, false, target);
  }

  // optional .NullSpaceIPC.LocationalEvent locational_event = 3;
  if (has_locational_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *events_.locational_event_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.HighLevelEvent)
  return target;
}

int HighLevelEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.HighLevelEvent)
  int total_size = 0;

  // optional uint64 parent_id = 1;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_id());
  }

  switch (events_case()) {
    // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
    case kPlaybackEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.playback_event_);
      break;
    }
    // optional .NullSpaceIPC.LocationalEvent locational_event = 3;
    case kLocationalEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.locational_event_);
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HighLevelEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.HighLevelEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HighLevelEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HighLevelEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.HighLevelEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.HighLevelEvent)
    MergeFrom(*source);
  }
}

void HighLevelEvent::MergeFrom(const HighLevelEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.HighLevelEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.events_case()) {
    case kPlaybackEvent: {
      mutable_playback_event()->::NullSpaceIPC::PlaybackEvent::MergeFrom(from.playback_event());
      break;
    }
    case kLocationalEvent: {
      mutable_locational_event()->::NullSpaceIPC::LocationalEvent::MergeFrom(from.locational_event());
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
}

void HighLevelEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.HighLevelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighLevelEvent::CopyFrom(const HighLevelEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.HighLevelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighLevelEvent::IsInitialized() const {

  return true;
}

void HighLevelEvent::Swap(HighLevelEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HighLevelEvent::InternalSwap(HighLevelEvent* other) {
  std::swap(parent_id_, other->parent_id_);
  std::swap(events_, other->events_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HighLevelEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HighLevelEvent_descriptor_;
  metadata.reflection = HighLevelEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HighLevelEvent

// optional uint64 parent_id = 1;
void HighLevelEvent::clear_parent_id() {
  parent_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 HighLevelEvent::parent_id() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.parent_id)
  return parent_id_;
}
 void HighLevelEvent::set_parent_id(::google::protobuf::uint64 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.HighLevelEvent.parent_id)
}

// optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
bool HighLevelEvent::has_playback_event() const {
  return events_case() == kPlaybackEvent;
}
void HighLevelEvent::set_has_playback_event() {
  _oneof_case_[0] = kPlaybackEvent;
}
void HighLevelEvent::clear_playback_event() {
  if (has_playback_event()) {
    delete events_.playback_event_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::PlaybackEvent& HighLevelEvent::playback_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.playback_event)
  return has_playback_event()
      ? *events_.playback_event_
      : ::NullSpaceIPC::PlaybackEvent::default_instance();
}
::NullSpaceIPC::PlaybackEvent* HighLevelEvent::mutable_playback_event() {
  if (!has_playback_event()) {
    clear_events();
    set_has_playback_event();
    events_.playback_event_ = new ::NullSpaceIPC::PlaybackEvent;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.playback_event)
  return events_.playback_event_;
}
::NullSpaceIPC::PlaybackEvent* HighLevelEvent::release_playback_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.playback_event)
  if (has_playback_event()) {
    clear_has_events();
    ::NullSpaceIPC::PlaybackEvent* temp = events_.playback_event_;
    events_.playback_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HighLevelEvent::set_allocated_playback_event(::NullSpaceIPC::PlaybackEvent* playback_event) {
  clear_events();
  if (playback_event) {
    set_has_playback_event();
    events_.playback_event_ = playback_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.playback_event)
}

// optional .NullSpaceIPC.LocationalEvent locational_event = 3;
bool HighLevelEvent::has_locational_event() const {
  return events_case() == kLocationalEvent;
}
void HighLevelEvent::set_has_locational_event() {
  _oneof_case_[0] = kLocationalEvent;
}
void HighLevelEvent::clear_locational_event() {
  if (has_locational_event()) {
    delete events_.locational_event_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::LocationalEvent& HighLevelEvent::locational_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.locational_event)
  return has_locational_event()
      ? *events_.locational_event_
      : ::NullSpaceIPC::LocationalEvent::default_instance();
}
::NullSpaceIPC::LocationalEvent* HighLevelEvent::mutable_locational_event() {
  if (!has_locational_event()) {
    clear_events();
    set_has_locational_event();
    events_.locational_event_ = new ::NullSpaceIPC::LocationalEvent;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.locational_event)
  return events_.locational_event_;
}
::NullSpaceIPC::LocationalEvent* HighLevelEvent::release_locational_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.locational_event)
  if (has_locational_event()) {
    clear_has_events();
    ::NullSpaceIPC::LocationalEvent* temp = events_.locational_event_;
    events_.locational_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HighLevelEvent::set_allocated_locational_event(::NullSpaceIPC::LocationalEvent* locational_event) {
  clear_events();
  if (locational_event) {
    set_has_locational_event();
    events_.locational_event_ = locational_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.locational_event)
}

bool HighLevelEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
void HighLevelEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
HighLevelEvent::EventsCase HighLevelEvent::events_case() const {
  return HighLevelEvent::EventsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

// @@protoc_insertion_point(global_scope)
