// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HighLevelEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HighLevelEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

namespace {

const ::google::protobuf::Descriptor* UUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleHaptic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleHaptic_reflection_ = NULL;
const ::google::protobuf::Descriptor* HighLevelEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HighLevelEvent_reflection_ = NULL;
struct HighLevelEventOneofInstance {
  const ::NullSpaceIPC::SimpleHaptic* simple_haptic_;
}* HighLevelEvent_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_HighLevelEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_HighLevelEvent_2eproto() {
  protobuf_AddDesc_HighLevelEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HighLevelEvent.proto");
  GOOGLE_CHECK(file != NULL);
  UUID_descriptor_ = file->message_type(0);
  static const int UUID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, value_),
  };
  UUID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UUID_descriptor_,
      UUID::default_instance_,
      UUID_offsets_,
      -1,
      -1,
      -1,
      sizeof(UUID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _is_default_instance_));
  SimpleHaptic_descriptor_ = file->message_type(1);
  static const int SimpleHaptic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, duration_),
  };
  SimpleHaptic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleHaptic_descriptor_,
      SimpleHaptic::default_instance_,
      SimpleHaptic_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleHaptic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, _is_default_instance_));
  HighLevelEvent_descriptor_ = file->message_type(2);
  static const int HighLevelEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, region_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HighLevelEvent_default_oneof_instance_, simple_haptic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, events_),
  };
  HighLevelEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HighLevelEvent_descriptor_,
      HighLevelEvent::default_instance_,
      HighLevelEvent_offsets_,
      -1,
      -1,
      -1,
      HighLevelEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _oneof_case_[0]),
      sizeof(HighLevelEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HighLevelEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UUID_descriptor_, &UUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleHaptic_descriptor_, &SimpleHaptic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HighLevelEvent_descriptor_, &HighLevelEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HighLevelEvent_2eproto() {
  delete UUID::default_instance_;
  delete UUID_reflection_;
  delete SimpleHaptic::default_instance_;
  delete SimpleHaptic_reflection_;
  delete HighLevelEvent::default_instance_;
  delete HighLevelEvent_default_oneof_instance_;
  delete HighLevelEvent_reflection_;
}

void protobuf_AddDesc_HighLevelEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_HighLevelEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024HighLevelEvent.proto\022\014NullSpaceIPC\"\025\n\004"
    "UUID\022\r\n\005value\030\001 \001(\014\"B\n\014SimpleHaptic\022\016\n\006e"
    "ffect\030\001 \001(\r\022\020\n\010strength\030\002 \001(\002\022\020\n\010duratio"
    "n\030\003 \001(\002\"\206\001\n\016HighLevelEvent\022%\n\tparent_id\030"
    "\001 \001(\0132\022.NullSpaceIPC.UUID\022\016\n\006region\030\002 \001("
    "\t\0223\n\rsimple_haptic\030\003 \001(\0132\032.NullSpaceIPC."
    "SimpleHapticH\000B\010\n\006eventsb\006proto3", 272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HighLevelEvent.proto", &protobuf_RegisterTypes);
  UUID::default_instance_ = new UUID();
  SimpleHaptic::default_instance_ = new SimpleHaptic();
  HighLevelEvent::default_instance_ = new HighLevelEvent();
  HighLevelEvent_default_oneof_instance_ = new HighLevelEventOneofInstance();
  UUID::default_instance_->InitAsDefaultInstance();
  SimpleHaptic::default_instance_->InitAsDefaultInstance();
  HighLevelEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HighLevelEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HighLevelEvent_2eproto {
  StaticDescriptorInitializer_HighLevelEvent_2eproto() {
    protobuf_AddDesc_HighLevelEvent_2eproto();
  }
} static_descriptor_initializer_HighLevelEvent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UUID::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UUID::UUID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.UUID)
}

void UUID::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UUID::UUID(const UUID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.UUID)
}

void UUID::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UUID::~UUID() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.UUID)
  SharedDtor();
}

void UUID::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UUID_descriptor_;
}

const UUID& UUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

UUID* UUID::default_instance_ = NULL;

UUID* UUID::New(::google::protobuf::Arena* arena) const {
  UUID* n = new UUID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UUID::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.UUID)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.UUID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.UUID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.UUID)
  return false;
#undef DO_
}

void UUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.UUID)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.UUID)
}

::google::protobuf::uint8* UUID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.UUID)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.UUID)
  return target;
}

int UUID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.UUID)
  int total_size = 0;

  // optional bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UUID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.UUID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UUID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UUID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.UUID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.UUID)
    MergeFrom(*source);
  }
}

void UUID::MergeFrom(const UUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.UUID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void UUID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUID::CopyFrom(const UUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUID::IsInitialized() const {

  return true;
}

void UUID::Swap(UUID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UUID::InternalSwap(UUID* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UUID_descriptor_;
  metadata.reflection = UUID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UUID

// optional bytes value = 1;
void UUID::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UUID::value() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.UUID.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UUID::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.UUID.value)
}
 void UUID::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.UUID.value)
}
 void UUID::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.UUID.value)
}
 ::std::string* UUID::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.UUID.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UUID::release_value() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.UUID.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UUID::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.UUID.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleHaptic::kEffectFieldNumber;
const int SimpleHaptic::kStrengthFieldNumber;
const int SimpleHaptic::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleHaptic::SimpleHaptic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.SimpleHaptic)
}

void SimpleHaptic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimpleHaptic::SimpleHaptic(const SimpleHaptic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.SimpleHaptic)
}

void SimpleHaptic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  effect_ = 0u;
  strength_ = 0;
  duration_ = 0;
}

SimpleHaptic::~SimpleHaptic() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.SimpleHaptic)
  SharedDtor();
}

void SimpleHaptic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleHaptic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleHaptic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleHaptic_descriptor_;
}

const SimpleHaptic& SimpleHaptic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

SimpleHaptic* SimpleHaptic::default_instance_ = NULL;

SimpleHaptic* SimpleHaptic::New(::google::protobuf::Arena* arena) const {
  SimpleHaptic* n = new SimpleHaptic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleHaptic::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.SimpleHaptic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimpleHaptic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleHaptic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(effect_, duration_);

#undef ZR_HELPER_
#undef ZR_

}

bool SimpleHaptic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.SimpleHaptic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 effect = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_strength;
        break;
      }

      // optional float strength = 2;
      case 2: {
        if (tag == 21) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_duration;
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (tag == 29) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.SimpleHaptic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.SimpleHaptic)
  return false;
#undef DO_
}

void SimpleHaptic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.SimpleHaptic)
  // optional uint32 effect = 1;
  if (this->effect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect(), output);
  }

  // optional float strength = 2;
  if (this->strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->strength(), output);
  }

  // optional float duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.SimpleHaptic)
}

::google::protobuf::uint8* SimpleHaptic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.SimpleHaptic)
  // optional uint32 effect = 1;
  if (this->effect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect(), target);
  }

  // optional float strength = 2;
  if (this->strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->strength(), target);
  }

  // optional float duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.SimpleHaptic)
  return target;
}

int SimpleHaptic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.SimpleHaptic)
  int total_size = 0;

  // optional uint32 effect = 1;
  if (this->effect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect());
  }

  // optional float strength = 2;
  if (this->strength() != 0) {
    total_size += 1 + 4;
  }

  // optional float duration = 3;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleHaptic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.SimpleHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleHaptic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleHaptic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.SimpleHaptic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.SimpleHaptic)
    MergeFrom(*source);
  }
}

void SimpleHaptic::MergeFrom(const SimpleHaptic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.SimpleHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.effect() != 0) {
    set_effect(from.effect());
  }
  if (from.strength() != 0) {
    set_strength(from.strength());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void SimpleHaptic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.SimpleHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleHaptic::CopyFrom(const SimpleHaptic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.SimpleHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleHaptic::IsInitialized() const {

  return true;
}

void SimpleHaptic::Swap(SimpleHaptic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleHaptic::InternalSwap(SimpleHaptic* other) {
  std::swap(effect_, other->effect_);
  std::swap(strength_, other->strength_);
  std::swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleHaptic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleHaptic_descriptor_;
  metadata.reflection = SimpleHaptic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleHaptic

// optional uint32 effect = 1;
void SimpleHaptic::clear_effect() {
  effect_ = 0u;
}
 ::google::protobuf::uint32 SimpleHaptic::effect() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.effect)
  return effect_;
}
 void SimpleHaptic::set_effect(::google::protobuf::uint32 value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.effect)
}

// optional float strength = 2;
void SimpleHaptic::clear_strength() {
  strength_ = 0;
}
 float SimpleHaptic::strength() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.strength)
  return strength_;
}
 void SimpleHaptic::set_strength(float value) {
  
  strength_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.strength)
}

// optional float duration = 3;
void SimpleHaptic::clear_duration() {
  duration_ = 0;
}
 float SimpleHaptic::duration() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.duration)
  return duration_;
}
 void SimpleHaptic::set_duration(float value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HighLevelEvent::kParentIdFieldNumber;
const int HighLevelEvent::kRegionFieldNumber;
const int HighLevelEvent::kSimpleHapticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HighLevelEvent::HighLevelEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.HighLevelEvent)
}

void HighLevelEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  parent_id_ = const_cast< ::NullSpaceIPC::UUID*>(&::NullSpaceIPC::UUID::default_instance());
  HighLevelEvent_default_oneof_instance_->simple_haptic_ = const_cast< ::NullSpaceIPC::SimpleHaptic*>(&::NullSpaceIPC::SimpleHaptic::default_instance());
}

HighLevelEvent::HighLevelEvent(const HighLevelEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.HighLevelEvent)
}

void HighLevelEvent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parent_id_ = NULL;
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_events();
}

HighLevelEvent::~HighLevelEvent() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.HighLevelEvent)
  SharedDtor();
}

void HighLevelEvent::SharedDtor() {
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_events()) {
    clear_events();
  }
  if (this != default_instance_) {
    delete parent_id_;
  }
}

void HighLevelEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HighLevelEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HighLevelEvent_descriptor_;
}

const HighLevelEvent& HighLevelEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

HighLevelEvent* HighLevelEvent::default_instance_ = NULL;

HighLevelEvent* HighLevelEvent::New(::google::protobuf::Arena* arena) const {
  HighLevelEvent* n = new HighLevelEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HighLevelEvent::clear_events() {
// @@protoc_insertion_point(one_of_clear_start:NullSpaceIPC.HighLevelEvent)
  switch(events_case()) {
    case kSimpleHaptic: {
      delete events_.simple_haptic_;
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENTS_NOT_SET;
}


void HighLevelEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.HighLevelEvent)
  if (GetArenaNoVirtual() == NULL && parent_id_ != NULL) delete parent_id_;
  parent_id_ = NULL;
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_events();
}

bool HighLevelEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.HighLevelEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.UUID parent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional string region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NullSpaceIPC.HighLevelEvent.region"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_simple_haptic;
        break;
      }

      // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
      case 3: {
        if (tag == 26) {
         parse_simple_haptic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_haptic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.HighLevelEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.HighLevelEvent)
  return false;
#undef DO_
}

void HighLevelEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.HighLevelEvent)
  // optional .NullSpaceIPC.UUID parent_id = 1;
  if (this->has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->parent_id_, output);
  }

  // optional string region = 2;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NullSpaceIPC.HighLevelEvent.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->region(), output);
  }

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
  if (has_simple_haptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *events_.simple_haptic_, output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.HighLevelEvent)
}

::google::protobuf::uint8* HighLevelEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.HighLevelEvent)
  // optional .NullSpaceIPC.UUID parent_id = 1;
  if (this->has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->parent_id_, false, target);
  }

  // optional string region = 2;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NullSpaceIPC.HighLevelEvent.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->region(), target);
  }

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
  if (has_simple_haptic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *events_.simple_haptic_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.HighLevelEvent)
  return target;
}

int HighLevelEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.HighLevelEvent)
  int total_size = 0;

  // optional .NullSpaceIPC.UUID parent_id = 1;
  if (this->has_parent_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parent_id_);
  }

  // optional string region = 2;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  switch (events_case()) {
    // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
    case kSimpleHaptic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.simple_haptic_);
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HighLevelEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.HighLevelEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HighLevelEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HighLevelEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.HighLevelEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.HighLevelEvent)
    MergeFrom(*source);
  }
}

void HighLevelEvent::MergeFrom(const HighLevelEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.HighLevelEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.events_case()) {
    case kSimpleHaptic: {
      mutable_simple_haptic()->::NullSpaceIPC::SimpleHaptic::MergeFrom(from.simple_haptic());
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  if (from.has_parent_id()) {
    mutable_parent_id()->::NullSpaceIPC::UUID::MergeFrom(from.parent_id());
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
}

void HighLevelEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.HighLevelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighLevelEvent::CopyFrom(const HighLevelEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.HighLevelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighLevelEvent::IsInitialized() const {

  return true;
}

void HighLevelEvent::Swap(HighLevelEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HighLevelEvent::InternalSwap(HighLevelEvent* other) {
  std::swap(parent_id_, other->parent_id_);
  region_.Swap(&other->region_);
  std::swap(events_, other->events_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HighLevelEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HighLevelEvent_descriptor_;
  metadata.reflection = HighLevelEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HighLevelEvent

// optional .NullSpaceIPC.UUID parent_id = 1;
bool HighLevelEvent::has_parent_id() const {
  return !_is_default_instance_ && parent_id_ != NULL;
}
void HighLevelEvent::clear_parent_id() {
  if (GetArenaNoVirtual() == NULL && parent_id_ != NULL) delete parent_id_;
  parent_id_ = NULL;
}
const ::NullSpaceIPC::UUID& HighLevelEvent::parent_id() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.parent_id)
  return parent_id_ != NULL ? *parent_id_ : *default_instance_->parent_id_;
}
::NullSpaceIPC::UUID* HighLevelEvent::mutable_parent_id() {
  
  if (parent_id_ == NULL) {
    parent_id_ = new ::NullSpaceIPC::UUID;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.parent_id)
  return parent_id_;
}
::NullSpaceIPC::UUID* HighLevelEvent::release_parent_id() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.parent_id)
  
  ::NullSpaceIPC::UUID* temp = parent_id_;
  parent_id_ = NULL;
  return temp;
}
void HighLevelEvent::set_allocated_parent_id(::NullSpaceIPC::UUID* parent_id) {
  delete parent_id_;
  parent_id_ = parent_id;
  if (parent_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.parent_id)
}

// optional string region = 2;
void HighLevelEvent::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HighLevelEvent::region() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.region)
  return region_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HighLevelEvent::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.HighLevelEvent.region)
}
 void HighLevelEvent::set_region(const char* value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.HighLevelEvent.region)
}
 void HighLevelEvent::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.HighLevelEvent.region)
}
 ::std::string* HighLevelEvent::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HighLevelEvent::release_region() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HighLevelEvent::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.region)
}

// optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
bool HighLevelEvent::has_simple_haptic() const {
  return events_case() == kSimpleHaptic;
}
void HighLevelEvent::set_has_simple_haptic() {
  _oneof_case_[0] = kSimpleHaptic;
}
void HighLevelEvent::clear_simple_haptic() {
  if (has_simple_haptic()) {
    delete events_.simple_haptic_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::SimpleHaptic& HighLevelEvent::simple_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return has_simple_haptic()
      ? *events_.simple_haptic_
      : ::NullSpaceIPC::SimpleHaptic::default_instance();
}
::NullSpaceIPC::SimpleHaptic* HighLevelEvent::mutable_simple_haptic() {
  if (!has_simple_haptic()) {
    clear_events();
    set_has_simple_haptic();
    events_.simple_haptic_ = new ::NullSpaceIPC::SimpleHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return events_.simple_haptic_;
}
::NullSpaceIPC::SimpleHaptic* HighLevelEvent::release_simple_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.simple_haptic)
  if (has_simple_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::SimpleHaptic* temp = events_.simple_haptic_;
    events_.simple_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HighLevelEvent::set_allocated_simple_haptic(::NullSpaceIPC::SimpleHaptic* simple_haptic) {
  clear_events();
  if (simple_haptic) {
    set_has_simple_haptic();
    events_.simple_haptic_ = simple_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.simple_haptic)
}

bool HighLevelEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
void HighLevelEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
HighLevelEvent::EventsCase HighLevelEvent::events_case() const {
  return HighLevelEvent::EventsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

// @@protoc_insertion_point(global_scope)
