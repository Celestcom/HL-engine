// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HighLevelEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HighLevelEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

namespace {

const ::google::protobuf::Descriptor* RegionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleHaptic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleHaptic_reflection_ = NULL;
struct SimpleHapticOneofInstance {
  const ::NullSpaceIPC::RegionList* regions_;
  const ::NullSpaceIPC::NodeList* nodes_;
}* SimpleHaptic_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CurveHaptic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveHaptic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveHaptic_Sample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveHaptic_Sample_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealtimeHaptic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealtimeHaptic_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealtimeHaptic_Magnitude_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealtimeHaptic_Magnitude_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaybackEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaybackEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlaybackEvent_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HighLevelEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HighLevelEvent_reflection_ = NULL;
struct HighLevelEventOneofInstance {
  const ::NullSpaceIPC::PlaybackEvent* playback_event_;
  const ::NullSpaceIPC::SimpleHaptic* simple_haptic_;
  const ::NullSpaceIPC::RealtimeHaptic* realtime_haptic_;
  const ::NullSpaceIPC::CurveHaptic* curve_haptic_;
}* HighLevelEvent_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_HighLevelEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_HighLevelEvent_2eproto() {
  protobuf_AddDesc_HighLevelEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HighLevelEvent.proto");
  GOOGLE_CHECK(file != NULL);
  RegionList_descriptor_ = file->message_type(0);
  static const int RegionList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, regions_),
  };
  RegionList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionList_descriptor_,
      RegionList::default_instance_,
      RegionList_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, _is_default_instance_));
  NodeList_descriptor_ = file->message_type(1);
  static const int NodeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, nodes_),
  };
  NodeList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeList_descriptor_,
      NodeList::default_instance_,
      NodeList_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _is_default_instance_));
  SimpleHaptic_descriptor_ = file->message_type(2);
  static const int SimpleHaptic_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SimpleHaptic_default_oneof_instance_, regions_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SimpleHaptic_default_oneof_instance_, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, where_),
  };
  SimpleHaptic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleHaptic_descriptor_,
      SimpleHaptic::default_instance_,
      SimpleHaptic_offsets_,
      -1,
      -1,
      -1,
      SimpleHaptic_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, _oneof_case_[0]),
      sizeof(SimpleHaptic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleHaptic, _is_default_instance_));
  CurveHaptic_descriptor_ = file->message_type(3);
  static const int CurveHaptic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic, regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic, samples_),
  };
  CurveHaptic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurveHaptic_descriptor_,
      CurveHaptic::default_instance_,
      CurveHaptic_offsets_,
      -1,
      -1,
      -1,
      sizeof(CurveHaptic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic, _is_default_instance_));
  CurveHaptic_Sample_descriptor_ = CurveHaptic_descriptor_->nested_type(0);
  static const int CurveHaptic_Sample_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic_Sample, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic_Sample, magnitude_),
  };
  CurveHaptic_Sample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurveHaptic_Sample_descriptor_,
      CurveHaptic_Sample::default_instance_,
      CurveHaptic_Sample_offsets_,
      -1,
      -1,
      -1,
      sizeof(CurveHaptic_Sample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic_Sample, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveHaptic_Sample, _is_default_instance_));
  RealtimeHaptic_descriptor_ = file->message_type(4);
  static const int RealtimeHaptic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealtimeHaptic, magnitudes_),
  };
  RealtimeHaptic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RealtimeHaptic_descriptor_,
      RealtimeHaptic::default_instance_,
      RealtimeHaptic_offsets_,
      -1,
      -1,
      -1,
      sizeof(RealtimeHaptic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealtimeHaptic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealtimeHaptic, _is_default_instance_));
  RealtimeHaptic_Magnitude_descriptor_ = RealtimeHaptic_descriptor_->nested_type(0);
  static const int RealtimeHaptic_Magnitude_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealtimeHaptic_Magnitude, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealtimeHaptic_Magnitude, strength_),
  };
  RealtimeHaptic_Magnitude_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RealtimeHaptic_Magnitude_descriptor_,
      RealtimeHaptic_Magnitude::default_instance_,
      RealtimeHaptic_Magnitude_offsets_,
      -1,
      -1,
      -1,
      sizeof(RealtimeHaptic_Magnitude),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealtimeHaptic_Magnitude, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealtimeHaptic_Magnitude, _is_default_instance_));
  PlaybackEvent_descriptor_ = file->message_type(5);
  static const int PlaybackEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackEvent, command_),
  };
  PlaybackEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlaybackEvent_descriptor_,
      PlaybackEvent::default_instance_,
      PlaybackEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlaybackEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackEvent, _is_default_instance_));
  PlaybackEvent_Command_descriptor_ = PlaybackEvent_descriptor_->enum_type(0);
  HighLevelEvent_descriptor_ = file->message_type(6);
  static const int HighLevelEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, parent_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HighLevelEvent_default_oneof_instance_, playback_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HighLevelEvent_default_oneof_instance_, simple_haptic_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HighLevelEvent_default_oneof_instance_, realtime_haptic_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HighLevelEvent_default_oneof_instance_, curve_haptic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, events_),
  };
  HighLevelEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HighLevelEvent_descriptor_,
      HighLevelEvent::default_instance_,
      HighLevelEvent_offsets_,
      -1,
      -1,
      -1,
      HighLevelEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _oneof_case_[0]),
      sizeof(HighLevelEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighLevelEvent, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HighLevelEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionList_descriptor_, &RegionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeList_descriptor_, &NodeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleHaptic_descriptor_, &SimpleHaptic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurveHaptic_descriptor_, &CurveHaptic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurveHaptic_Sample_descriptor_, &CurveHaptic_Sample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RealtimeHaptic_descriptor_, &RealtimeHaptic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RealtimeHaptic_Magnitude_descriptor_, &RealtimeHaptic_Magnitude::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlaybackEvent_descriptor_, &PlaybackEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HighLevelEvent_descriptor_, &HighLevelEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HighLevelEvent_2eproto() {
  delete RegionList::default_instance_;
  delete RegionList_reflection_;
  delete NodeList::default_instance_;
  delete NodeList_reflection_;
  delete SimpleHaptic::default_instance_;
  delete SimpleHaptic_default_oneof_instance_;
  delete SimpleHaptic_reflection_;
  delete CurveHaptic::default_instance_;
  delete CurveHaptic_reflection_;
  delete CurveHaptic_Sample::default_instance_;
  delete CurveHaptic_Sample_reflection_;
  delete RealtimeHaptic::default_instance_;
  delete RealtimeHaptic_reflection_;
  delete RealtimeHaptic_Magnitude::default_instance_;
  delete RealtimeHaptic_Magnitude_reflection_;
  delete PlaybackEvent::default_instance_;
  delete PlaybackEvent_reflection_;
  delete HighLevelEvent::default_instance_;
  delete HighLevelEvent_default_oneof_instance_;
  delete HighLevelEvent_reflection_;
}

void protobuf_AddDesc_HighLevelEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_HighLevelEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024HighLevelEvent.proto\022\014NullSpaceIPC\"\035\n\n"
    "RegionList\022\017\n\007regions\030\001 \003(\r\"\031\n\010NodeList\022"
    "\r\n\005nodes\030\001 \003(\004\"\241\001\n\014SimpleHaptic\022+\n\007regio"
    "ns\030\001 \001(\0132\030.NullSpaceIPC.RegionListH\000\022\'\n\005"
    "nodes\030\002 \001(\0132\026.NullSpaceIPC.NodeListH\000\022\016\n"
    "\006effect\030\003 \001(\r\022\020\n\010strength\030\004 \001(\002\022\020\n\010durat"
    "ion\030\005 \001(\002B\007\n\005where\"|\n\013CurveHaptic\022\017\n\007reg"
    "ions\030\001 \003(\r\0221\n\007samples\030\002 \003(\0132 .NullSpaceI"
    "PC.CurveHaptic.Sample\032)\n\006Sample\022\014\n\004time\030"
    "\001 \001(\002\022\021\n\tmagnitude\030\002 \001(\002\"{\n\016RealtimeHapt"
    "ic\022:\n\nmagnitudes\030\001 \003(\0132&.NullSpaceIPC.Re"
    "altimeHaptic.Magnitude\032-\n\tMagnitude\022\016\n\006r"
    "egion\030\001 \001(\r\022\020\n\010strength\030\002 \001(\002\"\201\001\n\rPlayba"
    "ckEvent\0224\n\007command\030\001 \001(\0162#.NullSpaceIPC."
    "PlaybackEvent.Command\":\n\007Command\022\013\n\007UNKN"
    "OWN\020\000\022\t\n\005PAUSE\020\001\022\013\n\007UNPAUSE\020\002\022\n\n\006CANCEL\020"
    "\003\"\205\002\n\016HighLevelEvent\022\021\n\tparent_id\030\001 \001(\004\022"
    "5\n\016playback_event\030\002 \001(\0132\033.NullSpaceIPC.P"
    "laybackEventH\000\0223\n\rsimple_haptic\030\003 \001(\0132\032."
    "NullSpaceIPC.SimpleHapticH\000\0227\n\017realtime_"
    "haptic\030\004 \001(\0132\034.NullSpaceIPC.RealtimeHapt"
    "icH\000\0221\n\014curve_haptic\030\005 \001(\0132\031.NullSpaceIP"
    "C.CurveHapticH\000B\010\n\006eventsb\006proto3", 913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HighLevelEvent.proto", &protobuf_RegisterTypes);
  RegionList::default_instance_ = new RegionList();
  NodeList::default_instance_ = new NodeList();
  SimpleHaptic::default_instance_ = new SimpleHaptic();
  SimpleHaptic_default_oneof_instance_ = new SimpleHapticOneofInstance();
  CurveHaptic::default_instance_ = new CurveHaptic();
  CurveHaptic_Sample::default_instance_ = new CurveHaptic_Sample();
  RealtimeHaptic::default_instance_ = new RealtimeHaptic();
  RealtimeHaptic_Magnitude::default_instance_ = new RealtimeHaptic_Magnitude();
  PlaybackEvent::default_instance_ = new PlaybackEvent();
  HighLevelEvent::default_instance_ = new HighLevelEvent();
  HighLevelEvent_default_oneof_instance_ = new HighLevelEventOneofInstance();
  RegionList::default_instance_->InitAsDefaultInstance();
  NodeList::default_instance_->InitAsDefaultInstance();
  SimpleHaptic::default_instance_->InitAsDefaultInstance();
  CurveHaptic::default_instance_->InitAsDefaultInstance();
  CurveHaptic_Sample::default_instance_->InitAsDefaultInstance();
  RealtimeHaptic::default_instance_->InitAsDefaultInstance();
  RealtimeHaptic_Magnitude::default_instance_->InitAsDefaultInstance();
  PlaybackEvent::default_instance_->InitAsDefaultInstance();
  HighLevelEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HighLevelEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HighLevelEvent_2eproto {
  StaticDescriptorInitializer_HighLevelEvent_2eproto() {
    protobuf_AddDesc_HighLevelEvent_2eproto();
  }
} static_descriptor_initializer_HighLevelEvent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionList::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionList::RegionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.RegionList)
}

void RegionList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegionList::RegionList(const RegionList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.RegionList)
}

void RegionList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RegionList::~RegionList() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.RegionList)
  SharedDtor();
}

void RegionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionList_descriptor_;
}

const RegionList& RegionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

RegionList* RegionList::default_instance_ = NULL;

RegionList* RegionList::New(::google::protobuf::Arena* arena) const {
  RegionList* n = new RegionList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionList::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.RegionList)
  regions_.Clear();
}

bool RegionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.RegionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 regions = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.RegionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.RegionList)
  return false;
#undef DO_
}

void RegionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.RegionList)
  // repeated uint32 regions = 1;
  if (this->regions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_regions_cached_byte_size_);
  }
  for (int i = 0; i < this->regions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->regions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.RegionList)
}

::google::protobuf::uint8* RegionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.RegionList)
  // repeated uint32 regions = 1;
  if (this->regions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _regions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->regions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->regions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.RegionList)
  return target;
}

int RegionList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.RegionList)
  int total_size = 0;

  // repeated uint32 regions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->regions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->regions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _regions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.RegionList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegionList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.RegionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.RegionList)
    MergeFrom(*source);
  }
}

void RegionList::MergeFrom(const RegionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.RegionList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  regions_.MergeFrom(from.regions_);
}

void RegionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.RegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionList::CopyFrom(const RegionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.RegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionList::IsInitialized() const {

  return true;
}

void RegionList::Swap(RegionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionList::InternalSwap(RegionList* other) {
  regions_.UnsafeArenaSwap(&other->regions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionList_descriptor_;
  metadata.reflection = RegionList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionList

// repeated uint32 regions = 1;
int RegionList::regions_size() const {
  return regions_.size();
}
void RegionList::clear_regions() {
  regions_.Clear();
}
 ::google::protobuf::uint32 RegionList::regions(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.RegionList.regions)
  return regions_.Get(index);
}
 void RegionList::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.RegionList.regions)
}
 void RegionList::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:NullSpaceIPC.RegionList.regions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RegionList::regions() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.RegionList.regions)
  return regions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RegionList::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.RegionList.regions)
  return &regions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeList::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeList::NodeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.NodeList)
}

void NodeList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeList::NodeList(const NodeList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.NodeList)
}

void NodeList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NodeList::~NodeList() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.NodeList)
  SharedDtor();
}

void NodeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeList_descriptor_;
}

const NodeList& NodeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

NodeList* NodeList::default_instance_ = NULL;

NodeList* NodeList::New(::google::protobuf::Arena* arena) const {
  NodeList* n = new NodeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.NodeList)
  nodes_.Clear();
}

bool NodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.NodeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_nodes())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.NodeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.NodeList)
  return false;
#undef DO_
}

void NodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.NodeList)
  // repeated uint64 nodes = 1;
  if (this->nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_cached_byte_size_);
  }
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.NodeList)
}

::google::protobuf::uint8* NodeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.NodeList)
  // repeated uint64 nodes = 1;
  if (this->nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nodes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->nodes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.NodeList)
  return target;
}

int NodeList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.NodeList)
  int total_size = 0;

  // repeated uint64 nodes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->nodes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.NodeList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.NodeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.NodeList)
    MergeFrom(*source);
  }
}

void NodeList::MergeFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.NodeList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
}

void NodeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeList::CopyFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeList::IsInitialized() const {

  return true;
}

void NodeList::Swap(NodeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeList::InternalSwap(NodeList* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeList_descriptor_;
  metadata.reflection = NodeList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeList

// repeated uint64 nodes = 1;
int NodeList::nodes_size() const {
  return nodes_.size();
}
void NodeList::clear_nodes() {
  nodes_.Clear();
}
 ::google::protobuf::uint64 NodeList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.NodeList.nodes)
  return nodes_.Get(index);
}
 void NodeList::set_nodes(int index, ::google::protobuf::uint64 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.NodeList.nodes)
}
 void NodeList::add_nodes(::google::protobuf::uint64 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:NullSpaceIPC.NodeList.nodes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NodeList::nodes() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.NodeList.nodes)
  return nodes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NodeList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.NodeList.nodes)
  return &nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleHaptic::kRegionsFieldNumber;
const int SimpleHaptic::kNodesFieldNumber;
const int SimpleHaptic::kEffectFieldNumber;
const int SimpleHaptic::kStrengthFieldNumber;
const int SimpleHaptic::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleHaptic::SimpleHaptic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.SimpleHaptic)
}

void SimpleHaptic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  SimpleHaptic_default_oneof_instance_->regions_ = const_cast< ::NullSpaceIPC::RegionList*>(&::NullSpaceIPC::RegionList::default_instance());
  SimpleHaptic_default_oneof_instance_->nodes_ = const_cast< ::NullSpaceIPC::NodeList*>(&::NullSpaceIPC::NodeList::default_instance());
}

SimpleHaptic::SimpleHaptic(const SimpleHaptic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.SimpleHaptic)
}

void SimpleHaptic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  effect_ = 0u;
  strength_ = 0;
  duration_ = 0;
  clear_has_where();
}

SimpleHaptic::~SimpleHaptic() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.SimpleHaptic)
  SharedDtor();
}

void SimpleHaptic::SharedDtor() {
  if (has_where()) {
    clear_where();
  }
  if (this != default_instance_) {
  }
}

void SimpleHaptic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleHaptic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleHaptic_descriptor_;
}

const SimpleHaptic& SimpleHaptic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

SimpleHaptic* SimpleHaptic::default_instance_ = NULL;

SimpleHaptic* SimpleHaptic::New(::google::protobuf::Arena* arena) const {
  SimpleHaptic* n = new SimpleHaptic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleHaptic::clear_where() {
// @@protoc_insertion_point(one_of_clear_start:NullSpaceIPC.SimpleHaptic)
  switch(where_case()) {
    case kRegions: {
      delete where_.regions_;
      break;
    }
    case kNodes: {
      delete where_.nodes_;
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHERE_NOT_SET;
}


void SimpleHaptic::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.SimpleHaptic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimpleHaptic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleHaptic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(effect_, duration_);

#undef ZR_HELPER_
#undef ZR_

  clear_where();
}

bool SimpleHaptic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.SimpleHaptic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.RegionList regions = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // optional .NullSpaceIPC.NodeList nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effect;
        break;
      }

      // optional uint32 effect = 3;
      case 3: {
        if (tag == 24) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_strength;
        break;
      }

      // optional float strength = 4;
      case 4: {
        if (tag == 37) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_duration;
        break;
      }

      // optional float duration = 5;
      case 5: {
        if (tag == 45) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.SimpleHaptic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.SimpleHaptic)
  return false;
#undef DO_
}

void SimpleHaptic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.SimpleHaptic)
  // optional .NullSpaceIPC.RegionList regions = 1;
  if (has_regions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *where_.regions_, output);
  }

  // optional .NullSpaceIPC.NodeList nodes = 2;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *where_.nodes_, output);
  }

  // optional uint32 effect = 3;
  if (this->effect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effect(), output);
  }

  // optional float strength = 4;
  if (this->strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->strength(), output);
  }

  // optional float duration = 5;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.SimpleHaptic)
}

::google::protobuf::uint8* SimpleHaptic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.SimpleHaptic)
  // optional .NullSpaceIPC.RegionList regions = 1;
  if (has_regions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *where_.regions_, false, target);
  }

  // optional .NullSpaceIPC.NodeList nodes = 2;
  if (has_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *where_.nodes_, false, target);
  }

  // optional uint32 effect = 3;
  if (this->effect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effect(), target);
  }

  // optional float strength = 4;
  if (this->strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->strength(), target);
  }

  // optional float duration = 5;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.SimpleHaptic)
  return target;
}

int SimpleHaptic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.SimpleHaptic)
  int total_size = 0;

  // optional uint32 effect = 3;
  if (this->effect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect());
  }

  // optional float strength = 4;
  if (this->strength() != 0) {
    total_size += 1 + 4;
  }

  // optional float duration = 5;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  switch (where_case()) {
    // optional .NullSpaceIPC.RegionList regions = 1;
    case kRegions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *where_.regions_);
      break;
    }
    // optional .NullSpaceIPC.NodeList nodes = 2;
    case kNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *where_.nodes_);
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleHaptic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.SimpleHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleHaptic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleHaptic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.SimpleHaptic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.SimpleHaptic)
    MergeFrom(*source);
  }
}

void SimpleHaptic::MergeFrom(const SimpleHaptic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.SimpleHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.where_case()) {
    case kRegions: {
      mutable_regions()->::NullSpaceIPC::RegionList::MergeFrom(from.regions());
      break;
    }
    case kNodes: {
      mutable_nodes()->::NullSpaceIPC::NodeList::MergeFrom(from.nodes());
      break;
    }
    case WHERE_NOT_SET: {
      break;
    }
  }
  if (from.effect() != 0) {
    set_effect(from.effect());
  }
  if (from.strength() != 0) {
    set_strength(from.strength());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void SimpleHaptic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.SimpleHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleHaptic::CopyFrom(const SimpleHaptic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.SimpleHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleHaptic::IsInitialized() const {

  return true;
}

void SimpleHaptic::Swap(SimpleHaptic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleHaptic::InternalSwap(SimpleHaptic* other) {
  std::swap(effect_, other->effect_);
  std::swap(strength_, other->strength_);
  std::swap(duration_, other->duration_);
  std::swap(where_, other->where_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleHaptic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleHaptic_descriptor_;
  metadata.reflection = SimpleHaptic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleHaptic

// optional .NullSpaceIPC.RegionList regions = 1;
bool SimpleHaptic::has_regions() const {
  return where_case() == kRegions;
}
void SimpleHaptic::set_has_regions() {
  _oneof_case_[0] = kRegions;
}
void SimpleHaptic::clear_regions() {
  if (has_regions()) {
    delete where_.regions_;
    clear_has_where();
  }
}
 const ::NullSpaceIPC::RegionList& SimpleHaptic::regions() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.regions)
  return has_regions()
      ? *where_.regions_
      : ::NullSpaceIPC::RegionList::default_instance();
}
::NullSpaceIPC::RegionList* SimpleHaptic::mutable_regions() {
  if (!has_regions()) {
    clear_where();
    set_has_regions();
    where_.regions_ = new ::NullSpaceIPC::RegionList;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.SimpleHaptic.regions)
  return where_.regions_;
}
::NullSpaceIPC::RegionList* SimpleHaptic::release_regions() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.SimpleHaptic.regions)
  if (has_regions()) {
    clear_has_where();
    ::NullSpaceIPC::RegionList* temp = where_.regions_;
    where_.regions_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SimpleHaptic::set_allocated_regions(::NullSpaceIPC::RegionList* regions) {
  clear_where();
  if (regions) {
    set_has_regions();
    where_.regions_ = regions;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.SimpleHaptic.regions)
}

// optional .NullSpaceIPC.NodeList nodes = 2;
bool SimpleHaptic::has_nodes() const {
  return where_case() == kNodes;
}
void SimpleHaptic::set_has_nodes() {
  _oneof_case_[0] = kNodes;
}
void SimpleHaptic::clear_nodes() {
  if (has_nodes()) {
    delete where_.nodes_;
    clear_has_where();
  }
}
 const ::NullSpaceIPC::NodeList& SimpleHaptic::nodes() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.nodes)
  return has_nodes()
      ? *where_.nodes_
      : ::NullSpaceIPC::NodeList::default_instance();
}
::NullSpaceIPC::NodeList* SimpleHaptic::mutable_nodes() {
  if (!has_nodes()) {
    clear_where();
    set_has_nodes();
    where_.nodes_ = new ::NullSpaceIPC::NodeList;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.SimpleHaptic.nodes)
  return where_.nodes_;
}
::NullSpaceIPC::NodeList* SimpleHaptic::release_nodes() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.SimpleHaptic.nodes)
  if (has_nodes()) {
    clear_has_where();
    ::NullSpaceIPC::NodeList* temp = where_.nodes_;
    where_.nodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SimpleHaptic::set_allocated_nodes(::NullSpaceIPC::NodeList* nodes) {
  clear_where();
  if (nodes) {
    set_has_nodes();
    where_.nodes_ = nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.SimpleHaptic.nodes)
}

// optional uint32 effect = 3;
void SimpleHaptic::clear_effect() {
  effect_ = 0u;
}
 ::google::protobuf::uint32 SimpleHaptic::effect() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.effect)
  return effect_;
}
 void SimpleHaptic::set_effect(::google::protobuf::uint32 value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.effect)
}

// optional float strength = 4;
void SimpleHaptic::clear_strength() {
  strength_ = 0;
}
 float SimpleHaptic::strength() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.strength)
  return strength_;
}
 void SimpleHaptic::set_strength(float value) {
  
  strength_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.strength)
}

// optional float duration = 5;
void SimpleHaptic::clear_duration() {
  duration_ = 0;
}
 float SimpleHaptic::duration() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.SimpleHaptic.duration)
  return duration_;
}
 void SimpleHaptic::set_duration(float value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.SimpleHaptic.duration)
}

bool SimpleHaptic::has_where() const {
  return where_case() != WHERE_NOT_SET;
}
void SimpleHaptic::clear_has_where() {
  _oneof_case_[0] = WHERE_NOT_SET;
}
SimpleHaptic::WhereCase SimpleHaptic::where_case() const {
  return SimpleHaptic::WhereCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveHaptic_Sample::kTimeFieldNumber;
const int CurveHaptic_Sample::kMagnitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveHaptic_Sample::CurveHaptic_Sample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.CurveHaptic.Sample)
}

void CurveHaptic_Sample::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CurveHaptic_Sample::CurveHaptic_Sample(const CurveHaptic_Sample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.CurveHaptic.Sample)
}

void CurveHaptic_Sample::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = 0;
  magnitude_ = 0;
}

CurveHaptic_Sample::~CurveHaptic_Sample() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.CurveHaptic.Sample)
  SharedDtor();
}

void CurveHaptic_Sample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurveHaptic_Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveHaptic_Sample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveHaptic_Sample_descriptor_;
}

const CurveHaptic_Sample& CurveHaptic_Sample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

CurveHaptic_Sample* CurveHaptic_Sample::default_instance_ = NULL;

CurveHaptic_Sample* CurveHaptic_Sample::New(::google::protobuf::Arena* arena) const {
  CurveHaptic_Sample* n = new CurveHaptic_Sample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurveHaptic_Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.CurveHaptic.Sample)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CurveHaptic_Sample, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CurveHaptic_Sample*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, magnitude_);

#undef ZR_HELPER_
#undef ZR_

}

bool CurveHaptic_Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.CurveHaptic.Sample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_magnitude;
        break;
      }

      // optional float magnitude = 2;
      case 2: {
        if (tag == 21) {
         parse_magnitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magnitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.CurveHaptic.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.CurveHaptic.Sample)
  return false;
#undef DO_
}

void CurveHaptic_Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.CurveHaptic.Sample)
  // optional float time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time(), output);
  }

  // optional float magnitude = 2;
  if (this->magnitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->magnitude(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.CurveHaptic.Sample)
}

::google::protobuf::uint8* CurveHaptic_Sample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.CurveHaptic.Sample)
  // optional float time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time(), target);
  }

  // optional float magnitude = 2;
  if (this->magnitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->magnitude(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.CurveHaptic.Sample)
  return target;
}

int CurveHaptic_Sample::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.CurveHaptic.Sample)
  int total_size = 0;

  // optional float time = 1;
  if (this->time() != 0) {
    total_size += 1 + 4;
  }

  // optional float magnitude = 2;
  if (this->magnitude() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveHaptic_Sample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.CurveHaptic.Sample)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurveHaptic_Sample* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveHaptic_Sample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.CurveHaptic.Sample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.CurveHaptic.Sample)
    MergeFrom(*source);
  }
}

void CurveHaptic_Sample::MergeFrom(const CurveHaptic_Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.CurveHaptic.Sample)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.magnitude() != 0) {
    set_magnitude(from.magnitude());
  }
}

void CurveHaptic_Sample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.CurveHaptic.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveHaptic_Sample::CopyFrom(const CurveHaptic_Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.CurveHaptic.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveHaptic_Sample::IsInitialized() const {

  return true;
}

void CurveHaptic_Sample::Swap(CurveHaptic_Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveHaptic_Sample::InternalSwap(CurveHaptic_Sample* other) {
  std::swap(time_, other->time_);
  std::swap(magnitude_, other->magnitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurveHaptic_Sample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveHaptic_Sample_descriptor_;
  metadata.reflection = CurveHaptic_Sample_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveHaptic::kRegionsFieldNumber;
const int CurveHaptic::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveHaptic::CurveHaptic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.CurveHaptic)
}

void CurveHaptic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CurveHaptic::CurveHaptic(const CurveHaptic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.CurveHaptic)
}

void CurveHaptic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CurveHaptic::~CurveHaptic() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.CurveHaptic)
  SharedDtor();
}

void CurveHaptic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurveHaptic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveHaptic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveHaptic_descriptor_;
}

const CurveHaptic& CurveHaptic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

CurveHaptic* CurveHaptic::default_instance_ = NULL;

CurveHaptic* CurveHaptic::New(::google::protobuf::Arena* arena) const {
  CurveHaptic* n = new CurveHaptic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurveHaptic::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.CurveHaptic)
  regions_.Clear();
  samples_.Clear();
}

bool CurveHaptic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.CurveHaptic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 regions = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        break;
      }

      // repeated .NullSpaceIPC.CurveHaptic.Sample samples = 2;
      case 2: {
        if (tag == 18) {
         parse_samples:
          DO_(input->IncrementRecursionDepth());
         parse_loop_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_samples;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.CurveHaptic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.CurveHaptic)
  return false;
#undef DO_
}

void CurveHaptic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.CurveHaptic)
  // repeated uint32 regions = 1;
  if (this->regions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_regions_cached_byte_size_);
  }
  for (int i = 0; i < this->regions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->regions(i), output);
  }

  // repeated .NullSpaceIPC.CurveHaptic.Sample samples = 2;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->samples(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.CurveHaptic)
}

::google::protobuf::uint8* CurveHaptic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.CurveHaptic)
  // repeated uint32 regions = 1;
  if (this->regions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _regions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->regions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->regions(i), target);
  }

  // repeated .NullSpaceIPC.CurveHaptic.Sample samples = 2;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->samples(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.CurveHaptic)
  return target;
}

int CurveHaptic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.CurveHaptic)
  int total_size = 0;

  // repeated uint32 regions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->regions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->regions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _regions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .NullSpaceIPC.CurveHaptic.Sample samples = 2;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveHaptic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.CurveHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurveHaptic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveHaptic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.CurveHaptic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.CurveHaptic)
    MergeFrom(*source);
  }
}

void CurveHaptic::MergeFrom(const CurveHaptic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.CurveHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  regions_.MergeFrom(from.regions_);
  samples_.MergeFrom(from.samples_);
}

void CurveHaptic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.CurveHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveHaptic::CopyFrom(const CurveHaptic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.CurveHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveHaptic::IsInitialized() const {

  return true;
}

void CurveHaptic::Swap(CurveHaptic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveHaptic::InternalSwap(CurveHaptic* other) {
  regions_.UnsafeArenaSwap(&other->regions_);
  samples_.UnsafeArenaSwap(&other->samples_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurveHaptic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveHaptic_descriptor_;
  metadata.reflection = CurveHaptic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurveHaptic_Sample

// optional float time = 1;
void CurveHaptic_Sample::clear_time() {
  time_ = 0;
}
 float CurveHaptic_Sample::time() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.CurveHaptic.Sample.time)
  return time_;
}
 void CurveHaptic_Sample::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.CurveHaptic.Sample.time)
}

// optional float magnitude = 2;
void CurveHaptic_Sample::clear_magnitude() {
  magnitude_ = 0;
}
 float CurveHaptic_Sample::magnitude() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.CurveHaptic.Sample.magnitude)
  return magnitude_;
}
 void CurveHaptic_Sample::set_magnitude(float value) {
  
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.CurveHaptic.Sample.magnitude)
}

// -------------------------------------------------------------------

// CurveHaptic

// repeated uint32 regions = 1;
int CurveHaptic::regions_size() const {
  return regions_.size();
}
void CurveHaptic::clear_regions() {
  regions_.Clear();
}
 ::google::protobuf::uint32 CurveHaptic::regions(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.CurveHaptic.regions)
  return regions_.Get(index);
}
 void CurveHaptic::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.CurveHaptic.regions)
}
 void CurveHaptic::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:NullSpaceIPC.CurveHaptic.regions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CurveHaptic::regions() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.CurveHaptic.regions)
  return regions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CurveHaptic::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.CurveHaptic.regions)
  return &regions_;
}

// repeated .NullSpaceIPC.CurveHaptic.Sample samples = 2;
int CurveHaptic::samples_size() const {
  return samples_.size();
}
void CurveHaptic::clear_samples() {
  samples_.Clear();
}
const ::NullSpaceIPC::CurveHaptic_Sample& CurveHaptic::samples(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.CurveHaptic.samples)
  return samples_.Get(index);
}
::NullSpaceIPC::CurveHaptic_Sample* CurveHaptic::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.CurveHaptic.samples)
  return samples_.Mutable(index);
}
::NullSpaceIPC::CurveHaptic_Sample* CurveHaptic::add_samples() {
  // @@protoc_insertion_point(field_add:NullSpaceIPC.CurveHaptic.samples)
  return samples_.Add();
}
::google::protobuf::RepeatedPtrField< ::NullSpaceIPC::CurveHaptic_Sample >*
CurveHaptic::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.CurveHaptic.samples)
  return &samples_;
}
const ::google::protobuf::RepeatedPtrField< ::NullSpaceIPC::CurveHaptic_Sample >&
CurveHaptic::samples() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.CurveHaptic.samples)
  return samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealtimeHaptic_Magnitude::kRegionFieldNumber;
const int RealtimeHaptic_Magnitude::kStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealtimeHaptic_Magnitude::RealtimeHaptic_Magnitude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.RealtimeHaptic.Magnitude)
}

void RealtimeHaptic_Magnitude::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RealtimeHaptic_Magnitude::RealtimeHaptic_Magnitude(const RealtimeHaptic_Magnitude& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.RealtimeHaptic.Magnitude)
}

void RealtimeHaptic_Magnitude::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  region_ = 0u;
  strength_ = 0;
}

RealtimeHaptic_Magnitude::~RealtimeHaptic_Magnitude() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.RealtimeHaptic.Magnitude)
  SharedDtor();
}

void RealtimeHaptic_Magnitude::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealtimeHaptic_Magnitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealtimeHaptic_Magnitude::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealtimeHaptic_Magnitude_descriptor_;
}

const RealtimeHaptic_Magnitude& RealtimeHaptic_Magnitude::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

RealtimeHaptic_Magnitude* RealtimeHaptic_Magnitude::default_instance_ = NULL;

RealtimeHaptic_Magnitude* RealtimeHaptic_Magnitude::New(::google::protobuf::Arena* arena) const {
  RealtimeHaptic_Magnitude* n = new RealtimeHaptic_Magnitude;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealtimeHaptic_Magnitude::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RealtimeHaptic_Magnitude, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RealtimeHaptic_Magnitude*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(region_, strength_);

#undef ZR_HELPER_
#undef ZR_

}

bool RealtimeHaptic_Magnitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 region = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_strength;
        break;
      }

      // optional float strength = 2;
      case 2: {
        if (tag == 21) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.RealtimeHaptic.Magnitude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.RealtimeHaptic.Magnitude)
  return false;
#undef DO_
}

void RealtimeHaptic_Magnitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  // optional uint32 region = 1;
  if (this->region() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region(), output);
  }

  // optional float strength = 2;
  if (this->strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->strength(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.RealtimeHaptic.Magnitude)
}

::google::protobuf::uint8* RealtimeHaptic_Magnitude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  // optional uint32 region = 1;
  if (this->region() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region(), target);
  }

  // optional float strength = 2;
  if (this->strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->strength(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.RealtimeHaptic.Magnitude)
  return target;
}

int RealtimeHaptic_Magnitude::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  int total_size = 0;

  // optional uint32 region = 1;
  if (this->region() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region());
  }

  // optional float strength = 2;
  if (this->strength() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealtimeHaptic_Magnitude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RealtimeHaptic_Magnitude* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RealtimeHaptic_Magnitude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.RealtimeHaptic.Magnitude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.RealtimeHaptic.Magnitude)
    MergeFrom(*source);
  }
}

void RealtimeHaptic_Magnitude::MergeFrom(const RealtimeHaptic_Magnitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.region() != 0) {
    set_region(from.region());
  }
  if (from.strength() != 0) {
    set_strength(from.strength());
  }
}

void RealtimeHaptic_Magnitude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealtimeHaptic_Magnitude::CopyFrom(const RealtimeHaptic_Magnitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.RealtimeHaptic.Magnitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealtimeHaptic_Magnitude::IsInitialized() const {

  return true;
}

void RealtimeHaptic_Magnitude::Swap(RealtimeHaptic_Magnitude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealtimeHaptic_Magnitude::InternalSwap(RealtimeHaptic_Magnitude* other) {
  std::swap(region_, other->region_);
  std::swap(strength_, other->strength_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealtimeHaptic_Magnitude::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealtimeHaptic_Magnitude_descriptor_;
  metadata.reflection = RealtimeHaptic_Magnitude_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealtimeHaptic::kMagnitudesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealtimeHaptic::RealtimeHaptic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.RealtimeHaptic)
}

void RealtimeHaptic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RealtimeHaptic::RealtimeHaptic(const RealtimeHaptic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.RealtimeHaptic)
}

void RealtimeHaptic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RealtimeHaptic::~RealtimeHaptic() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.RealtimeHaptic)
  SharedDtor();
}

void RealtimeHaptic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealtimeHaptic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealtimeHaptic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealtimeHaptic_descriptor_;
}

const RealtimeHaptic& RealtimeHaptic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

RealtimeHaptic* RealtimeHaptic::default_instance_ = NULL;

RealtimeHaptic* RealtimeHaptic::New(::google::protobuf::Arena* arena) const {
  RealtimeHaptic* n = new RealtimeHaptic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealtimeHaptic::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.RealtimeHaptic)
  magnitudes_.Clear();
}

bool RealtimeHaptic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.RealtimeHaptic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NullSpaceIPC.RealtimeHaptic.Magnitude magnitudes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_magnitudes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_magnitudes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_magnitudes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.RealtimeHaptic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.RealtimeHaptic)
  return false;
#undef DO_
}

void RealtimeHaptic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.RealtimeHaptic)
  // repeated .NullSpaceIPC.RealtimeHaptic.Magnitude magnitudes = 1;
  for (unsigned int i = 0, n = this->magnitudes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->magnitudes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.RealtimeHaptic)
}

::google::protobuf::uint8* RealtimeHaptic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.RealtimeHaptic)
  // repeated .NullSpaceIPC.RealtimeHaptic.Magnitude magnitudes = 1;
  for (unsigned int i = 0, n = this->magnitudes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->magnitudes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.RealtimeHaptic)
  return target;
}

int RealtimeHaptic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.RealtimeHaptic)
  int total_size = 0;

  // repeated .NullSpaceIPC.RealtimeHaptic.Magnitude magnitudes = 1;
  total_size += 1 * this->magnitudes_size();
  for (int i = 0; i < this->magnitudes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->magnitudes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealtimeHaptic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.RealtimeHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RealtimeHaptic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RealtimeHaptic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.RealtimeHaptic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.RealtimeHaptic)
    MergeFrom(*source);
  }
}

void RealtimeHaptic::MergeFrom(const RealtimeHaptic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.RealtimeHaptic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  magnitudes_.MergeFrom(from.magnitudes_);
}

void RealtimeHaptic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.RealtimeHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealtimeHaptic::CopyFrom(const RealtimeHaptic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.RealtimeHaptic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealtimeHaptic::IsInitialized() const {

  return true;
}

void RealtimeHaptic::Swap(RealtimeHaptic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealtimeHaptic::InternalSwap(RealtimeHaptic* other) {
  magnitudes_.UnsafeArenaSwap(&other->magnitudes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealtimeHaptic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealtimeHaptic_descriptor_;
  metadata.reflection = RealtimeHaptic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealtimeHaptic_Magnitude

// optional uint32 region = 1;
void RealtimeHaptic_Magnitude::clear_region() {
  region_ = 0u;
}
 ::google::protobuf::uint32 RealtimeHaptic_Magnitude::region() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.RealtimeHaptic.Magnitude.region)
  return region_;
}
 void RealtimeHaptic_Magnitude::set_region(::google::protobuf::uint32 value) {
  
  region_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.RealtimeHaptic.Magnitude.region)
}

// optional float strength = 2;
void RealtimeHaptic_Magnitude::clear_strength() {
  strength_ = 0;
}
 float RealtimeHaptic_Magnitude::strength() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.RealtimeHaptic.Magnitude.strength)
  return strength_;
}
 void RealtimeHaptic_Magnitude::set_strength(float value) {
  
  strength_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.RealtimeHaptic.Magnitude.strength)
}

// -------------------------------------------------------------------

// RealtimeHaptic

// repeated .NullSpaceIPC.RealtimeHaptic.Magnitude magnitudes = 1;
int RealtimeHaptic::magnitudes_size() const {
  return magnitudes_.size();
}
void RealtimeHaptic::clear_magnitudes() {
  magnitudes_.Clear();
}
const ::NullSpaceIPC::RealtimeHaptic_Magnitude& RealtimeHaptic::magnitudes(int index) const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.RealtimeHaptic.magnitudes)
  return magnitudes_.Get(index);
}
::NullSpaceIPC::RealtimeHaptic_Magnitude* RealtimeHaptic::mutable_magnitudes(int index) {
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.RealtimeHaptic.magnitudes)
  return magnitudes_.Mutable(index);
}
::NullSpaceIPC::RealtimeHaptic_Magnitude* RealtimeHaptic::add_magnitudes() {
  // @@protoc_insertion_point(field_add:NullSpaceIPC.RealtimeHaptic.magnitudes)
  return magnitudes_.Add();
}
::google::protobuf::RepeatedPtrField< ::NullSpaceIPC::RealtimeHaptic_Magnitude >*
RealtimeHaptic::mutable_magnitudes() {
  // @@protoc_insertion_point(field_mutable_list:NullSpaceIPC.RealtimeHaptic.magnitudes)
  return &magnitudes_;
}
const ::google::protobuf::RepeatedPtrField< ::NullSpaceIPC::RealtimeHaptic_Magnitude >&
RealtimeHaptic::magnitudes() const {
  // @@protoc_insertion_point(field_list:NullSpaceIPC.RealtimeHaptic.magnitudes)
  return magnitudes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PlaybackEvent_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackEvent_Command_descriptor_;
}
bool PlaybackEvent_Command_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlaybackEvent_Command PlaybackEvent::UNKNOWN;
const PlaybackEvent_Command PlaybackEvent::PAUSE;
const PlaybackEvent_Command PlaybackEvent::UNPAUSE;
const PlaybackEvent_Command PlaybackEvent::CANCEL;
const PlaybackEvent_Command PlaybackEvent::Command_MIN;
const PlaybackEvent_Command PlaybackEvent::Command_MAX;
const int PlaybackEvent::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackEvent::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackEvent::PlaybackEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.PlaybackEvent)
}

void PlaybackEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlaybackEvent::PlaybackEvent(const PlaybackEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.PlaybackEvent)
}

void PlaybackEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  command_ = 0;
}

PlaybackEvent::~PlaybackEvent() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.PlaybackEvent)
  SharedDtor();
}

void PlaybackEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaybackEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaybackEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackEvent_descriptor_;
}

const PlaybackEvent& PlaybackEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

PlaybackEvent* PlaybackEvent::default_instance_ = NULL;

PlaybackEvent* PlaybackEvent::New(::google::protobuf::Arena* arena) const {
  PlaybackEvent* n = new PlaybackEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaybackEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.PlaybackEvent)
  command_ = 0;
}

bool PlaybackEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.PlaybackEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::NullSpaceIPC::PlaybackEvent_Command >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.PlaybackEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.PlaybackEvent)
  return false;
#undef DO_
}

void PlaybackEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.PlaybackEvent)
  // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.PlaybackEvent)
}

::google::protobuf::uint8* PlaybackEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.PlaybackEvent)
  // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.PlaybackEvent)
  return target;
}

int PlaybackEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.PlaybackEvent)
  int total_size = 0;

  // optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaybackEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.PlaybackEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlaybackEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaybackEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.PlaybackEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.PlaybackEvent)
    MergeFrom(*source);
  }
}

void PlaybackEvent::MergeFrom(const PlaybackEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.PlaybackEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void PlaybackEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.PlaybackEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackEvent::CopyFrom(const PlaybackEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.PlaybackEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackEvent::IsInitialized() const {

  return true;
}

void PlaybackEvent::Swap(PlaybackEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackEvent::InternalSwap(PlaybackEvent* other) {
  std::swap(command_, other->command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaybackEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaybackEvent_descriptor_;
  metadata.reflection = PlaybackEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaybackEvent

// optional .NullSpaceIPC.PlaybackEvent.Command command = 1;
void PlaybackEvent::clear_command() {
  command_ = 0;
}
 ::NullSpaceIPC::PlaybackEvent_Command PlaybackEvent::command() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.PlaybackEvent.command)
  return static_cast< ::NullSpaceIPC::PlaybackEvent_Command >(command_);
}
 void PlaybackEvent::set_command(::NullSpaceIPC::PlaybackEvent_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.PlaybackEvent.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HighLevelEvent::kParentIdFieldNumber;
const int HighLevelEvent::kPlaybackEventFieldNumber;
const int HighLevelEvent::kSimpleHapticFieldNumber;
const int HighLevelEvent::kRealtimeHapticFieldNumber;
const int HighLevelEvent::kCurveHapticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HighLevelEvent::HighLevelEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.HighLevelEvent)
}

void HighLevelEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  HighLevelEvent_default_oneof_instance_->playback_event_ = const_cast< ::NullSpaceIPC::PlaybackEvent*>(&::NullSpaceIPC::PlaybackEvent::default_instance());
  HighLevelEvent_default_oneof_instance_->simple_haptic_ = const_cast< ::NullSpaceIPC::SimpleHaptic*>(&::NullSpaceIPC::SimpleHaptic::default_instance());
  HighLevelEvent_default_oneof_instance_->realtime_haptic_ = const_cast< ::NullSpaceIPC::RealtimeHaptic*>(&::NullSpaceIPC::RealtimeHaptic::default_instance());
  HighLevelEvent_default_oneof_instance_->curve_haptic_ = const_cast< ::NullSpaceIPC::CurveHaptic*>(&::NullSpaceIPC::CurveHaptic::default_instance());
}

HighLevelEvent::HighLevelEvent(const HighLevelEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.HighLevelEvent)
}

void HighLevelEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  parent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_events();
}

HighLevelEvent::~HighLevelEvent() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.HighLevelEvent)
  SharedDtor();
}

void HighLevelEvent::SharedDtor() {
  if (has_events()) {
    clear_events();
  }
  if (this != default_instance_) {
  }
}

void HighLevelEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HighLevelEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HighLevelEvent_descriptor_;
}

const HighLevelEvent& HighLevelEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLevelEvent_2eproto();
  return *default_instance_;
}

HighLevelEvent* HighLevelEvent::default_instance_ = NULL;

HighLevelEvent* HighLevelEvent::New(::google::protobuf::Arena* arena) const {
  HighLevelEvent* n = new HighLevelEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HighLevelEvent::clear_events() {
// @@protoc_insertion_point(one_of_clear_start:NullSpaceIPC.HighLevelEvent)
  switch(events_case()) {
    case kPlaybackEvent: {
      delete events_.playback_event_;
      break;
    }
    case kSimpleHaptic: {
      delete events_.simple_haptic_;
      break;
    }
    case kRealtimeHaptic: {
      delete events_.realtime_haptic_;
      break;
    }
    case kCurveHaptic: {
      delete events_.curve_haptic_;
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENTS_NOT_SET;
}


void HighLevelEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.HighLevelEvent)
  parent_id_ = GOOGLE_ULONGLONG(0);
  clear_events();
}

bool HighLevelEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.HighLevelEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 parent_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playback_event;
        break;
      }

      // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
      case 2: {
        if (tag == 18) {
         parse_playback_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playback_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_simple_haptic;
        break;
      }

      // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
      case 3: {
        if (tag == 26) {
         parse_simple_haptic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_haptic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_realtime_haptic;
        break;
      }

      // optional .NullSpaceIPC.RealtimeHaptic realtime_haptic = 4;
      case 4: {
        if (tag == 34) {
         parse_realtime_haptic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realtime_haptic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_curve_haptic;
        break;
      }

      // optional .NullSpaceIPC.CurveHaptic curve_haptic = 5;
      case 5: {
        if (tag == 42) {
         parse_curve_haptic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve_haptic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.HighLevelEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.HighLevelEvent)
  return false;
#undef DO_
}

void HighLevelEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.HighLevelEvent)
  // optional uint64 parent_id = 1;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->parent_id(), output);
  }

  // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
  if (has_playback_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *events_.playback_event_, output);
  }

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
  if (has_simple_haptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *events_.simple_haptic_, output);
  }

  // optional .NullSpaceIPC.RealtimeHaptic realtime_haptic = 4;
  if (has_realtime_haptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *events_.realtime_haptic_, output);
  }

  // optional .NullSpaceIPC.CurveHaptic curve_haptic = 5;
  if (has_curve_haptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *events_.curve_haptic_, output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.HighLevelEvent)
}

::google::protobuf::uint8* HighLevelEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.HighLevelEvent)
  // optional uint64 parent_id = 1;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->parent_id(), target);
  }

  // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
  if (has_playback_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *events_.playback_event_, false, target);
  }

  // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
  if (has_simple_haptic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *events_.simple_haptic_, false, target);
  }

  // optional .NullSpaceIPC.RealtimeHaptic realtime_haptic = 4;
  if (has_realtime_haptic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *events_.realtime_haptic_, false, target);
  }

  // optional .NullSpaceIPC.CurveHaptic curve_haptic = 5;
  if (has_curve_haptic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *events_.curve_haptic_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.HighLevelEvent)
  return target;
}

int HighLevelEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.HighLevelEvent)
  int total_size = 0;

  // optional uint64 parent_id = 1;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_id());
  }

  switch (events_case()) {
    // optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
    case kPlaybackEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.playback_event_);
      break;
    }
    // optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
    case kSimpleHaptic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.simple_haptic_);
      break;
    }
    // optional .NullSpaceIPC.RealtimeHaptic realtime_haptic = 4;
    case kRealtimeHaptic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.realtime_haptic_);
      break;
    }
    // optional .NullSpaceIPC.CurveHaptic curve_haptic = 5;
    case kCurveHaptic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.curve_haptic_);
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HighLevelEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.HighLevelEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HighLevelEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HighLevelEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.HighLevelEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.HighLevelEvent)
    MergeFrom(*source);
  }
}

void HighLevelEvent::MergeFrom(const HighLevelEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.HighLevelEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.events_case()) {
    case kPlaybackEvent: {
      mutable_playback_event()->::NullSpaceIPC::PlaybackEvent::MergeFrom(from.playback_event());
      break;
    }
    case kSimpleHaptic: {
      mutable_simple_haptic()->::NullSpaceIPC::SimpleHaptic::MergeFrom(from.simple_haptic());
      break;
    }
    case kRealtimeHaptic: {
      mutable_realtime_haptic()->::NullSpaceIPC::RealtimeHaptic::MergeFrom(from.realtime_haptic());
      break;
    }
    case kCurveHaptic: {
      mutable_curve_haptic()->::NullSpaceIPC::CurveHaptic::MergeFrom(from.curve_haptic());
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
}

void HighLevelEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.HighLevelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighLevelEvent::CopyFrom(const HighLevelEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.HighLevelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighLevelEvent::IsInitialized() const {

  return true;
}

void HighLevelEvent::Swap(HighLevelEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HighLevelEvent::InternalSwap(HighLevelEvent* other) {
  std::swap(parent_id_, other->parent_id_);
  std::swap(events_, other->events_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HighLevelEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HighLevelEvent_descriptor_;
  metadata.reflection = HighLevelEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HighLevelEvent

// optional uint64 parent_id = 1;
void HighLevelEvent::clear_parent_id() {
  parent_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 HighLevelEvent::parent_id() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.parent_id)
  return parent_id_;
}
 void HighLevelEvent::set_parent_id(::google::protobuf::uint64 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.HighLevelEvent.parent_id)
}

// optional .NullSpaceIPC.PlaybackEvent playback_event = 2;
bool HighLevelEvent::has_playback_event() const {
  return events_case() == kPlaybackEvent;
}
void HighLevelEvent::set_has_playback_event() {
  _oneof_case_[0] = kPlaybackEvent;
}
void HighLevelEvent::clear_playback_event() {
  if (has_playback_event()) {
    delete events_.playback_event_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::PlaybackEvent& HighLevelEvent::playback_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.playback_event)
  return has_playback_event()
      ? *events_.playback_event_
      : ::NullSpaceIPC::PlaybackEvent::default_instance();
}
::NullSpaceIPC::PlaybackEvent* HighLevelEvent::mutable_playback_event() {
  if (!has_playback_event()) {
    clear_events();
    set_has_playback_event();
    events_.playback_event_ = new ::NullSpaceIPC::PlaybackEvent;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.playback_event)
  return events_.playback_event_;
}
::NullSpaceIPC::PlaybackEvent* HighLevelEvent::release_playback_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.playback_event)
  if (has_playback_event()) {
    clear_has_events();
    ::NullSpaceIPC::PlaybackEvent* temp = events_.playback_event_;
    events_.playback_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HighLevelEvent::set_allocated_playback_event(::NullSpaceIPC::PlaybackEvent* playback_event) {
  clear_events();
  if (playback_event) {
    set_has_playback_event();
    events_.playback_event_ = playback_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.playback_event)
}

// optional .NullSpaceIPC.SimpleHaptic simple_haptic = 3;
bool HighLevelEvent::has_simple_haptic() const {
  return events_case() == kSimpleHaptic;
}
void HighLevelEvent::set_has_simple_haptic() {
  _oneof_case_[0] = kSimpleHaptic;
}
void HighLevelEvent::clear_simple_haptic() {
  if (has_simple_haptic()) {
    delete events_.simple_haptic_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::SimpleHaptic& HighLevelEvent::simple_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return has_simple_haptic()
      ? *events_.simple_haptic_
      : ::NullSpaceIPC::SimpleHaptic::default_instance();
}
::NullSpaceIPC::SimpleHaptic* HighLevelEvent::mutable_simple_haptic() {
  if (!has_simple_haptic()) {
    clear_events();
    set_has_simple_haptic();
    events_.simple_haptic_ = new ::NullSpaceIPC::SimpleHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.simple_haptic)
  return events_.simple_haptic_;
}
::NullSpaceIPC::SimpleHaptic* HighLevelEvent::release_simple_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.simple_haptic)
  if (has_simple_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::SimpleHaptic* temp = events_.simple_haptic_;
    events_.simple_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HighLevelEvent::set_allocated_simple_haptic(::NullSpaceIPC::SimpleHaptic* simple_haptic) {
  clear_events();
  if (simple_haptic) {
    set_has_simple_haptic();
    events_.simple_haptic_ = simple_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.simple_haptic)
}

// optional .NullSpaceIPC.RealtimeHaptic realtime_haptic = 4;
bool HighLevelEvent::has_realtime_haptic() const {
  return events_case() == kRealtimeHaptic;
}
void HighLevelEvent::set_has_realtime_haptic() {
  _oneof_case_[0] = kRealtimeHaptic;
}
void HighLevelEvent::clear_realtime_haptic() {
  if (has_realtime_haptic()) {
    delete events_.realtime_haptic_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::RealtimeHaptic& HighLevelEvent::realtime_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.realtime_haptic)
  return has_realtime_haptic()
      ? *events_.realtime_haptic_
      : ::NullSpaceIPC::RealtimeHaptic::default_instance();
}
::NullSpaceIPC::RealtimeHaptic* HighLevelEvent::mutable_realtime_haptic() {
  if (!has_realtime_haptic()) {
    clear_events();
    set_has_realtime_haptic();
    events_.realtime_haptic_ = new ::NullSpaceIPC::RealtimeHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.realtime_haptic)
  return events_.realtime_haptic_;
}
::NullSpaceIPC::RealtimeHaptic* HighLevelEvent::release_realtime_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.realtime_haptic)
  if (has_realtime_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::RealtimeHaptic* temp = events_.realtime_haptic_;
    events_.realtime_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HighLevelEvent::set_allocated_realtime_haptic(::NullSpaceIPC::RealtimeHaptic* realtime_haptic) {
  clear_events();
  if (realtime_haptic) {
    set_has_realtime_haptic();
    events_.realtime_haptic_ = realtime_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.realtime_haptic)
}

// optional .NullSpaceIPC.CurveHaptic curve_haptic = 5;
bool HighLevelEvent::has_curve_haptic() const {
  return events_case() == kCurveHaptic;
}
void HighLevelEvent::set_has_curve_haptic() {
  _oneof_case_[0] = kCurveHaptic;
}
void HighLevelEvent::clear_curve_haptic() {
  if (has_curve_haptic()) {
    delete events_.curve_haptic_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::CurveHaptic& HighLevelEvent::curve_haptic() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.HighLevelEvent.curve_haptic)
  return has_curve_haptic()
      ? *events_.curve_haptic_
      : ::NullSpaceIPC::CurveHaptic::default_instance();
}
::NullSpaceIPC::CurveHaptic* HighLevelEvent::mutable_curve_haptic() {
  if (!has_curve_haptic()) {
    clear_events();
    set_has_curve_haptic();
    events_.curve_haptic_ = new ::NullSpaceIPC::CurveHaptic;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.HighLevelEvent.curve_haptic)
  return events_.curve_haptic_;
}
::NullSpaceIPC::CurveHaptic* HighLevelEvent::release_curve_haptic() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.HighLevelEvent.curve_haptic)
  if (has_curve_haptic()) {
    clear_has_events();
    ::NullSpaceIPC::CurveHaptic* temp = events_.curve_haptic_;
    events_.curve_haptic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HighLevelEvent::set_allocated_curve_haptic(::NullSpaceIPC::CurveHaptic* curve_haptic) {
  clear_events();
  if (curve_haptic) {
    set_has_curve_haptic();
    events_.curve_haptic_ = curve_haptic;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.HighLevelEvent.curve_haptic)
}

bool HighLevelEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
void HighLevelEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
HighLevelEvent::EventsCase HighLevelEvent::events_case() const {
  return HighLevelEvent::EventsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

// @@protoc_insertion_point(global_scope)
