// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceEvent.proto

#ifndef PROTOBUF_DeviceEvent_2eproto__INCLUDED
#define PROTOBUF_DeviceEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_DeviceEvent_2eproto();
void protobuf_AssignDesc_DeviceEvent_2eproto();
void protobuf_ShutdownFile_DeviceEvent_2eproto();

class DeviceConnected;
class DeviceDisconnected;
class DeviceEvent;

enum DeviceDisconnected_DisconnectionReason {
  DeviceDisconnected_DisconnectionReason_UNKNOWN = 0,
  DeviceDisconnected_DisconnectionReason_UNPLUGGED = 1,
  DeviceDisconnected_DisconnectionReason_CRASH = 2,
  DeviceDisconnected_DisconnectionReason_DeviceDisconnected_DisconnectionReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceDisconnected_DisconnectionReason_DeviceDisconnected_DisconnectionReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceDisconnected_DisconnectionReason_IsValid(int value);
const DeviceDisconnected_DisconnectionReason DeviceDisconnected_DisconnectionReason_DisconnectionReason_MIN = DeviceDisconnected_DisconnectionReason_UNKNOWN;
const DeviceDisconnected_DisconnectionReason DeviceDisconnected_DisconnectionReason_DisconnectionReason_MAX = DeviceDisconnected_DisconnectionReason_CRASH;
const int DeviceDisconnected_DisconnectionReason_DisconnectionReason_ARRAYSIZE = DeviceDisconnected_DisconnectionReason_DisconnectionReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceDisconnected_DisconnectionReason_descriptor();
inline const ::std::string& DeviceDisconnected_DisconnectionReason_Name(DeviceDisconnected_DisconnectionReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceDisconnected_DisconnectionReason_descriptor(), value);
}
inline bool DeviceDisconnected_DisconnectionReason_Parse(
    const ::std::string& name, DeviceDisconnected_DisconnectionReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceDisconnected_DisconnectionReason>(
    DeviceDisconnected_DisconnectionReason_descriptor(), name, value);
}
// ===================================================================

class DeviceConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.DeviceConnected) */ {
 public:
  DeviceConnected();
  virtual ~DeviceConnected();

  DeviceConnected(const DeviceConnected& from);

  inline DeviceConnected& operator=(const DeviceConnected& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceConnected& default_instance();

  void Swap(DeviceConnected* other);

  // implements Message ----------------------------------------------

  inline DeviceConnected* New() const { return New(NULL); }

  DeviceConnected* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceConnected& from);
  void MergeFrom(const DeviceConnected& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string product_name = 2;
  void clear_product_name();
  static const int kProductNameFieldNumber = 2;
  const ::std::string& product_name() const;
  void set_product_name(const ::std::string& value);
  void set_product_name(const char* value);
  void set_product_name(const char* value, size_t size);
  ::std::string* mutable_product_name();
  ::std::string* release_product_name();
  void set_allocated_product_name(::std::string* product_name);

  // optional uint32 firmware_major = 3;
  void clear_firmware_major();
  static const int kFirmwareMajorFieldNumber = 3;
  ::google::protobuf::uint32 firmware_major() const;
  void set_firmware_major(::google::protobuf::uint32 value);

  // optional uint32 firmware_minor = 4;
  void clear_firmware_minor();
  static const int kFirmwareMinorFieldNumber = 4;
  ::google::protobuf::uint32 firmware_minor() const;
  void set_firmware_minor(::google::protobuf::uint32 value);

  // optional uint32 firmware_patch = 5;
  void clear_firmware_patch();
  static const int kFirmwarePatchFieldNumber = 5;
  ::google::protobuf::uint32 firmware_patch() const;
  void set_firmware_patch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NullSpaceIPC.DeviceConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr product_name_;
  ::google::protobuf::uint32 firmware_major_;
  ::google::protobuf::uint32 firmware_minor_;
  ::google::protobuf::uint32 firmware_patch_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DeviceEvent_2eproto();
  friend void protobuf_AssignDesc_DeviceEvent_2eproto();
  friend void protobuf_ShutdownFile_DeviceEvent_2eproto();

  void InitAsDefaultInstance();
  static DeviceConnected* default_instance_;
};
// -------------------------------------------------------------------

class DeviceDisconnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.DeviceDisconnected) */ {
 public:
  DeviceDisconnected();
  virtual ~DeviceDisconnected();

  DeviceDisconnected(const DeviceDisconnected& from);

  inline DeviceDisconnected& operator=(const DeviceDisconnected& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceDisconnected& default_instance();

  void Swap(DeviceDisconnected* other);

  // implements Message ----------------------------------------------

  inline DeviceDisconnected* New() const { return New(NULL); }

  DeviceDisconnected* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceDisconnected& from);
  void MergeFrom(const DeviceDisconnected& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceDisconnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DeviceDisconnected_DisconnectionReason DisconnectionReason;
  static const DisconnectionReason UNKNOWN =
    DeviceDisconnected_DisconnectionReason_UNKNOWN;
  static const DisconnectionReason UNPLUGGED =
    DeviceDisconnected_DisconnectionReason_UNPLUGGED;
  static const DisconnectionReason CRASH =
    DeviceDisconnected_DisconnectionReason_CRASH;
  static inline bool DisconnectionReason_IsValid(int value) {
    return DeviceDisconnected_DisconnectionReason_IsValid(value);
  }
  static const DisconnectionReason DisconnectionReason_MIN =
    DeviceDisconnected_DisconnectionReason_DisconnectionReason_MIN;
  static const DisconnectionReason DisconnectionReason_MAX =
    DeviceDisconnected_DisconnectionReason_DisconnectionReason_MAX;
  static const int DisconnectionReason_ARRAYSIZE =
    DeviceDisconnected_DisconnectionReason_DisconnectionReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DisconnectionReason_descriptor() {
    return DeviceDisconnected_DisconnectionReason_descriptor();
  }
  static inline const ::std::string& DisconnectionReason_Name(DisconnectionReason value) {
    return DeviceDisconnected_DisconnectionReason_Name(value);
  }
  static inline bool DisconnectionReason_Parse(const ::std::string& name,
      DisconnectionReason* value) {
    return DeviceDisconnected_DisconnectionReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .NullSpaceIPC.DeviceDisconnected.DisconnectionReason reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason reason() const;
  void set_reason(::NullSpaceIPC::DeviceDisconnected_DisconnectionReason value);

  // @@protoc_insertion_point(class_scope:NullSpaceIPC.DeviceDisconnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int reason_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DeviceEvent_2eproto();
  friend void protobuf_AssignDesc_DeviceEvent_2eproto();
  friend void protobuf_ShutdownFile_DeviceEvent_2eproto();

  void InitAsDefaultInstance();
  static DeviceDisconnected* default_instance_;
};
// -------------------------------------------------------------------

class DeviceEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NullSpaceIPC.DeviceEvent) */ {
 public:
  DeviceEvent();
  virtual ~DeviceEvent();

  DeviceEvent(const DeviceEvent& from);

  inline DeviceEvent& operator=(const DeviceEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceEvent& default_instance();

  enum EventsCase {
    kConnectedEvent = 2,
    kDisconnectedEvent = 3,
    EVENTS_NOT_SET = 0,
  };

  void Swap(DeviceEvent* other);

  // implements Message ----------------------------------------------

  inline DeviceEvent* New() const { return New(NULL); }

  DeviceEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceEvent& from);
  void MergeFrom(const DeviceEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint32 device_id() const;
  void set_device_id(::google::protobuf::uint32 value);

  // optional .NullSpaceIPC.DeviceConnected connected_event = 2;
  bool has_connected_event() const;
  void clear_connected_event();
  static const int kConnectedEventFieldNumber = 2;
  const ::NullSpaceIPC::DeviceConnected& connected_event() const;
  ::NullSpaceIPC::DeviceConnected* mutable_connected_event();
  ::NullSpaceIPC::DeviceConnected* release_connected_event();
  void set_allocated_connected_event(::NullSpaceIPC::DeviceConnected* connected_event);

  // optional .NullSpaceIPC.DeviceDisconnected disconnected_event = 3;
  bool has_disconnected_event() const;
  void clear_disconnected_event();
  static const int kDisconnectedEventFieldNumber = 3;
  const ::NullSpaceIPC::DeviceDisconnected& disconnected_event() const;
  ::NullSpaceIPC::DeviceDisconnected* mutable_disconnected_event();
  ::NullSpaceIPC::DeviceDisconnected* release_disconnected_event();
  void set_allocated_disconnected_event(::NullSpaceIPC::DeviceDisconnected* disconnected_event);

  EventsCase events_case() const;
  // @@protoc_insertion_point(class_scope:NullSpaceIPC.DeviceEvent)
 private:
  inline void set_has_connected_event();
  inline void set_has_disconnected_event();

  inline bool has_events() const;
  void clear_events();
  inline void clear_has_events();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 device_id_;
  union EventsUnion {
    EventsUnion() {}
    ::NullSpaceIPC::DeviceConnected* connected_event_;
    ::NullSpaceIPC::DeviceDisconnected* disconnected_event_;
  } events_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_DeviceEvent_2eproto();
  friend void protobuf_AssignDesc_DeviceEvent_2eproto();
  friend void protobuf_ShutdownFile_DeviceEvent_2eproto();

  void InitAsDefaultInstance();
  static DeviceEvent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceConnected

// optional string product_name = 2;
inline void DeviceConnected::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceConnected::product_name() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.product_name)
  return product_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConnected::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.product_name)
}
inline void DeviceConnected::set_product_name(const char* value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.DeviceConnected.product_name)
}
inline void DeviceConnected::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.DeviceConnected.product_name)
}
inline ::std::string* DeviceConnected::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.DeviceConnected.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceConnected::release_product_name() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.DeviceConnected.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConnected::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.DeviceConnected.product_name)
}

// optional uint32 firmware_major = 3;
inline void DeviceConnected::clear_firmware_major() {
  firmware_major_ = 0u;
}
inline ::google::protobuf::uint32 DeviceConnected::firmware_major() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.firmware_major)
  return firmware_major_;
}
inline void DeviceConnected::set_firmware_major(::google::protobuf::uint32 value) {
  
  firmware_major_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.firmware_major)
}

// optional uint32 firmware_minor = 4;
inline void DeviceConnected::clear_firmware_minor() {
  firmware_minor_ = 0u;
}
inline ::google::protobuf::uint32 DeviceConnected::firmware_minor() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.firmware_minor)
  return firmware_minor_;
}
inline void DeviceConnected::set_firmware_minor(::google::protobuf::uint32 value) {
  
  firmware_minor_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.firmware_minor)
}

// optional uint32 firmware_patch = 5;
inline void DeviceConnected::clear_firmware_patch() {
  firmware_patch_ = 0u;
}
inline ::google::protobuf::uint32 DeviceConnected::firmware_patch() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.firmware_patch)
  return firmware_patch_;
}
inline void DeviceConnected::set_firmware_patch(::google::protobuf::uint32 value) {
  
  firmware_patch_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.firmware_patch)
}

// -------------------------------------------------------------------

// DeviceDisconnected

// optional .NullSpaceIPC.DeviceDisconnected.DisconnectionReason reason = 1;
inline void DeviceDisconnected::clear_reason() {
  reason_ = 0;
}
inline ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason DeviceDisconnected::reason() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceDisconnected.reason)
  return static_cast< ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason >(reason_);
}
inline void DeviceDisconnected::set_reason(::NullSpaceIPC::DeviceDisconnected_DisconnectionReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceDisconnected.reason)
}

// -------------------------------------------------------------------

// DeviceEvent

// optional uint32 device_id = 1;
inline void DeviceEvent::clear_device_id() {
  device_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceEvent::device_id() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceEvent.device_id)
  return device_id_;
}
inline void DeviceEvent::set_device_id(::google::protobuf::uint32 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceEvent.device_id)
}

// optional .NullSpaceIPC.DeviceConnected connected_event = 2;
inline bool DeviceEvent::has_connected_event() const {
  return events_case() == kConnectedEvent;
}
inline void DeviceEvent::set_has_connected_event() {
  _oneof_case_[0] = kConnectedEvent;
}
inline void DeviceEvent::clear_connected_event() {
  if (has_connected_event()) {
    delete events_.connected_event_;
    clear_has_events();
  }
}
inline  const ::NullSpaceIPC::DeviceConnected& DeviceEvent::connected_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceEvent.connected_event)
  return has_connected_event()
      ? *events_.connected_event_
      : ::NullSpaceIPC::DeviceConnected::default_instance();
}
inline ::NullSpaceIPC::DeviceConnected* DeviceEvent::mutable_connected_event() {
  if (!has_connected_event()) {
    clear_events();
    set_has_connected_event();
    events_.connected_event_ = new ::NullSpaceIPC::DeviceConnected;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.DeviceEvent.connected_event)
  return events_.connected_event_;
}
inline ::NullSpaceIPC::DeviceConnected* DeviceEvent::release_connected_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.DeviceEvent.connected_event)
  if (has_connected_event()) {
    clear_has_events();
    ::NullSpaceIPC::DeviceConnected* temp = events_.connected_event_;
    events_.connected_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DeviceEvent::set_allocated_connected_event(::NullSpaceIPC::DeviceConnected* connected_event) {
  clear_events();
  if (connected_event) {
    set_has_connected_event();
    events_.connected_event_ = connected_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.DeviceEvent.connected_event)
}

// optional .NullSpaceIPC.DeviceDisconnected disconnected_event = 3;
inline bool DeviceEvent::has_disconnected_event() const {
  return events_case() == kDisconnectedEvent;
}
inline void DeviceEvent::set_has_disconnected_event() {
  _oneof_case_[0] = kDisconnectedEvent;
}
inline void DeviceEvent::clear_disconnected_event() {
  if (has_disconnected_event()) {
    delete events_.disconnected_event_;
    clear_has_events();
  }
}
inline  const ::NullSpaceIPC::DeviceDisconnected& DeviceEvent::disconnected_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceEvent.disconnected_event)
  return has_disconnected_event()
      ? *events_.disconnected_event_
      : ::NullSpaceIPC::DeviceDisconnected::default_instance();
}
inline ::NullSpaceIPC::DeviceDisconnected* DeviceEvent::mutable_disconnected_event() {
  if (!has_disconnected_event()) {
    clear_events();
    set_has_disconnected_event();
    events_.disconnected_event_ = new ::NullSpaceIPC::DeviceDisconnected;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.DeviceEvent.disconnected_event)
  return events_.disconnected_event_;
}
inline ::NullSpaceIPC::DeviceDisconnected* DeviceEvent::release_disconnected_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.DeviceEvent.disconnected_event)
  if (has_disconnected_event()) {
    clear_has_events();
    ::NullSpaceIPC::DeviceDisconnected* temp = events_.disconnected_event_;
    events_.disconnected_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DeviceEvent::set_allocated_disconnected_event(::NullSpaceIPC::DeviceDisconnected* disconnected_event) {
  clear_events();
  if (disconnected_event) {
    set_has_disconnected_event();
    events_.disconnected_event_ = disconnected_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.DeviceEvent.disconnected_event)
}

inline bool DeviceEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
inline void DeviceEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
inline DeviceEvent::EventsCase DeviceEvent::events_case() const {
  return DeviceEvent::EventsCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason>() {
  return ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceEvent_2eproto__INCLUDED
