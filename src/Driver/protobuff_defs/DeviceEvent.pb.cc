// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DeviceEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

namespace {

const ::google::protobuf::Descriptor* DeviceConnected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceConnected_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceDisconnected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceDisconnected_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceDisconnected_DisconnectionReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeviceEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceEvent_reflection_ = NULL;
struct DeviceEventOneofInstance {
  const ::NullSpaceIPC::DeviceConnected* connected_event_;
  const ::NullSpaceIPC::DeviceDisconnected* disconnected_event_;
}* DeviceEvent_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_DeviceEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_DeviceEvent_2eproto() {
  protobuf_AddDesc_DeviceEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DeviceEvent.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceConnected_descriptor_ = file->message_type(0);
  static const int DeviceConnected_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnected, product_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnected, firmware_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnected, firmware_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnected, firmware_patch_),
  };
  DeviceConnected_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceConnected_descriptor_,
      DeviceConnected::default_instance_,
      DeviceConnected_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceConnected),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnected, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnected, _is_default_instance_));
  DeviceDisconnected_descriptor_ = file->message_type(1);
  static const int DeviceDisconnected_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDisconnected, reason_),
  };
  DeviceDisconnected_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceDisconnected_descriptor_,
      DeviceDisconnected::default_instance_,
      DeviceDisconnected_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceDisconnected),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDisconnected, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDisconnected, _is_default_instance_));
  DeviceDisconnected_DisconnectionReason_descriptor_ = DeviceDisconnected_descriptor_->enum_type(0);
  DeviceEvent_descriptor_ = file->message_type(2);
  static const int DeviceEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceEvent, device_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DeviceEvent_default_oneof_instance_, connected_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DeviceEvent_default_oneof_instance_, disconnected_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceEvent, events_),
  };
  DeviceEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceEvent_descriptor_,
      DeviceEvent::default_instance_,
      DeviceEvent_offsets_,
      -1,
      -1,
      -1,
      DeviceEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceEvent, _oneof_case_[0]),
      sizeof(DeviceEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceEvent, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DeviceEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceConnected_descriptor_, &DeviceConnected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceDisconnected_descriptor_, &DeviceDisconnected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceEvent_descriptor_, &DeviceEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DeviceEvent_2eproto() {
  delete DeviceConnected::default_instance_;
  delete DeviceConnected_reflection_;
  delete DeviceDisconnected::default_instance_;
  delete DeviceDisconnected_reflection_;
  delete DeviceEvent::default_instance_;
  delete DeviceEvent_default_oneof_instance_;
  delete DeviceEvent_reflection_;
}

void protobuf_AddDesc_DeviceEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_DeviceEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DeviceEvent.proto\022\014NullSpaceIPC\"o\n\017Dev"
    "iceConnected\022\024\n\014product_name\030\002 \001(\t\022\026\n\016fi"
    "rmware_major\030\003 \001(\r\022\026\n\016firmware_minor\030\004 \001"
    "(\r\022\026\n\016firmware_patch\030\005 \001(\r\"\230\001\n\022DeviceDis"
    "connected\022D\n\006reason\030\001 \001(\01624.NullSpaceIPC"
    ".DeviceDisconnected.DisconnectionReason\""
    "<\n\023DisconnectionReason\022\013\n\007UNKNOWN\020\000\022\r\n\tU"
    "NPLUGGED\020\001\022\t\n\005CRASH\020\002\"\244\001\n\013DeviceEvent\022\021\n"
    "\tdevice_id\030\001 \001(\r\0228\n\017connected_event\030\002 \001("
    "\0132\035.NullSpaceIPC.DeviceConnectedH\000\022>\n\022di"
    "sconnected_event\030\003 \001(\0132 .NullSpaceIPC.De"
    "viceDisconnectedH\000B\010\n\006eventsb\006proto3", 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DeviceEvent.proto", &protobuf_RegisterTypes);
  DeviceConnected::default_instance_ = new DeviceConnected();
  DeviceDisconnected::default_instance_ = new DeviceDisconnected();
  DeviceEvent::default_instance_ = new DeviceEvent();
  DeviceEvent_default_oneof_instance_ = new DeviceEventOneofInstance();
  DeviceConnected::default_instance_->InitAsDefaultInstance();
  DeviceDisconnected::default_instance_->InitAsDefaultInstance();
  DeviceEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DeviceEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DeviceEvent_2eproto {
  StaticDescriptorInitializer_DeviceEvent_2eproto() {
    protobuf_AddDesc_DeviceEvent_2eproto();
  }
} static_descriptor_initializer_DeviceEvent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceConnected::kProductNameFieldNumber;
const int DeviceConnected::kFirmwareMajorFieldNumber;
const int DeviceConnected::kFirmwareMinorFieldNumber;
const int DeviceConnected::kFirmwarePatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceConnected::DeviceConnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.DeviceConnected)
}

void DeviceConnected::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceConnected::DeviceConnected(const DeviceConnected& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.DeviceConnected)
}

void DeviceConnected::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_major_ = 0u;
  firmware_minor_ = 0u;
  firmware_patch_ = 0u;
}

DeviceConnected::~DeviceConnected() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.DeviceConnected)
  SharedDtor();
}

void DeviceConnected::SharedDtor() {
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeviceConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceConnected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceConnected_descriptor_;
}

const DeviceConnected& DeviceConnected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceEvent_2eproto();
  return *default_instance_;
}

DeviceConnected* DeviceConnected::default_instance_ = NULL;

DeviceConnected* DeviceConnected::New(::google::protobuf::Arena* arena) const {
  DeviceConnected* n = new DeviceConnected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.DeviceConnected)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceConnected, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceConnected*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(firmware_major_, firmware_patch_);
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DeviceConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.DeviceConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product_name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), this->product_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NullSpaceIPC.DeviceConnected.product_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_firmware_major;
        break;
      }

      // optional uint32 firmware_major = 3;
      case 3: {
        if (tag == 24) {
         parse_firmware_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firmware_major_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_firmware_minor;
        break;
      }

      // optional uint32 firmware_minor = 4;
      case 4: {
        if (tag == 32) {
         parse_firmware_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firmware_minor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_firmware_patch;
        break;
      }

      // optional uint32 firmware_patch = 5;
      case 5: {
        if (tag == 40) {
         parse_firmware_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firmware_patch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.DeviceConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.DeviceConnected)
  return false;
#undef DO_
}

void DeviceConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.DeviceConnected)
  // optional string product_name = 2;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NullSpaceIPC.DeviceConnected.product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_name(), output);
  }

  // optional uint32 firmware_major = 3;
  if (this->firmware_major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->firmware_major(), output);
  }

  // optional uint32 firmware_minor = 4;
  if (this->firmware_minor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->firmware_minor(), output);
  }

  // optional uint32 firmware_patch = 5;
  if (this->firmware_patch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->firmware_patch(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.DeviceConnected)
}

::google::protobuf::uint8* DeviceConnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.DeviceConnected)
  // optional string product_name = 2;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NullSpaceIPC.DeviceConnected.product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product_name(), target);
  }

  // optional uint32 firmware_major = 3;
  if (this->firmware_major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->firmware_major(), target);
  }

  // optional uint32 firmware_minor = 4;
  if (this->firmware_minor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->firmware_minor(), target);
  }

  // optional uint32 firmware_patch = 5;
  if (this->firmware_patch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->firmware_patch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.DeviceConnected)
  return target;
}

int DeviceConnected::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.DeviceConnected)
  int total_size = 0;

  // optional string product_name = 2;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  // optional uint32 firmware_major = 3;
  if (this->firmware_major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firmware_major());
  }

  // optional uint32 firmware_minor = 4;
  if (this->firmware_minor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firmware_minor());
  }

  // optional uint32 firmware_patch = 5;
  if (this->firmware_patch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firmware_patch());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.DeviceConnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceConnected* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceConnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.DeviceConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.DeviceConnected)
    MergeFrom(*source);
  }
}

void DeviceConnected::MergeFrom(const DeviceConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.DeviceConnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.firmware_major() != 0) {
    set_firmware_major(from.firmware_major());
  }
  if (from.firmware_minor() != 0) {
    set_firmware_minor(from.firmware_minor());
  }
  if (from.firmware_patch() != 0) {
    set_firmware_patch(from.firmware_patch());
  }
}

void DeviceConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.DeviceConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConnected::CopyFrom(const DeviceConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.DeviceConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConnected::IsInitialized() const {

  return true;
}

void DeviceConnected::Swap(DeviceConnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceConnected::InternalSwap(DeviceConnected* other) {
  product_name_.Swap(&other->product_name_);
  std::swap(firmware_major_, other->firmware_major_);
  std::swap(firmware_minor_, other->firmware_minor_);
  std::swap(firmware_patch_, other->firmware_patch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceConnected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceConnected_descriptor_;
  metadata.reflection = DeviceConnected_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceConnected

// optional string product_name = 2;
void DeviceConnected::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceConnected::product_name() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.product_name)
  return product_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceConnected::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.product_name)
}
 void DeviceConnected::set_product_name(const char* value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.DeviceConnected.product_name)
}
 void DeviceConnected::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.DeviceConnected.product_name)
}
 ::std::string* DeviceConnected::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.DeviceConnected.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceConnected::release_product_name() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.DeviceConnected.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceConnected::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.DeviceConnected.product_name)
}

// optional uint32 firmware_major = 3;
void DeviceConnected::clear_firmware_major() {
  firmware_major_ = 0u;
}
 ::google::protobuf::uint32 DeviceConnected::firmware_major() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.firmware_major)
  return firmware_major_;
}
 void DeviceConnected::set_firmware_major(::google::protobuf::uint32 value) {
  
  firmware_major_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.firmware_major)
}

// optional uint32 firmware_minor = 4;
void DeviceConnected::clear_firmware_minor() {
  firmware_minor_ = 0u;
}
 ::google::protobuf::uint32 DeviceConnected::firmware_minor() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.firmware_minor)
  return firmware_minor_;
}
 void DeviceConnected::set_firmware_minor(::google::protobuf::uint32 value) {
  
  firmware_minor_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.firmware_minor)
}

// optional uint32 firmware_patch = 5;
void DeviceConnected::clear_firmware_patch() {
  firmware_patch_ = 0u;
}
 ::google::protobuf::uint32 DeviceConnected::firmware_patch() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceConnected.firmware_patch)
  return firmware_patch_;
}
 void DeviceConnected::set_firmware_patch(::google::protobuf::uint32 value) {
  
  firmware_patch_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceConnected.firmware_patch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DeviceDisconnected_DisconnectionReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceDisconnected_DisconnectionReason_descriptor_;
}
bool DeviceDisconnected_DisconnectionReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceDisconnected_DisconnectionReason DeviceDisconnected::UNKNOWN;
const DeviceDisconnected_DisconnectionReason DeviceDisconnected::UNPLUGGED;
const DeviceDisconnected_DisconnectionReason DeviceDisconnected::CRASH;
const DeviceDisconnected_DisconnectionReason DeviceDisconnected::DisconnectionReason_MIN;
const DeviceDisconnected_DisconnectionReason DeviceDisconnected::DisconnectionReason_MAX;
const int DeviceDisconnected::DisconnectionReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceDisconnected::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceDisconnected::DeviceDisconnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.DeviceDisconnected)
}

void DeviceDisconnected::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceDisconnected::DeviceDisconnected(const DeviceDisconnected& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.DeviceDisconnected)
}

void DeviceDisconnected::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reason_ = 0;
}

DeviceDisconnected::~DeviceDisconnected() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.DeviceDisconnected)
  SharedDtor();
}

void DeviceDisconnected::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceDisconnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceDisconnected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceDisconnected_descriptor_;
}

const DeviceDisconnected& DeviceDisconnected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceEvent_2eproto();
  return *default_instance_;
}

DeviceDisconnected* DeviceDisconnected::default_instance_ = NULL;

DeviceDisconnected* DeviceDisconnected::New(::google::protobuf::Arena* arena) const {
  DeviceDisconnected* n = new DeviceDisconnected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.DeviceDisconnected)
  reason_ = 0;
}

bool DeviceDisconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.DeviceDisconnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.DeviceDisconnected.DisconnectionReason reason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.DeviceDisconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.DeviceDisconnected)
  return false;
#undef DO_
}

void DeviceDisconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.DeviceDisconnected)
  // optional .NullSpaceIPC.DeviceDisconnected.DisconnectionReason reason = 1;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.DeviceDisconnected)
}

::google::protobuf::uint8* DeviceDisconnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.DeviceDisconnected)
  // optional .NullSpaceIPC.DeviceDisconnected.DisconnectionReason reason = 1;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.DeviceDisconnected)
  return target;
}

int DeviceDisconnected::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.DeviceDisconnected)
  int total_size = 0;

  // optional .NullSpaceIPC.DeviceDisconnected.DisconnectionReason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceDisconnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.DeviceDisconnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceDisconnected* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceDisconnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.DeviceDisconnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.DeviceDisconnected)
    MergeFrom(*source);
  }
}

void DeviceDisconnected::MergeFrom(const DeviceDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.DeviceDisconnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void DeviceDisconnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.DeviceDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDisconnected::CopyFrom(const DeviceDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.DeviceDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDisconnected::IsInitialized() const {

  return true;
}

void DeviceDisconnected::Swap(DeviceDisconnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceDisconnected::InternalSwap(DeviceDisconnected* other) {
  std::swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceDisconnected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceDisconnected_descriptor_;
  metadata.reflection = DeviceDisconnected_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceDisconnected

// optional .NullSpaceIPC.DeviceDisconnected.DisconnectionReason reason = 1;
void DeviceDisconnected::clear_reason() {
  reason_ = 0;
}
 ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason DeviceDisconnected::reason() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceDisconnected.reason)
  return static_cast< ::NullSpaceIPC::DeviceDisconnected_DisconnectionReason >(reason_);
}
 void DeviceDisconnected::set_reason(::NullSpaceIPC::DeviceDisconnected_DisconnectionReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceDisconnected.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceEvent::kDeviceIdFieldNumber;
const int DeviceEvent::kConnectedEventFieldNumber;
const int DeviceEvent::kDisconnectedEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceEvent::DeviceEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.DeviceEvent)
}

void DeviceEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  DeviceEvent_default_oneof_instance_->connected_event_ = const_cast< ::NullSpaceIPC::DeviceConnected*>(&::NullSpaceIPC::DeviceConnected::default_instance());
  DeviceEvent_default_oneof_instance_->disconnected_event_ = const_cast< ::NullSpaceIPC::DeviceDisconnected*>(&::NullSpaceIPC::DeviceDisconnected::default_instance());
}

DeviceEvent::DeviceEvent(const DeviceEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.DeviceEvent)
}

void DeviceEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  device_id_ = 0u;
  clear_has_events();
}

DeviceEvent::~DeviceEvent() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.DeviceEvent)
  SharedDtor();
}

void DeviceEvent::SharedDtor() {
  if (has_events()) {
    clear_events();
  }
  if (this != default_instance_) {
  }
}

void DeviceEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceEvent_descriptor_;
}

const DeviceEvent& DeviceEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceEvent_2eproto();
  return *default_instance_;
}

DeviceEvent* DeviceEvent::default_instance_ = NULL;

DeviceEvent* DeviceEvent::New(::google::protobuf::Arena* arena) const {
  DeviceEvent* n = new DeviceEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceEvent::clear_events() {
// @@protoc_insertion_point(one_of_clear_start:NullSpaceIPC.DeviceEvent)
  switch(events_case()) {
    case kConnectedEvent: {
      delete events_.connected_event_;
      break;
    }
    case kDisconnectedEvent: {
      delete events_.disconnected_event_;
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENTS_NOT_SET;
}


void DeviceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.DeviceEvent)
  device_id_ = 0u;
  clear_events();
}

bool DeviceEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.DeviceEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_connected_event;
        break;
      }

      // optional .NullSpaceIPC.DeviceConnected connected_event = 2;
      case 2: {
        if (tag == 18) {
         parse_connected_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connected_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_disconnected_event;
        break;
      }

      // optional .NullSpaceIPC.DeviceDisconnected disconnected_event = 3;
      case 3: {
        if (tag == 26) {
         parse_disconnected_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disconnected_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.DeviceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.DeviceEvent)
  return false;
#undef DO_
}

void DeviceEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.DeviceEvent)
  // optional uint32 device_id = 1;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device_id(), output);
  }

  // optional .NullSpaceIPC.DeviceConnected connected_event = 2;
  if (has_connected_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *events_.connected_event_, output);
  }

  // optional .NullSpaceIPC.DeviceDisconnected disconnected_event = 3;
  if (has_disconnected_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *events_.disconnected_event_, output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.DeviceEvent)
}

::google::protobuf::uint8* DeviceEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.DeviceEvent)
  // optional uint32 device_id = 1;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device_id(), target);
  }

  // optional .NullSpaceIPC.DeviceConnected connected_event = 2;
  if (has_connected_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *events_.connected_event_, false, target);
  }

  // optional .NullSpaceIPC.DeviceDisconnected disconnected_event = 3;
  if (has_disconnected_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *events_.disconnected_event_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.DeviceEvent)
  return target;
}

int DeviceEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.DeviceEvent)
  int total_size = 0;

  // optional uint32 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_id());
  }

  switch (events_case()) {
    // optional .NullSpaceIPC.DeviceConnected connected_event = 2;
    case kConnectedEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.connected_event_);
      break;
    }
    // optional .NullSpaceIPC.DeviceDisconnected disconnected_event = 3;
    case kDisconnectedEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *events_.disconnected_event_);
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.DeviceEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.DeviceEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.DeviceEvent)
    MergeFrom(*source);
  }
}

void DeviceEvent::MergeFrom(const DeviceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.DeviceEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.events_case()) {
    case kConnectedEvent: {
      mutable_connected_event()->::NullSpaceIPC::DeviceConnected::MergeFrom(from.connected_event());
      break;
    }
    case kDisconnectedEvent: {
      mutable_disconnected_event()->::NullSpaceIPC::DeviceDisconnected::MergeFrom(from.disconnected_event());
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void DeviceEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.DeviceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceEvent::CopyFrom(const DeviceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.DeviceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEvent::IsInitialized() const {

  return true;
}

void DeviceEvent::Swap(DeviceEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceEvent::InternalSwap(DeviceEvent* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(events_, other->events_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceEvent_descriptor_;
  metadata.reflection = DeviceEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceEvent

// optional uint32 device_id = 1;
void DeviceEvent::clear_device_id() {
  device_id_ = 0u;
}
 ::google::protobuf::uint32 DeviceEvent::device_id() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceEvent.device_id)
  return device_id_;
}
 void DeviceEvent::set_device_id(::google::protobuf::uint32 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DeviceEvent.device_id)
}

// optional .NullSpaceIPC.DeviceConnected connected_event = 2;
bool DeviceEvent::has_connected_event() const {
  return events_case() == kConnectedEvent;
}
void DeviceEvent::set_has_connected_event() {
  _oneof_case_[0] = kConnectedEvent;
}
void DeviceEvent::clear_connected_event() {
  if (has_connected_event()) {
    delete events_.connected_event_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::DeviceConnected& DeviceEvent::connected_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceEvent.connected_event)
  return has_connected_event()
      ? *events_.connected_event_
      : ::NullSpaceIPC::DeviceConnected::default_instance();
}
::NullSpaceIPC::DeviceConnected* DeviceEvent::mutable_connected_event() {
  if (!has_connected_event()) {
    clear_events();
    set_has_connected_event();
    events_.connected_event_ = new ::NullSpaceIPC::DeviceConnected;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.DeviceEvent.connected_event)
  return events_.connected_event_;
}
::NullSpaceIPC::DeviceConnected* DeviceEvent::release_connected_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.DeviceEvent.connected_event)
  if (has_connected_event()) {
    clear_has_events();
    ::NullSpaceIPC::DeviceConnected* temp = events_.connected_event_;
    events_.connected_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DeviceEvent::set_allocated_connected_event(::NullSpaceIPC::DeviceConnected* connected_event) {
  clear_events();
  if (connected_event) {
    set_has_connected_event();
    events_.connected_event_ = connected_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.DeviceEvent.connected_event)
}

// optional .NullSpaceIPC.DeviceDisconnected disconnected_event = 3;
bool DeviceEvent::has_disconnected_event() const {
  return events_case() == kDisconnectedEvent;
}
void DeviceEvent::set_has_disconnected_event() {
  _oneof_case_[0] = kDisconnectedEvent;
}
void DeviceEvent::clear_disconnected_event() {
  if (has_disconnected_event()) {
    delete events_.disconnected_event_;
    clear_has_events();
  }
}
 const ::NullSpaceIPC::DeviceDisconnected& DeviceEvent::disconnected_event() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DeviceEvent.disconnected_event)
  return has_disconnected_event()
      ? *events_.disconnected_event_
      : ::NullSpaceIPC::DeviceDisconnected::default_instance();
}
::NullSpaceIPC::DeviceDisconnected* DeviceEvent::mutable_disconnected_event() {
  if (!has_disconnected_event()) {
    clear_events();
    set_has_disconnected_event();
    events_.disconnected_event_ = new ::NullSpaceIPC::DeviceDisconnected;
  }
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.DeviceEvent.disconnected_event)
  return events_.disconnected_event_;
}
::NullSpaceIPC::DeviceDisconnected* DeviceEvent::release_disconnected_event() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.DeviceEvent.disconnected_event)
  if (has_disconnected_event()) {
    clear_has_events();
    ::NullSpaceIPC::DeviceDisconnected* temp = events_.disconnected_event_;
    events_.disconnected_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DeviceEvent::set_allocated_disconnected_event(::NullSpaceIPC::DeviceDisconnected* disconnected_event) {
  clear_events();
  if (disconnected_event) {
    set_has_disconnected_event();
    events_.disconnected_event_ = disconnected_event;
  }
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.DeviceEvent.disconnected_event)
}

bool DeviceEvent::has_events() const {
  return events_case() != EVENTS_NOT_SET;
}
void DeviceEvent::clear_has_events() {
  _oneof_case_[0] = EVENTS_NOT_SET;
}
DeviceEvent::EventsCase DeviceEvent::events_case() const {
  return DeviceEvent::EventsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

// @@protoc_insertion_point(global_scope)
