// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SUITSTATUSUPDATE_NULLSPACE_COMMUNICATION_H_
#define FLATBUFFERS_GENERATED_SUITSTATUSUPDATE_NULLSPACE_COMMUNICATION_H_

#include "flatbuffers/flatbuffers.h"

namespace NullSpace {
namespace Communication {

struct SuitStatusUpdate;
struct SuitStatusUpdateT;

enum SuitStatus {
  SuitStatus_Disconnected = 0,
  SuitStatus_Unresponsive = 1,
  SuitStatus_Connected = 2,
  SuitStatus_MIN = SuitStatus_Disconnected,
  SuitStatus_MAX = SuitStatus_Connected
};

inline const char **EnumNamesSuitStatus() {
  static const char *names[] = { "Disconnected", "Unresponsive", "Connected", nullptr };
  return names;
}

inline const char *EnumNameSuitStatus(SuitStatus e) { return EnumNamesSuitStatus()[static_cast<int>(e)]; }

struct SuitStatusUpdateT : public flatbuffers::NativeTable {
  SuitStatus status;
};

struct SuitStatusUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STATUS = 4
  };
  SuitStatus status() const { return static_cast<SuitStatus>(GetField<int16_t>(VT_STATUS, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
  SuitStatusUpdateT *UnPack(const flatbuffers::resolver_function_t *resolver = nullptr) const;
};

struct SuitStatusUpdateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(SuitStatus status) { fbb_.AddElement<int16_t>(SuitStatusUpdate::VT_STATUS, static_cast<int16_t>(status), 0); }
  SuitStatusUpdateBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SuitStatusUpdateBuilder &operator=(const SuitStatusUpdateBuilder &);
  flatbuffers::Offset<SuitStatusUpdate> Finish() {
    auto o = flatbuffers::Offset<SuitStatusUpdate>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SuitStatusUpdate> CreateSuitStatusUpdate(flatbuffers::FlatBufferBuilder &_fbb,
    SuitStatus status = SuitStatus_Disconnected) {
  SuitStatusUpdateBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<SuitStatusUpdate> CreateSuitStatusUpdate(flatbuffers::FlatBufferBuilder &_fbb, const SuitStatusUpdateT *_o, const flatbuffers::rehasher_function_t *rehasher = nullptr);

inline SuitStatusUpdateT *SuitStatusUpdate::UnPack(const flatbuffers::resolver_function_t *resolver) const {
  (void)resolver;
  auto _o = new SuitStatusUpdateT();
  { auto _e = status(); _o->status = _e; };
  return _o;
}

inline flatbuffers::Offset<SuitStatusUpdate> CreateSuitStatusUpdate(flatbuffers::FlatBufferBuilder &_fbb, const SuitStatusUpdateT *_o, const flatbuffers::rehasher_function_t *rehasher) {
  (void)rehasher;
  return CreateSuitStatusUpdate(_fbb,
    _o->status);
}

inline const NullSpace::Communication::SuitStatusUpdate *GetSuitStatusUpdate(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::Communication::SuitStatusUpdate>(buf);
}

inline bool VerifySuitStatusUpdateBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::Communication::SuitStatusUpdate>(nullptr);
}

inline void FinishSuitStatusUpdateBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::Communication::SuitStatusUpdate> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<SuitStatusUpdateT> UnPackSuitStatusUpdate(const void *buf, const flatbuffers::resolver_function_t *resolver = nullptr) {
  return std::unique_ptr<SuitStatusUpdateT>(GetSuitStatusUpdate(buf)->UnPack(resolver));
}

}  // namespace Communication
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_SUITSTATUSUPDATE_NULLSPACE_COMMUNICATION_H_
