// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MIXEDSEQUENCE_NULLSPACE_HAPTICFILES_MIXED_H_
#define FLATBUFFERS_GENERATED_MIXEDSEQUENCE_NULLSPACE_HAPTICFILES_MIXED_H_

#include "flatbuffers/flatbuffers.h"

#include "HapticEffect_generated.h"

namespace NullSpace {
namespace HapticFiles {
namespace Mixed {

struct ListOfHapticEffects;
struct ListOfHapticEffectsT;

struct SeqRef;
struct SeqRefT;

struct Sequence;
struct SequenceT;

enum EffectValuesOrNameReference {
  EffectValuesOrNameReference_NONE = 0,
  EffectValuesOrNameReference_ListOfHapticEffects = 1,
  EffectValuesOrNameReference_SeqRef = 2,
  EffectValuesOrNameReference_MIN = EffectValuesOrNameReference_NONE,
  EffectValuesOrNameReference_MAX = EffectValuesOrNameReference_SeqRef
};

struct EffectValuesOrNameReferenceUnion {
  EffectValuesOrNameReference type;

  flatbuffers::NativeTable *table;
  EffectValuesOrNameReferenceUnion() : type(EffectValuesOrNameReference_NONE), table(nullptr) {}
  EffectValuesOrNameReferenceUnion(const EffectValuesOrNameReferenceUnion &);
  EffectValuesOrNameReferenceUnion &operator=(const EffectValuesOrNameReferenceUnion &);
  ~EffectValuesOrNameReferenceUnion();

  static flatbuffers::NativeTable *UnPack(const void *union_obj, EffectValuesOrNameReference type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *rehasher = nullptr) const;

  ListOfHapticEffectsT *AsListOfHapticEffects() { return type == EffectValuesOrNameReference_ListOfHapticEffects ? reinterpret_cast<ListOfHapticEffectsT *>(table) : nullptr; }
  SeqRefT *AsSeqRef() { return type == EffectValuesOrNameReference_SeqRef ? reinterpret_cast<SeqRefT *>(table) : nullptr; }
};

inline const char **EnumNamesEffectValuesOrNameReference() {
  static const char *names[] = { "NONE", "ListOfHapticEffects", "SeqRef", nullptr };
  return names;
}

inline const char *EnumNameEffectValuesOrNameReference(EffectValuesOrNameReference e) { return EnumNamesEffectValuesOrNameReference()[static_cast<int>(e)]; }

template<typename T> struct EffectValuesOrNameReferenceTraits {
  static const EffectValuesOrNameReference enum_value = EffectValuesOrNameReference_NONE;
};

template<> struct EffectValuesOrNameReferenceTraits<ListOfHapticEffects> {
  static const EffectValuesOrNameReference enum_value = EffectValuesOrNameReference_ListOfHapticEffects;
};

template<> struct EffectValuesOrNameReferenceTraits<SeqRef> {
  static const EffectValuesOrNameReference enum_value = EffectValuesOrNameReference_SeqRef;
};

inline bool VerifyEffectValuesOrNameReference(flatbuffers::Verifier &verifier, const void *union_obj, EffectValuesOrNameReference type);

struct ListOfHapticEffectsT : public flatbuffers::NativeTable {
  std::vector<std::unique_ptr<NullSpace::HapticFiles::HapticEffectT>> items;
};

struct ListOfHapticEffects FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ITEMS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::HapticEffect>> *items() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::HapticEffect>> *>(VT_ITEMS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ITEMS) &&
           verifier.Verify(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           verifier.EndTable();
  }
  ListOfHapticEffectsT *UnPack(const flatbuffers::resolver_function_t *resolver = nullptr) const;
};

struct ListOfHapticEffectsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::HapticEffect>>> items) { fbb_.AddOffset(ListOfHapticEffects::VT_ITEMS, items); }
  ListOfHapticEffectsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ListOfHapticEffectsBuilder &operator=(const ListOfHapticEffectsBuilder &);
  flatbuffers::Offset<ListOfHapticEffects> Finish() {
    auto o = flatbuffers::Offset<ListOfHapticEffects>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ListOfHapticEffects> CreateListOfHapticEffects(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::HapticEffect>>> items = 0) {
  ListOfHapticEffectsBuilder builder_(_fbb);
  builder_.add_items(items);
  return builder_.Finish();
}

inline flatbuffers::Offset<ListOfHapticEffects> CreateListOfHapticEffectsDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<NullSpace::HapticFiles::HapticEffect>> *items = nullptr) {
  return CreateListOfHapticEffects(_fbb, items ? _fbb.CreateVector<flatbuffers::Offset<NullSpace::HapticFiles::HapticEffect>>(*items) : 0);
}

inline flatbuffers::Offset<ListOfHapticEffects> CreateListOfHapticEffects(flatbuffers::FlatBufferBuilder &_fbb, const ListOfHapticEffectsT *_o, const flatbuffers::rehasher_function_t *rehasher = nullptr);

struct SeqRefT : public flatbuffers::NativeTable {
  std::string symbol;
};

struct SeqRef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SYMBOL = 4
  };
  const flatbuffers::String *symbol() const { return GetPointer<const flatbuffers::String *>(VT_SYMBOL); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SYMBOL) &&
           verifier.Verify(symbol()) &&
           verifier.EndTable();
  }
  SeqRefT *UnPack(const flatbuffers::resolver_function_t *resolver = nullptr) const;
};

struct SeqRefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_symbol(flatbuffers::Offset<flatbuffers::String> symbol) { fbb_.AddOffset(SeqRef::VT_SYMBOL, symbol); }
  SeqRefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SeqRefBuilder &operator=(const SeqRefBuilder &);
  flatbuffers::Offset<SeqRef> Finish() {
    auto o = flatbuffers::Offset<SeqRef>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SeqRef> CreateSeqRef(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> symbol = 0) {
  SeqRefBuilder builder_(_fbb);
  builder_.add_symbol(symbol);
  return builder_.Finish();
}

inline flatbuffers::Offset<SeqRef> CreateSeqRefDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *symbol = nullptr) {
  return CreateSeqRef(_fbb, symbol ? _fbb.CreateString(symbol) : 0);
}

inline flatbuffers::Offset<SeqRef> CreateSeqRef(flatbuffers::FlatBufferBuilder &_fbb, const SeqRefT *_o, const flatbuffers::rehasher_function_t *rehasher = nullptr);

struct SequenceT : public flatbuffers::NativeTable {
  uint32_t location;
  EffectValuesOrNameReferenceUnion effect;
};

struct Sequence FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LOCATION = 4,
    VT_EFFECT_TYPE = 6,
    VT_EFFECT = 8
  };
  uint32_t location() const { return GetField<uint32_t>(VT_LOCATION, 0); }
  EffectValuesOrNameReference effect_type() const { return static_cast<EffectValuesOrNameReference>(GetField<uint8_t>(VT_EFFECT_TYPE, 0)); }
  const void *effect() const { return GetPointer<const void *>(VT_EFFECT); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_LOCATION) &&
           VerifyField<uint8_t>(verifier, VT_EFFECT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EFFECT) &&
           VerifyEffectValuesOrNameReference(verifier, effect(), effect_type()) &&
           verifier.EndTable();
  }
  SequenceT *UnPack(const flatbuffers::resolver_function_t *resolver = nullptr) const;
};

struct SequenceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_location(uint32_t location) { fbb_.AddElement<uint32_t>(Sequence::VT_LOCATION, location, 0); }
  void add_effect_type(EffectValuesOrNameReference effect_type) { fbb_.AddElement<uint8_t>(Sequence::VT_EFFECT_TYPE, static_cast<uint8_t>(effect_type), 0); }
  void add_effect(flatbuffers::Offset<void> effect) { fbb_.AddOffset(Sequence::VT_EFFECT, effect); }
  SequenceBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SequenceBuilder &operator=(const SequenceBuilder &);
  flatbuffers::Offset<Sequence> Finish() {
    auto o = flatbuffers::Offset<Sequence>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Sequence> CreateSequence(flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t location = 0,
    EffectValuesOrNameReference effect_type = EffectValuesOrNameReference_NONE,
    flatbuffers::Offset<void> effect = 0) {
  SequenceBuilder builder_(_fbb);
  builder_.add_effect(effect);
  builder_.add_location(location);
  builder_.add_effect_type(effect_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Sequence> CreateSequence(flatbuffers::FlatBufferBuilder &_fbb, const SequenceT *_o, const flatbuffers::rehasher_function_t *rehasher = nullptr);

inline ListOfHapticEffectsT *ListOfHapticEffects::UnPack(const flatbuffers::resolver_function_t *resolver) const {
  (void)resolver;
  auto _o = new ListOfHapticEffectsT();
  { auto _e = items(); if (_e) { for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->items.push_back(std::unique_ptr<NullSpace::HapticFiles::HapticEffectT>(_e->Get(_i)->UnPack(resolver))); } } };
  return _o;
}

inline flatbuffers::Offset<ListOfHapticEffects> CreateListOfHapticEffects(flatbuffers::FlatBufferBuilder &_fbb, const ListOfHapticEffectsT *_o, const flatbuffers::rehasher_function_t *rehasher) {
  (void)rehasher;
  return CreateListOfHapticEffects(_fbb,
    _o->items.size() ? _fbb.CreateVector<flatbuffers::Offset<HapticEffect>>(_o->items.size(), [&](size_t i) { return CreateHapticEffect(_fbb, _o->items[i].get(), rehasher); }) : 0);
}

inline SeqRefT *SeqRef::UnPack(const flatbuffers::resolver_function_t *resolver) const {
  (void)resolver;
  auto _o = new SeqRefT();
  { auto _e = symbol(); if (_e) _o->symbol = _e->str(); };
  return _o;
}

inline flatbuffers::Offset<SeqRef> CreateSeqRef(flatbuffers::FlatBufferBuilder &_fbb, const SeqRefT *_o, const flatbuffers::rehasher_function_t *rehasher) {
  (void)rehasher;
  return CreateSeqRef(_fbb,
    _o->symbol.size() ? _fbb.CreateString(_o->symbol) : 0);
}

inline SequenceT *Sequence::UnPack(const flatbuffers::resolver_function_t *resolver) const {
  (void)resolver;
  auto _o = new SequenceT();
  { auto _e = location(); _o->location = _e; };
  { auto _e = effect_type(); _o->effect.type = _e; };
  { auto _e = effect(); if (_e) _o->effect.table = EffectValuesOrNameReferenceUnion::UnPack(_e, effect_type(), resolver); };
  return _o;
}

inline flatbuffers::Offset<Sequence> CreateSequence(flatbuffers::FlatBufferBuilder &_fbb, const SequenceT *_o, const flatbuffers::rehasher_function_t *rehasher) {
  (void)rehasher;
  return CreateSequence(_fbb,
    _o->location,
    _o->effect.type,
    _o->effect.Pack(_fbb));
}

inline bool VerifyEffectValuesOrNameReference(flatbuffers::Verifier &verifier, const void *union_obj, EffectValuesOrNameReference type) {
  switch (type) {
    case EffectValuesOrNameReference_NONE: return true;
    case EffectValuesOrNameReference_ListOfHapticEffects: return verifier.VerifyTable(reinterpret_cast<const ListOfHapticEffects *>(union_obj));
    case EffectValuesOrNameReference_SeqRef: return verifier.VerifyTable(reinterpret_cast<const SeqRef *>(union_obj));
    default: return false;
  }
}

inline flatbuffers::NativeTable *EffectValuesOrNameReferenceUnion::UnPack(const void *union_obj, EffectValuesOrNameReference type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case EffectValuesOrNameReference_NONE: return nullptr;
    case EffectValuesOrNameReference_ListOfHapticEffects: return reinterpret_cast<const ListOfHapticEffects *>(union_obj)->UnPack(resolver);
    case EffectValuesOrNameReference_SeqRef: return reinterpret_cast<const SeqRef *>(union_obj)->UnPack(resolver);
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> EffectValuesOrNameReferenceUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *rehasher) const {
  switch (type) {
    case EffectValuesOrNameReference_NONE: return 0;
    case EffectValuesOrNameReference_ListOfHapticEffects: return CreateListOfHapticEffects(_fbb, reinterpret_cast<const ListOfHapticEffectsT *>(table), rehasher).Union();
    case EffectValuesOrNameReference_SeqRef: return CreateSeqRef(_fbb, reinterpret_cast<const SeqRefT *>(table), rehasher).Union();
    default: return 0;
  }
}

inline EffectValuesOrNameReferenceUnion::~EffectValuesOrNameReferenceUnion() {
  switch (type) {
    case EffectValuesOrNameReference_ListOfHapticEffects: delete reinterpret_cast<ListOfHapticEffectsT *>(table); break;
    case EffectValuesOrNameReference_SeqRef: delete reinterpret_cast<SeqRefT *>(table); break;
    default:;
  }
}

inline const NullSpace::HapticFiles::Mixed::Sequence *GetSequence(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::HapticFiles::Mixed::Sequence>(buf);
}

inline bool VerifySequenceBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::HapticFiles::Mixed::Sequence>(nullptr);
}

inline void FinishSequenceBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::HapticFiles::Mixed::Sequence> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<SequenceT> UnPackSequence(const void *buf, const flatbuffers::resolver_function_t *resolver = nullptr) {
  return std::unique_ptr<SequenceT>(GetSequence(buf)->UnPack(resolver));
}

}  // namespace Mixed
}  // namespace HapticFiles
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_MIXEDSEQUENCE_NULLSPACE_HAPTICFILES_MIXED_H_
