// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TINYEFFECT_NULLSPACE_HAPTICFILES_H_
#define FLATBUFFERS_GENERATED_TINYEFFECT_NULLSPACE_HAPTICFILES_H_

#include "flatbuffers/flatbuffers.h"

namespace NullSpace {
namespace HapticFiles {

struct TinyEffect;

struct TinyEffect FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIME = 4,
    VT_STRENGTH = 6,
    VT_DURATION = 8,
    VT_AREA = 10,
    VT_EFFECT = 12
  };
  float time() const { return GetField<float>(VT_TIME, 0.0f); }
  float strength() const { return GetField<float>(VT_STRENGTH, 0.0f); }
  float duration() const { return GetField<float>(VT_DURATION, 0.0f); }
  uint32_t area() const { return GetField<uint32_t>(VT_AREA, 0); }
  uint8_t effect() const { return GetField<uint8_t>(VT_EFFECT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_TIME) &&
           VerifyField<float>(verifier, VT_STRENGTH) &&
           VerifyField<float>(verifier, VT_DURATION) &&
           VerifyField<uint32_t>(verifier, VT_AREA) &&
           VerifyField<uint8_t>(verifier, VT_EFFECT) &&
           verifier.EndTable();
  }
};

struct TinyEffectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(float time) { fbb_.AddElement<float>(TinyEffect::VT_TIME, time, 0.0f); }
  void add_strength(float strength) { fbb_.AddElement<float>(TinyEffect::VT_STRENGTH, strength, 0.0f); }
  void add_duration(float duration) { fbb_.AddElement<float>(TinyEffect::VT_DURATION, duration, 0.0f); }
  void add_area(uint32_t area) { fbb_.AddElement<uint32_t>(TinyEffect::VT_AREA, area, 0); }
  void add_effect(uint8_t effect) { fbb_.AddElement<uint8_t>(TinyEffect::VT_EFFECT, effect, 0); }
  TinyEffectBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TinyEffectBuilder &operator=(const TinyEffectBuilder &);
  flatbuffers::Offset<TinyEffect> Finish() {
    auto o = flatbuffers::Offset<TinyEffect>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<TinyEffect> CreateTinyEffect(flatbuffers::FlatBufferBuilder &_fbb,
    float time = 0.0f,
    float strength = 0.0f,
    float duration = 0.0f,
    uint32_t area = 0,
    uint8_t effect = 0) {
  TinyEffectBuilder builder_(_fbb);
  builder_.add_area(area);
  builder_.add_duration(duration);
  builder_.add_strength(strength);
  builder_.add_time(time);
  builder_.add_effect(effect);
  return builder_.Finish();
}

inline const NullSpace::HapticFiles::TinyEffect *GetTinyEffect(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::HapticFiles::TinyEffect>(buf);
}

inline bool VerifyTinyEffectBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::HapticFiles::TinyEffect>(nullptr);
}

inline void FinishTinyEffectBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::HapticFiles::TinyEffect> root) {
  fbb.Finish(root);
}

}  // namespace HapticFiles
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_TINYEFFECT_NULLSPACE_HAPTICFILES_H_
