// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DriverCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DriverCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NullSpaceIPC {

namespace {

const ::google::protobuf::Descriptor* DriverCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DriverCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* DriverCommand_ParamsEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DriverCommand_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DriverCommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_DriverCommand_2eproto() {
  protobuf_AddDesc_DriverCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DriverCommand.proto");
  GOOGLE_CHECK(file != NULL);
  DriverCommand_descriptor_ = file->message_type(0);
  static const int DriverCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverCommand, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverCommand, raw_command_),
  };
  DriverCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DriverCommand_descriptor_,
      DriverCommand::default_instance_,
      DriverCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(DriverCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverCommand, _is_default_instance_));
  DriverCommand_ParamsEntry_descriptor_ = DriverCommand_descriptor_->nested_type(0);
  DriverCommand_Command_descriptor_ = DriverCommand_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DriverCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DriverCommand_descriptor_, &DriverCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DriverCommand_ParamsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                DriverCommand_ParamsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_DriverCommand_2eproto() {
  delete DriverCommand::default_instance_;
  delete DriverCommand_reflection_;
}

void protobuf_AddDesc_DriverCommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_DriverCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023DriverCommand.proto\022\014NullSpaceIPC\"\273\002\n\r"
    "DriverCommand\0224\n\007command\030\001 \001(\0162#.NullSpa"
    "ceIPC.DriverCommand.Command\0227\n\006params\030\002 "
    "\003(\0132\'.NullSpaceIPC.DriverCommand.ParamsE"
    "ntry\022\023\n\013raw_command\030\003 \001(\014\032-\n\013ParamsEntry"
    "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"w\n\007Comm"
    "and\022\013\n\007UNKNOWN\020\000\022\023\n\017ENABLE_TRACKING\020\001\022\024\n"
    "\020DISABLE_TRACKING\020\002\022\020\n\014ENABLE_AUDIO\020\003\022\021\n"
    "\rDISABLE_AUDIO\020\004\022\017\n\013RAW_COMMAND\020\005b\006proto"
    "3", 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DriverCommand.proto", &protobuf_RegisterTypes);
  DriverCommand::default_instance_ = new DriverCommand();
  DriverCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DriverCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DriverCommand_2eproto {
  StaticDescriptorInitializer_DriverCommand_2eproto() {
    protobuf_AddDesc_DriverCommand_2eproto();
  }
} static_descriptor_initializer_DriverCommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DriverCommand_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverCommand_Command_descriptor_;
}
bool DriverCommand_Command_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriverCommand_Command DriverCommand::UNKNOWN;
const DriverCommand_Command DriverCommand::ENABLE_TRACKING;
const DriverCommand_Command DriverCommand::DISABLE_TRACKING;
const DriverCommand_Command DriverCommand::ENABLE_AUDIO;
const DriverCommand_Command DriverCommand::DISABLE_AUDIO;
const DriverCommand_Command DriverCommand::RAW_COMMAND;
const DriverCommand_Command DriverCommand::Command_MIN;
const DriverCommand_Command DriverCommand::Command_MAX;
const int DriverCommand::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverCommand::kCommandFieldNumber;
const int DriverCommand::kParamsFieldNumber;
const int DriverCommand::kRawCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverCommand::DriverCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NullSpaceIPC.DriverCommand)
}

void DriverCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DriverCommand::DriverCommand(const DriverCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NullSpaceIPC.DriverCommand)
}

void DriverCommand::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = 0;
  params_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  params_.SetEntryDescriptor(
      &::NullSpaceIPC::DriverCommand_ParamsEntry_descriptor_);
  raw_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DriverCommand::~DriverCommand() {
  // @@protoc_insertion_point(destructor:NullSpaceIPC.DriverCommand)
  SharedDtor();
}

void DriverCommand::SharedDtor() {
  raw_command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DriverCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverCommand_descriptor_;
}

const DriverCommand& DriverCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DriverCommand_2eproto();
  return *default_instance_;
}

DriverCommand* DriverCommand::default_instance_ = NULL;

DriverCommand* DriverCommand::New(::google::protobuf::Arena* arena) const {
  DriverCommand* n = new DriverCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriverCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:NullSpaceIPC.DriverCommand)
  command_ = 0;
  raw_command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_.Clear();
}

bool DriverCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NullSpaceIPC.DriverCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NullSpaceIPC.DriverCommand.Command command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::NullSpaceIPC::DriverCommand_Command >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // map<string, int32> params = 2;
      case 2: {
        if (tag == 18) {
         parse_params:
          DO_(input->IncrementRecursionDepth());
         parse_loop_params:
          DriverCommand_ParamsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NullSpaceIPC.DriverCommand.ParamsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_raw_command;
        break;
      }

      // optional bytes raw_command = 3;
      case 3: {
        if (tag == 26) {
         parse_raw_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NullSpaceIPC.DriverCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NullSpaceIPC.DriverCommand)
  return false;
#undef DO_
}

void DriverCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NullSpaceIPC.DriverCommand)
  // optional .NullSpaceIPC.DriverCommand.Command command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // map<string, int32> params = 2;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "NullSpaceIPC.DriverCommand.ParamsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->params().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<DriverCommand_ParamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DriverCommand_ParamsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bytes raw_command = 3;
  if (this->raw_command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->raw_command(), output);
  }

  // @@protoc_insertion_point(serialize_end:NullSpaceIPC.DriverCommand)
}

::google::protobuf::uint8* DriverCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NullSpaceIPC.DriverCommand)
  // optional .NullSpaceIPC.DriverCommand.Command command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // map<string, int32> params = 2;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "NullSpaceIPC.DriverCommand.ParamsEntry.key");
      }
    };

    if (deterministic &&
        this->params().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<DriverCommand_ParamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DriverCommand_ParamsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bytes raw_command = 3;
  if (this->raw_command().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->raw_command(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NullSpaceIPC.DriverCommand)
  return target;
}

int DriverCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NullSpaceIPC.DriverCommand)
  int total_size = 0;

  // optional .NullSpaceIPC.DriverCommand.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // optional bytes raw_command = 3;
  if (this->raw_command().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_command());
  }

  // map<string, int32> params = 2;
  total_size += 1 * this->params_size();
  {
    ::google::protobuf::scoped_ptr<DriverCommand_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NullSpaceIPC.DriverCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DriverCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NullSpaceIPC.DriverCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NullSpaceIPC.DriverCommand)
    MergeFrom(*source);
  }
}

void DriverCommand::MergeFrom(const DriverCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NullSpaceIPC.DriverCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  params_.MergeFrom(from.params_);
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.raw_command().size() > 0) {

    raw_command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_command_);
  }
}

void DriverCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NullSpaceIPC.DriverCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverCommand::CopyFrom(const DriverCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NullSpaceIPC.DriverCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverCommand::IsInitialized() const {

  return true;
}

void DriverCommand::Swap(DriverCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverCommand::InternalSwap(DriverCommand* other) {
  std::swap(command_, other->command_);
  params_.Swap(&other->params_);
  raw_command_.Swap(&other->raw_command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriverCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DriverCommand_descriptor_;
  metadata.reflection = DriverCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriverCommand

// optional .NullSpaceIPC.DriverCommand.Command command = 1;
void DriverCommand::clear_command() {
  command_ = 0;
}
 ::NullSpaceIPC::DriverCommand_Command DriverCommand::command() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DriverCommand.command)
  return static_cast< ::NullSpaceIPC::DriverCommand_Command >(command_);
}
 void DriverCommand::set_command(::NullSpaceIPC::DriverCommand_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DriverCommand.command)
}

// map<string, int32> params = 2;
int DriverCommand::params_size() const {
  return params_.size();
}
void DriverCommand::clear_params() {
  params_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
DriverCommand::params() const {
  // @@protoc_insertion_point(field_map:NullSpaceIPC.DriverCommand.params)
  return params_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
DriverCommand::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:NullSpaceIPC.DriverCommand.params)
  return params_.MutableMap();
}

// optional bytes raw_command = 3;
void DriverCommand::clear_raw_command() {
  raw_command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DriverCommand::raw_command() const {
  // @@protoc_insertion_point(field_get:NullSpaceIPC.DriverCommand.raw_command)
  return raw_command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DriverCommand::set_raw_command(const ::std::string& value) {
  
  raw_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NullSpaceIPC.DriverCommand.raw_command)
}
 void DriverCommand::set_raw_command(const char* value) {
  
  raw_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NullSpaceIPC.DriverCommand.raw_command)
}
 void DriverCommand::set_raw_command(const void* value, size_t size) {
  
  raw_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NullSpaceIPC.DriverCommand.raw_command)
}
 ::std::string* DriverCommand::mutable_raw_command() {
  
  // @@protoc_insertion_point(field_mutable:NullSpaceIPC.DriverCommand.raw_command)
  return raw_command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DriverCommand::release_raw_command() {
  // @@protoc_insertion_point(field_release:NullSpaceIPC.DriverCommand.raw_command)
  
  return raw_command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DriverCommand::set_allocated_raw_command(::std::string* raw_command) {
  if (raw_command != NULL) {
    
  } else {
    
  }
  raw_command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_command);
  // @@protoc_insertion_point(field_set_allocated:NullSpaceIPC.DriverCommand.raw_command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NullSpaceIPC

// @@protoc_insertion_point(global_scope)
