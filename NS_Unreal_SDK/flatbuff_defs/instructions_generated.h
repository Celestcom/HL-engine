// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INSTRUCTIONS_NULLSPACE_CONFIGURATION_H_
#define FLATBUFFERS_GENERATED_INSTRUCTIONS_NULLSPACE_CONFIGURATION_H_

#include "flatbuffers/flatbuffers.h"

namespace NullSpace {
namespace Configuration {

struct Instruction;

struct InstructionList;

struct Instruction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_PURPOSE = 8,
    VT_PARAMETERS = 10
  };
  int16_t id() const { return GetField<int16_t>(VT_ID, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *purpose() const { return GetPointer<const flatbuffers::String *>(VT_PURPOSE); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *parameters() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PARAMETERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PURPOSE) &&
           verifier.Verify(purpose()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PARAMETERS) &&
           verifier.Verify(parameters()) &&
           verifier.VerifyVectorOfStrings(parameters()) &&
           verifier.EndTable();
  }
};

struct InstructionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int16_t id) { fbb_.AddElement<int16_t>(Instruction::VT_ID, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Instruction::VT_NAME, name); }
  void add_purpose(flatbuffers::Offset<flatbuffers::String> purpose) { fbb_.AddOffset(Instruction::VT_PURPOSE, purpose); }
  void add_parameters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> parameters) { fbb_.AddOffset(Instruction::VT_PARAMETERS, parameters); }
  InstructionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InstructionBuilder &operator=(const InstructionBuilder &);
  flatbuffers::Offset<Instruction> Finish() {
    auto o = flatbuffers::Offset<Instruction>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Instruction> CreateInstruction(flatbuffers::FlatBufferBuilder &_fbb,
    int16_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> purpose = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> parameters = 0) {
  InstructionBuilder builder_(_fbb);
  builder_.add_parameters(parameters);
  builder_.add_purpose(purpose);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Instruction> CreateInstructionDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int16_t id = 0,
    const char *name = nullptr,
    const char *purpose = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *parameters = nullptr) {
  return CreateInstruction(_fbb, id, name ? _fbb.CreateString(name) : 0, purpose ? _fbb.CreateString(purpose) : 0, parameters ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*parameters) : 0);
}

struct InstructionList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INSTRUCTIONS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Instruction>> *instructions() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Instruction>> *>(VT_INSTRUCTIONS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_INSTRUCTIONS) &&
           verifier.Verify(instructions()) &&
           verifier.VerifyVectorOfTables(instructions()) &&
           verifier.EndTable();
  }
};

struct InstructionListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_instructions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Instruction>>> instructions) { fbb_.AddOffset(InstructionList::VT_INSTRUCTIONS, instructions); }
  InstructionListBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InstructionListBuilder &operator=(const InstructionListBuilder &);
  flatbuffers::Offset<InstructionList> Finish() {
    auto o = flatbuffers::Offset<InstructionList>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<InstructionList> CreateInstructionList(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Instruction>>> instructions = 0) {
  InstructionListBuilder builder_(_fbb);
  builder_.add_instructions(instructions);
  return builder_.Finish();
}

inline flatbuffers::Offset<InstructionList> CreateInstructionListDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Instruction>> *instructions = nullptr) {
  return CreateInstructionList(_fbb, instructions ? _fbb.CreateVector<flatbuffers::Offset<Instruction>>(*instructions) : 0);
}

inline const NullSpace::Configuration::InstructionList *GetInstructionList(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::Configuration::InstructionList>(buf);
}

inline bool VerifyInstructionListBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::Configuration::InstructionList>(nullptr);
}

inline void FinishInstructionListBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::Configuration::InstructionList> root) {
  fbb.Finish(root);
}

}  // namespace Configuration
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_INSTRUCTIONS_NULLSPACE_CONFIGURATION_H_
