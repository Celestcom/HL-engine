// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_HAPTICFRAME_NULLSPACE_HAPTICFILES_H_
#define FLATBUFFERS_GENERATED_HAPTICFRAME_NULLSPACE_HAPTICFILES_H_

#include "flatbuffers/flatbuffers.h"

#include "HapticEffect_generated.h"
#include "Sequence_generated.h"

namespace NullSpace {
namespace HapticFiles {

struct HapticFrame;
struct HapticFrameT;

struct HapticFrameT : public flatbuffers::NativeTable {
  float time;
  std::unique_ptr<NullSpace::HapticFiles::SequenceT> sequence;
  uint32_t area;
  float strength;
};

struct HapticFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIME = 4,
    VT_SEQUENCE = 6,
    VT_AREA = 8,
    VT_STRENGTH = 10
  };
  float time() const { return GetField<float>(VT_TIME, 0.0f); }
  const NullSpace::HapticFiles::Sequence *sequence() const { return GetPointer<const NullSpace::HapticFiles::Sequence *>(VT_SEQUENCE); }
  uint32_t area() const { return GetField<uint32_t>(VT_AREA, 0); }
  float strength() const { return GetField<float>(VT_STRENGTH, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_TIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SEQUENCE) &&
           verifier.VerifyTable(sequence()) &&
           VerifyField<uint32_t>(verifier, VT_AREA) &&
           VerifyField<float>(verifier, VT_STRENGTH) &&
           verifier.EndTable();
  }
  HapticFrameT *UnPack(const flatbuffers::resolver_function_t *resolver = nullptr) const;
};

struct HapticFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(float time) { fbb_.AddElement<float>(HapticFrame::VT_TIME, time, 0.0f); }
  void add_sequence(flatbuffers::Offset<NullSpace::HapticFiles::Sequence> sequence) { fbb_.AddOffset(HapticFrame::VT_SEQUENCE, sequence); }
  void add_area(uint32_t area) { fbb_.AddElement<uint32_t>(HapticFrame::VT_AREA, area, 0); }
  void add_strength(float strength) { fbb_.AddElement<float>(HapticFrame::VT_STRENGTH, strength, 0.0f); }
  HapticFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HapticFrameBuilder &operator=(const HapticFrameBuilder &);
  flatbuffers::Offset<HapticFrame> Finish() {
    auto o = flatbuffers::Offset<HapticFrame>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<HapticFrame> CreateHapticFrame(flatbuffers::FlatBufferBuilder &_fbb,
    float time = 0.0f,
    flatbuffers::Offset<NullSpace::HapticFiles::Sequence> sequence = 0,
    uint32_t area = 0,
    float strength = 0.0f) {
  HapticFrameBuilder builder_(_fbb);
  builder_.add_strength(strength);
  builder_.add_area(area);
  builder_.add_sequence(sequence);
  builder_.add_time(time);
  return builder_.Finish();
}

inline flatbuffers::Offset<HapticFrame> CreateHapticFrame(flatbuffers::FlatBufferBuilder &_fbb, const HapticFrameT *_o, const flatbuffers::rehasher_function_t *rehasher = nullptr);

inline HapticFrameT *HapticFrame::UnPack(const flatbuffers::resolver_function_t *resolver) const {
  (void)resolver;
  auto _o = new HapticFrameT();
  { auto _e = time(); _o->time = _e; };
  { auto _e = sequence(); if (_e) _o->sequence = std::unique_ptr<NullSpace::HapticFiles::SequenceT>(_e->UnPack(resolver)); };
  { auto _e = area(); _o->area = _e; };
  { auto _e = strength(); _o->strength = _e; };
  return _o;
}

inline flatbuffers::Offset<HapticFrame> CreateHapticFrame(flatbuffers::FlatBufferBuilder &_fbb, const HapticFrameT *_o, const flatbuffers::rehasher_function_t *rehasher) {
  (void)rehasher;
  return CreateHapticFrame(_fbb,
    _o->time,
    _o->sequence ? CreateSequence(_fbb, _o->sequence.get(), rehasher) : 0,
    _o->area,
    _o->strength);
}

inline const NullSpace::HapticFiles::HapticFrame *GetHapticFrame(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::HapticFiles::HapticFrame>(buf);
}

inline bool VerifyHapticFrameBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::HapticFiles::HapticFrame>(nullptr);
}

inline void FinishHapticFrameBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::HapticFiles::HapticFrame> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<HapticFrameT> UnPackHapticFrame(const void *buf, const flatbuffers::resolver_function_t *resolver = nullptr) {
  return std::unique_ptr<HapticFrameT>(GetHapticFrame(buf)->UnPack(resolver));
}

}  // namespace HapticFiles
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_HAPTICFRAME_NULLSPACE_HAPTICFILES_H_
