// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_HAPTICSAMPLE_NULLSPACE_HAPTICFILES_H_
#define FLATBUFFERS_GENERATED_HAPTICSAMPLE_NULLSPACE_HAPTICFILES_H_

#include "flatbuffers/flatbuffers.h"

#include "HapticEffect_generated.h"
#include "HapticFrame_generated.h"
#include "Pattern_generated.h"
#include "Sequence_generated.h"

namespace NullSpace {
namespace HapticFiles {

struct HapticSample;

struct HapticSample FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FRAMES = 4,
    VT_PRIORITY = 6,
    VT_TIME = 8
  };
  const NullSpace::HapticFiles::Pattern *frames() const { return GetPointer<const NullSpace::HapticFiles::Pattern *>(VT_FRAMES); }
  uint16_t priority() const { return GetField<uint16_t>(VT_PRIORITY, 0); }
  float time() const { return GetField<float>(VT_TIME, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FRAMES) &&
           verifier.VerifyTable(frames()) &&
           VerifyField<uint16_t>(verifier, VT_PRIORITY) &&
           VerifyField<float>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct HapticSampleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frames(flatbuffers::Offset<NullSpace::HapticFiles::Pattern> frames) { fbb_.AddOffset(HapticSample::VT_FRAMES, frames); }
  void add_priority(uint16_t priority) { fbb_.AddElement<uint16_t>(HapticSample::VT_PRIORITY, priority, 0); }
  void add_time(float time) { fbb_.AddElement<float>(HapticSample::VT_TIME, time, 0.0f); }
  HapticSampleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HapticSampleBuilder &operator=(const HapticSampleBuilder &);
  flatbuffers::Offset<HapticSample> Finish() {
    auto o = flatbuffers::Offset<HapticSample>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<HapticSample> CreateHapticSample(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<NullSpace::HapticFiles::Pattern> frames = 0,
    uint16_t priority = 0,
    float time = 0.0f) {
  HapticSampleBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_frames(frames);
  builder_.add_priority(priority);
  return builder_.Finish();
}

inline const NullSpace::HapticFiles::HapticSample *GetHapticSample(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::HapticFiles::HapticSample>(buf);
}

inline bool VerifyHapticSampleBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::HapticFiles::HapticSample>(nullptr);
}

inline void FinishHapticSampleBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::HapticFiles::HapticSample> root) {
  fbb.Finish(root);
}

}  // namespace HapticFiles
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_HAPTICSAMPLE_NULLSPACE_HAPTICFILES_H_
