// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_EXECUTIONCOMMAND_NULLSPACE_HAPTICFILES_H_
#define FLATBUFFERS_GENERATED_EXECUTIONCOMMAND_NULLSPACE_HAPTICFILES_H_

#include "flatbuffers/flatbuffers.h"

namespace NullSpace {
namespace HapticFiles {

struct ExecutionCommand;

enum PlayCommand {
  PlayCommand_PLAY = 0,
  PlayCommand_PLAY_CONTINUOUS = 1,
  PlayCommand_HALT = 2,
  PlayCommand_MIN = PlayCommand_PLAY,
  PlayCommand_MAX = PlayCommand_HALT
};

inline const char **EnumNamesPlayCommand() {
  static const char *names[] = { "PLAY", "PLAY_CONTINUOUS", "HALT", nullptr };
  return names;
}

inline const char *EnumNamePlayCommand(PlayCommand e) { return EnumNamesPlayCommand()[static_cast<int>(e)]; }

struct ExecutionCommand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LOCATION = 4,
    VT_EFFECT = 6,
    VT_COMMAND = 8
  };
  uint32_t location() const { return GetField<uint32_t>(VT_LOCATION, 0); }
  uint32_t effect() const { return GetField<uint32_t>(VT_EFFECT, 0); }
  PlayCommand command() const { return static_cast<PlayCommand>(GetField<int16_t>(VT_COMMAND, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_LOCATION) &&
           VerifyField<uint32_t>(verifier, VT_EFFECT) &&
           VerifyField<int16_t>(verifier, VT_COMMAND) &&
           verifier.EndTable();
  }
};

struct ExecutionCommandBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_location(uint32_t location) { fbb_.AddElement<uint32_t>(ExecutionCommand::VT_LOCATION, location, 0); }
  void add_effect(uint32_t effect) { fbb_.AddElement<uint32_t>(ExecutionCommand::VT_EFFECT, effect, 0); }
  void add_command(PlayCommand command) { fbb_.AddElement<int16_t>(ExecutionCommand::VT_COMMAND, static_cast<int16_t>(command), 0); }
  ExecutionCommandBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ExecutionCommandBuilder &operator=(const ExecutionCommandBuilder &);
  flatbuffers::Offset<ExecutionCommand> Finish() {
    auto o = flatbuffers::Offset<ExecutionCommand>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ExecutionCommand> CreateExecutionCommand(flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t location = 0,
    uint32_t effect = 0,
    PlayCommand command = PlayCommand_PLAY) {
  ExecutionCommandBuilder builder_(_fbb);
  builder_.add_effect(effect);
  builder_.add_location(location);
  builder_.add_command(command);
  return builder_.Finish();
}

inline const NullSpace::HapticFiles::ExecutionCommand *GetExecutionCommand(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::HapticFiles::ExecutionCommand>(buf);
}

inline bool VerifyExecutionCommandBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::HapticFiles::ExecutionCommand>(nullptr);
}

inline void FinishExecutionCommandBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::HapticFiles::ExecutionCommand> root) {
  fbb.Finish(root);
}

}  // namespace HapticFiles
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_EXECUTIONCOMMAND_NULLSPACE_HAPTICFILES_H_
