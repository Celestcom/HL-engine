// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TRACKINGUPDATE_NULLSPACE_COMMUNICATION_H_
#define FLATBUFFERS_GENERATED_TRACKINGUPDATE_NULLSPACE_COMMUNICATION_H_

#include "flatbuffers/flatbuffers.h"

namespace NullSpace {
namespace Communication {

struct Quaternion;

struct TrackingUpdate;

MANUALLY_ALIGNED_STRUCT(4) Quaternion FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Quaternion() { memset(this, 0, sizeof(Quaternion)); }
  Quaternion(const Quaternion &_o) { memcpy(this, &_o, sizeof(Quaternion)); }
  Quaternion(float _x, float _y, float _z, float _w)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(_z)), w_(flatbuffers::EndianScalar(_w)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
  float w() const { return flatbuffers::EndianScalar(w_); }
};
STRUCT_END(Quaternion, 16);

struct TrackingUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHEST = 4
  };
  const Quaternion *chest() const { return GetStruct<const Quaternion *>(VT_CHEST); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Quaternion>(verifier, VT_CHEST) &&
           verifier.EndTable();
  }
};

struct TrackingUpdateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chest(const Quaternion *chest) { fbb_.AddStruct(TrackingUpdate::VT_CHEST, chest); }
  TrackingUpdateBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TrackingUpdateBuilder &operator=(const TrackingUpdateBuilder &);
  flatbuffers::Offset<TrackingUpdate> Finish() {
    auto o = flatbuffers::Offset<TrackingUpdate>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TrackingUpdate> CreateTrackingUpdate(flatbuffers::FlatBufferBuilder &_fbb,
    const Quaternion *chest = 0) {
  TrackingUpdateBuilder builder_(_fbb);
  builder_.add_chest(chest);
  return builder_.Finish();
}

inline const NullSpace::Communication::TrackingUpdate *GetTrackingUpdate(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::Communication::TrackingUpdate>(buf);
}

inline bool VerifyTrackingUpdateBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::Communication::TrackingUpdate>(nullptr);
}

inline void FinishTrackingUpdateBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::Communication::TrackingUpdate> root) {
  fbb.Finish(root);
}

}  // namespace Communication
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_TRACKINGUPDATE_NULLSPACE_COMMUNICATION_H_
