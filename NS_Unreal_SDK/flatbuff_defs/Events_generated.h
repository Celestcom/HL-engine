// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_EVENTS_NULLSPACE_EVENTS_H_
#define FLATBUFFERS_GENERATED_EVENTS_NULLSPACE_EVENTS_H_

#include "flatbuffers/flatbuffers.h"

namespace NullSpace {
namespace Events {

struct BasicHapticEvent;

struct SuitEvent;

struct SuitEventList;

enum SuitEventType {
  SuitEventType_NONE = 0,
  SuitEventType_BasicHapticEvent = 1,
  SuitEventType_MIN = SuitEventType_NONE,
  SuitEventType_MAX = SuitEventType_BasicHapticEvent
};

inline const char **EnumNamesSuitEventType() {
  static const char *names[] = { "NONE", "BasicHapticEvent", nullptr };
  return names;
}

inline const char *EnumNameSuitEventType(SuitEventType e) { return EnumNamesSuitEventType()[static_cast<int>(e)]; }

template<typename T> struct SuitEventTypeTraits {
  static const SuitEventType enum_value = SuitEventType_NONE;
};

template<> struct SuitEventTypeTraits<BasicHapticEvent> {
  static const SuitEventType enum_value = SuitEventType_BasicHapticEvent;
};

inline bool VerifySuitEventType(flatbuffers::Verifier &verifier, const void *union_obj, SuitEventType type);

struct BasicHapticEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIME = 4,
    VT_STRENGTH = 6,
    VT_DURATION = 8,
    VT_AREA = 10,
    VT_EFFECT = 12
  };
  float time() const { return GetField<float>(VT_TIME, 0.0f); }
  float strength() const { return GetField<float>(VT_STRENGTH, 0.0f); }
  float duration() const { return GetField<float>(VT_DURATION, 0.0f); }
  uint32_t area() const { return GetField<uint32_t>(VT_AREA, 0); }
  uint32_t effect() const { return GetField<uint32_t>(VT_EFFECT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_TIME) &&
           VerifyField<float>(verifier, VT_STRENGTH) &&
           VerifyField<float>(verifier, VT_DURATION) &&
           VerifyField<uint32_t>(verifier, VT_AREA) &&
           VerifyField<uint32_t>(verifier, VT_EFFECT) &&
           verifier.EndTable();
  }
};

struct BasicHapticEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(float time) { fbb_.AddElement<float>(BasicHapticEvent::VT_TIME, time, 0.0f); }
  void add_strength(float strength) { fbb_.AddElement<float>(BasicHapticEvent::VT_STRENGTH, strength, 0.0f); }
  void add_duration(float duration) { fbb_.AddElement<float>(BasicHapticEvent::VT_DURATION, duration, 0.0f); }
  void add_area(uint32_t area) { fbb_.AddElement<uint32_t>(BasicHapticEvent::VT_AREA, area, 0); }
  void add_effect(uint32_t effect) { fbb_.AddElement<uint32_t>(BasicHapticEvent::VT_EFFECT, effect, 0); }
  BasicHapticEventBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BasicHapticEventBuilder &operator=(const BasicHapticEventBuilder &);
  flatbuffers::Offset<BasicHapticEvent> Finish() {
    auto o = flatbuffers::Offset<BasicHapticEvent>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<BasicHapticEvent> CreateBasicHapticEvent(flatbuffers::FlatBufferBuilder &_fbb,
    float time = 0.0f,
    float strength = 0.0f,
    float duration = 0.0f,
    uint32_t area = 0,
    uint32_t effect = 0) {
  BasicHapticEventBuilder builder_(_fbb);
  builder_.add_effect(effect);
  builder_.add_area(area);
  builder_.add_duration(duration);
  builder_.add_strength(strength);
  builder_.add_time(time);
  return builder_.Finish();
}

struct SuitEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENT_TYPE = 4,
    VT_EVENT = 6
  };
  SuitEventType event_type() const { return static_cast<SuitEventType>(GetField<uint8_t>(VT_EVENT_TYPE, 0)); }
  const void *event() const { return GetPointer<const void *>(VT_EVENT); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_EVENT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EVENT) &&
           VerifySuitEventType(verifier, event(), event_type()) &&
           verifier.EndTable();
  }
};

struct SuitEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event_type(SuitEventType event_type) { fbb_.AddElement<uint8_t>(SuitEvent::VT_EVENT_TYPE, static_cast<uint8_t>(event_type), 0); }
  void add_event(flatbuffers::Offset<void> event) { fbb_.AddOffset(SuitEvent::VT_EVENT, event); }
  SuitEventBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SuitEventBuilder &operator=(const SuitEventBuilder &);
  flatbuffers::Offset<SuitEvent> Finish() {
    auto o = flatbuffers::Offset<SuitEvent>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SuitEvent> CreateSuitEvent(flatbuffers::FlatBufferBuilder &_fbb,
    SuitEventType event_type = SuitEventType_NONE,
    flatbuffers::Offset<void> event = 0) {
  SuitEventBuilder builder_(_fbb);
  builder_.add_event(event);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

struct SuitEventList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<SuitEvent>> *events() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SuitEvent>> *>(VT_EVENTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EVENTS) &&
           verifier.Verify(events()) &&
           verifier.VerifyVectorOfTables(events()) &&
           verifier.EndTable();
  }
};

struct SuitEventListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SuitEvent>>> events) { fbb_.AddOffset(SuitEventList::VT_EVENTS, events); }
  SuitEventListBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SuitEventListBuilder &operator=(const SuitEventListBuilder &);
  flatbuffers::Offset<SuitEventList> Finish() {
    auto o = flatbuffers::Offset<SuitEventList>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SuitEventList> CreateSuitEventList(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SuitEvent>>> events = 0) {
  SuitEventListBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

inline flatbuffers::Offset<SuitEventList> CreateSuitEventListDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<SuitEvent>> *events = nullptr) {
  return CreateSuitEventList(_fbb, events ? _fbb.CreateVector<flatbuffers::Offset<SuitEvent>>(*events) : 0);
}

inline bool VerifySuitEventType(flatbuffers::Verifier &verifier, const void *union_obj, SuitEventType type) {
  switch (type) {
    case SuitEventType_NONE: return true;
    case SuitEventType_BasicHapticEvent: return verifier.VerifyTable(reinterpret_cast<const BasicHapticEvent *>(union_obj));
    default: return false;
  }
}

inline const NullSpace::Events::SuitEventList *GetSuitEventList(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::Events::SuitEventList>(buf);
}

inline bool VerifySuitEventListBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::Events::SuitEventList>(nullptr);
}

inline void FinishSuitEventListBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::Events::SuitEventList> root) {
  fbb.Finish(root);
}

}  // namespace Events
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_EVENTS_NULLSPACE_EVENTS_H_
