// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles
{

using System;
using FlatBuffers;

public struct HapticPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HapticPacket GetRootAsHapticPacket(ByteBuffer _bb) { return GetRootAsHapticPacket(_bb, new HapticPacket()); }
  public static HapticPacket GetRootAsHapticPacket(ByteBuffer _bb, HapticPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HapticPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
  public FileType PacketType { get { int o = __p.__offset(6); return o != 0 ? (FileType)__p.bb.Get(o + __p.bb_pos) : FileType.NONE; } }
  public TTable? Packet<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }
  public ulong Handle { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<HapticPacket> CreateHapticPacket(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      FileType packet_type = FileType.NONE,
      int packetOffset = 0,
      ulong handle = 0) {
    builder.StartObject(4);
    HapticPacket.AddHandle(builder, handle);
    HapticPacket.AddPacket(builder, packetOffset);
    HapticPacket.AddName(builder, nameOffset);
    HapticPacket.AddPacketType(builder, packet_type);
    return HapticPacket.EndHapticPacket(builder);
  }

  public static void StartHapticPacket(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddPacketType(FlatBufferBuilder builder, FileType packetType) { builder.AddByte(1, (byte)packetType, 0); }
  public static void AddPacket(FlatBufferBuilder builder, int packetOffset) { builder.AddOffset(2, packetOffset, 0); }
  public static void AddHandle(FlatBufferBuilder builder, ulong handle) { builder.AddUlong(3, handle, 0); }
  public static Offset<HapticPacket> EndHapticPacket(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HapticPacket>(o);
  }
  public static void FinishHapticPacketBuffer(FlatBufferBuilder builder, Offset<HapticPacket> offset) { builder.Finish(offset.Value); }
};


}
