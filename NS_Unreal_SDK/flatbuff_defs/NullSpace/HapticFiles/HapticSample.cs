// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles
{

using System;
using FlatBuffers;

public struct HapticSample : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HapticSample GetRootAsHapticSample(ByteBuffer _bb) { return GetRootAsHapticSample(_bb, new HapticSample()); }
  public static HapticSample GetRootAsHapticSample(ByteBuffer _bb, HapticSample obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HapticSample __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public NullSpace.HapticFiles.Pattern? Pattern { get { int o = __p.__offset(6); return o != 0 ? (NullSpace.HapticFiles.Pattern?)(new NullSpace.HapticFiles.Pattern()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<HapticSample> CreateHapticSample(FlatBufferBuilder builder,
      float time = 0.0f,
      Offset<NullSpace.HapticFiles.Pattern> patternOffset = default(Offset<NullSpace.HapticFiles.Pattern>)) {
    builder.StartObject(2);
    HapticSample.AddPattern(builder, patternOffset);
    HapticSample.AddTime(builder, time);
    return HapticSample.EndHapticSample(builder);
  }

  public static void StartHapticSample(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(0, time, 0.0f); }
  public static void AddPattern(FlatBufferBuilder builder, Offset<NullSpace.HapticFiles.Pattern> patternOffset) { builder.AddOffset(1, patternOffset.Value, 0); }
  public static Offset<HapticSample> EndHapticSample(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HapticSample>(o);
  }
  public static void FinishHapticSampleBuffer(FlatBufferBuilder builder, Offset<HapticSample> offset) { builder.Finish(offset.Value); }
};


}
