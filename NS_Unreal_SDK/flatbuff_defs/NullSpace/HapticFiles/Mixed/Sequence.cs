// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles.Mixed
{

using System;
using FlatBuffers;

public struct Sequence : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Sequence GetRootAsSequence(ByteBuffer _bb) { return GetRootAsSequence(_bb, new Sequence()); }
  public static Sequence GetRootAsSequence(ByteBuffer _bb, Sequence obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Sequence __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Location { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public EffectValuesOrNameReference EffectType { get { int o = __p.__offset(6); return o != 0 ? (EffectValuesOrNameReference)__p.bb.Get(o + __p.bb_pos) : EffectValuesOrNameReference.NONE; } }
  public TTable? Effect<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<Sequence> CreateSequence(FlatBufferBuilder builder,
      uint location = 0,
      EffectValuesOrNameReference effect_type = EffectValuesOrNameReference.NONE,
      int effectOffset = 0) {
    builder.StartObject(3);
    Sequence.AddEffect(builder, effectOffset);
    Sequence.AddLocation(builder, location);
    Sequence.AddEffectType(builder, effect_type);
    return Sequence.EndSequence(builder);
  }

  public static void StartSequence(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddLocation(FlatBufferBuilder builder, uint location) { builder.AddUint(0, location, 0); }
  public static void AddEffectType(FlatBufferBuilder builder, EffectValuesOrNameReference effectType) { builder.AddByte(1, (byte)effectType, 0); }
  public static void AddEffect(FlatBufferBuilder builder, int effectOffset) { builder.AddOffset(2, effectOffset, 0); }
  public static Offset<Sequence> EndSequence(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Sequence>(o);
  }
  public static void FinishSequenceBuffer(FlatBufferBuilder builder, Offset<Sequence> offset) { builder.Finish(offset.Value); }
};


}
