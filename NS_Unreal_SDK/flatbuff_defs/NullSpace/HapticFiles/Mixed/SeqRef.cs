// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles.Mixed
{

using System;
using FlatBuffers;

public struct SeqRef : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SeqRef GetRootAsSeqRef(ByteBuffer _bb) { return GetRootAsSeqRef(_bb, new SeqRef()); }
  public static SeqRef GetRootAsSeqRef(ByteBuffer _bb, SeqRef obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SeqRef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Symbol { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSymbolBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<SeqRef> CreateSeqRef(FlatBufferBuilder builder,
      StringOffset symbolOffset = default(StringOffset)) {
    builder.StartObject(1);
    SeqRef.AddSymbol(builder, symbolOffset);
    return SeqRef.EndSeqRef(builder);
  }

  public static void StartSeqRef(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSymbol(FlatBufferBuilder builder, StringOffset symbolOffset) { builder.AddOffset(0, symbolOffset.Value, 0); }
  public static Offset<SeqRef> EndSeqRef(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SeqRef>(o);
  }
};


}
