// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles
{

using System;
using FlatBuffers;

public struct HapticFrame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HapticFrame GetRootAsHapticFrame(ByteBuffer _bb) { return GetRootAsHapticFrame(_bb, new HapticFrame()); }
  public static HapticFrame GetRootAsHapticFrame(ByteBuffer _bb, HapticFrame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HapticFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public NullSpace.HapticFiles.Sequence? Sequence { get { int o = __p.__offset(6); return o != 0 ? (NullSpace.HapticFiles.Sequence?)(new NullSpace.HapticFiles.Sequence()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public uint Area { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float Strength { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<HapticFrame> CreateHapticFrame(FlatBufferBuilder builder,
      float time = 0.0f,
      Offset<NullSpace.HapticFiles.Sequence> sequenceOffset = default(Offset<NullSpace.HapticFiles.Sequence>),
      uint area = 0,
      float strength = 0.0f) {
    builder.StartObject(4);
    HapticFrame.AddStrength(builder, strength);
    HapticFrame.AddArea(builder, area);
    HapticFrame.AddSequence(builder, sequenceOffset);
    HapticFrame.AddTime(builder, time);
    return HapticFrame.EndHapticFrame(builder);
  }

  public static void StartHapticFrame(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(0, time, 0.0f); }
  public static void AddSequence(FlatBufferBuilder builder, Offset<NullSpace.HapticFiles.Sequence> sequenceOffset) { builder.AddOffset(1, sequenceOffset.Value, 0); }
  public static void AddArea(FlatBufferBuilder builder, uint area) { builder.AddUint(2, area, 0); }
  public static void AddStrength(FlatBufferBuilder builder, float strength) { builder.AddFloat(3, strength, 0.0f); }
  public static Offset<HapticFrame> EndHapticFrame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HapticFrame>(o);
  }
  public static void FinishHapticFrameBuffer(FlatBufferBuilder builder, Offset<HapticFrame> offset) { builder.Finish(offset.Value); }
};


}
