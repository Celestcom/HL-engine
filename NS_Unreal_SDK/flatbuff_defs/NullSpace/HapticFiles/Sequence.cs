// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles
{

using System;
using FlatBuffers;

public struct Sequence : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Sequence GetRootAsSequence(ByteBuffer _bb) { return GetRootAsSequence(_bb, new Sequence()); }
  public static Sequence GetRootAsSequence(ByteBuffer _bb, Sequence obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Sequence __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Location { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public NullSpace.HapticFiles.HapticEffect? Items(int j) { int o = __p.__offset(6); return o != 0 ? (NullSpace.HapticFiles.HapticEffect?)(new NullSpace.HapticFiles.HapticEffect()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Sequence> CreateSequence(FlatBufferBuilder builder,
      uint location = 0,
      VectorOffset itemsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    Sequence.AddItems(builder, itemsOffset);
    Sequence.AddLocation(builder, location);
    return Sequence.EndSequence(builder);
  }

  public static void StartSequence(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddLocation(FlatBufferBuilder builder, uint location) { builder.AddUint(0, location, 0); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(1, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<NullSpace.HapticFiles.HapticEffect>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Sequence> EndSequence(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Sequence>(o);
  }
  public static void FinishSequenceBuffer(FlatBufferBuilder builder, Offset<Sequence> offset) { builder.Finish(offset.Value); }
};


}
