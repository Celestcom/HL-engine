// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles
{

using System;
using FlatBuffers;

public struct Node : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Node GetRootAsNode(ByteBuffer _bb) { return GetRootAsNode(_bb, new Node()); }
  public static Node GetRootAsNode(ByteBuffer _bb, Node obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Node __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public NodeType Type { get { int o = __p.__offset(4); return o != 0 ? (NodeType)__p.bb.GetShort(o + __p.bb_pos) : NodeType.Effect; } }
  public Node? Children(int j) { int o = __p.__offset(6); return o != 0 ? (Node?)(new Node()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Time { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string Effect { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEffectBytes() { return __p.__vector_as_arraysegment(10); }
  public float Strength { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Duration { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Area { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Node> CreateNode(FlatBufferBuilder builder,
      NodeType type = NodeType.Effect,
      VectorOffset childrenOffset = default(VectorOffset),
      float time = 0.0f,
      StringOffset effectOffset = default(StringOffset),
      float strength = 0.0f,
      float duration = 0.0f,
      uint area = 0) {
    builder.StartObject(7);
    Node.AddArea(builder, area);
    Node.AddDuration(builder, duration);
    Node.AddStrength(builder, strength);
    Node.AddEffect(builder, effectOffset);
    Node.AddTime(builder, time);
    Node.AddChildren(builder, childrenOffset);
    Node.AddType(builder, type);
    return Node.EndNode(builder);
  }

  public static void StartNode(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddType(FlatBufferBuilder builder, NodeType type) { builder.AddShort(0, (short)type, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<Node>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(2, time, 0.0f); }
  public static void AddEffect(FlatBufferBuilder builder, StringOffset effectOffset) { builder.AddOffset(3, effectOffset.Value, 0); }
  public static void AddStrength(FlatBufferBuilder builder, float strength) { builder.AddFloat(4, strength, 0.0f); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(5, duration, 0.0f); }
  public static void AddArea(FlatBufferBuilder builder, uint area) { builder.AddUint(6, area, 0); }
  public static Offset<Node> EndNode(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Node>(o);
  }
  public static void FinishNodeBuffer(FlatBufferBuilder builder, Offset<Node> offset) { builder.Finish(offset.Value); }
};


}
