// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.HapticFiles
{

using System;
using FlatBuffers;

public struct HandleCommand : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HandleCommand GetRootAsHandleCommand(ByteBuffer _bb) { return GetRootAsHandleCommand(_bb, new HandleCommand()); }
  public static HandleCommand GetRootAsHandleCommand(ByteBuffer _bb, HandleCommand obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HandleCommand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Handle { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public Command Command { get { int o = __p.__offset(6); return o != 0 ? (Command)__p.bb.GetShort(o + __p.bb_pos) : Command.PLAY; } }

  public static Offset<HandleCommand> CreateHandleCommand(FlatBufferBuilder builder,
      ulong handle = 0,
      Command command = Command.PLAY) {
    builder.StartObject(2);
    HandleCommand.AddHandle(builder, handle);
    HandleCommand.AddCommand(builder, command);
    return HandleCommand.EndHandleCommand(builder);
  }

  public static void StartHandleCommand(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddHandle(FlatBufferBuilder builder, ulong handle) { builder.AddUlong(0, handle, 0); }
  public static void AddCommand(FlatBufferBuilder builder, Command command) { builder.AddShort(1, (short)command, 0); }
  public static Offset<HandleCommand> EndHandleCommand(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HandleCommand>(o);
  }
};


}
