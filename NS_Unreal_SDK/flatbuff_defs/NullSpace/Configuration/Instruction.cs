// automatically generated by the FlatBuffers compiler, do not modify

namespace NullSpace.Configuration
{

using System;
using FlatBuffers;

public struct Instruction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Instruction GetRootAsInstruction(ByteBuffer _bb) { return GetRootAsInstruction(_bb, new Instruction()); }
  public static Instruction GetRootAsInstruction(ByteBuffer _bb, Instruction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Instruction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Purpose { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPurposeBytes() { return __p.__vector_as_arraysegment(8); }
  public string Parameters(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ParametersLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Instruction> CreateInstruction(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset purposeOffset = default(StringOffset),
      VectorOffset parametersOffset = default(VectorOffset)) {
    builder.StartObject(4);
    Instruction.AddParameters(builder, parametersOffset);
    Instruction.AddPurpose(builder, purposeOffset);
    Instruction.AddName(builder, nameOffset);
    Instruction.AddId(builder, idOffset);
    return Instruction.EndInstruction(builder);
  }

  public static void StartInstruction(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddPurpose(FlatBufferBuilder builder, StringOffset purposeOffset) { builder.AddOffset(2, purposeOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(3, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Instruction> EndInstruction(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Instruction>(o);
  }
};


}
