// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CLIENTSTATUSUPDATE_NULLSPACE_COMMUNICATION_H_
#define FLATBUFFERS_GENERATED_CLIENTSTATUSUPDATE_NULLSPACE_COMMUNICATION_H_

#include "flatbuffers/flatbuffers.h"

namespace NullSpace {
namespace Communication {

struct ClientStatusUpdate;
struct ClientStatusUpdateT;

enum Status {
  Status_Playing = 0,
  Status_Stopped = 1,
  Status_Paused = 2,
  Status_MIN = Status_Playing,
  Status_MAX = Status_Paused
};

inline const char **EnumNamesStatus() {
  static const char *names[] = { "Playing", "Stopped", "Paused", nullptr };
  return names;
}

inline const char *EnumNameStatus(Status e) { return EnumNamesStatus()[static_cast<int>(e)]; }

struct ClientStatusUpdateT : public flatbuffers::NativeTable {
  Status clientStatus;
};

struct ClientStatusUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CLIENTSTATUS = 4
  };
  Status clientStatus() const { return static_cast<Status>(GetField<int16_t>(VT_CLIENTSTATUS, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_CLIENTSTATUS) &&
           verifier.EndTable();
  }
  ClientStatusUpdateT *UnPack(const flatbuffers::resolver_function_t *resolver = nullptr) const;
};

struct ClientStatusUpdateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clientStatus(Status clientStatus) { fbb_.AddElement<int16_t>(ClientStatusUpdate::VT_CLIENTSTATUS, static_cast<int16_t>(clientStatus), 0); }
  ClientStatusUpdateBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ClientStatusUpdateBuilder &operator=(const ClientStatusUpdateBuilder &);
  flatbuffers::Offset<ClientStatusUpdate> Finish() {
    auto o = flatbuffers::Offset<ClientStatusUpdate>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ClientStatusUpdate> CreateClientStatusUpdate(flatbuffers::FlatBufferBuilder &_fbb,
    Status clientStatus = Status_Playing) {
  ClientStatusUpdateBuilder builder_(_fbb);
  builder_.add_clientStatus(clientStatus);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientStatusUpdate> CreateClientStatusUpdate(flatbuffers::FlatBufferBuilder &_fbb, const ClientStatusUpdateT *_o, const flatbuffers::rehasher_function_t *rehasher = nullptr);

inline ClientStatusUpdateT *ClientStatusUpdate::UnPack(const flatbuffers::resolver_function_t *resolver) const {
  (void)resolver;
  auto _o = new ClientStatusUpdateT();
  { auto _e = clientStatus(); _o->clientStatus = _e; };
  return _o;
}

inline flatbuffers::Offset<ClientStatusUpdate> CreateClientStatusUpdate(flatbuffers::FlatBufferBuilder &_fbb, const ClientStatusUpdateT *_o, const flatbuffers::rehasher_function_t *rehasher) {
  (void)rehasher;
  return CreateClientStatusUpdate(_fbb,
    _o->clientStatus);
}

inline const NullSpace::Communication::ClientStatusUpdate *GetClientStatusUpdate(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::Communication::ClientStatusUpdate>(buf);
}

inline bool VerifyClientStatusUpdateBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::Communication::ClientStatusUpdate>(nullptr);
}

inline void FinishClientStatusUpdateBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::Communication::ClientStatusUpdate> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<ClientStatusUpdateT> UnPackClientStatusUpdate(const void *buf, const flatbuffers::resolver_function_t *resolver = nullptr) {
  return std::unique_ptr<ClientStatusUpdateT>(GetClientStatusUpdate(buf)->UnPack(resolver));
}

}  // namespace Communication
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_CLIENTSTATUSUPDATE_NULLSPACE_COMMUNICATION_H_
