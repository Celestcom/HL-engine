// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TINYEFFECTARRAY_NULLSPACE_HAPTICFILES_H_
#define FLATBUFFERS_GENERATED_TINYEFFECTARRAY_NULLSPACE_HAPTICFILES_H_

#include "flatbuffers/flatbuffers.h"

#include "TinyEffect_generated.h"

namespace NullSpace {
namespace HapticFiles {

struct TinyEffectArray;

struct TinyEffectArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EFFECTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::TinyEffect>> *effects() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::TinyEffect>> *>(VT_EFFECTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EFFECTS) &&
           verifier.Verify(effects()) &&
           verifier.VerifyVectorOfTables(effects()) &&
           verifier.EndTable();
  }
};

struct TinyEffectArrayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_effects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::TinyEffect>>> effects) { fbb_.AddOffset(TinyEffectArray::VT_EFFECTS, effects); }
  TinyEffectArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TinyEffectArrayBuilder &operator=(const TinyEffectArrayBuilder &);
  flatbuffers::Offset<TinyEffectArray> Finish() {
    auto o = flatbuffers::Offset<TinyEffectArray>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TinyEffectArray> CreateTinyEffectArray(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NullSpace::HapticFiles::TinyEffect>>> effects = 0) {
  TinyEffectArrayBuilder builder_(_fbb);
  builder_.add_effects(effects);
  return builder_.Finish();
}

inline flatbuffers::Offset<TinyEffectArray> CreateTinyEffectArrayDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<NullSpace::HapticFiles::TinyEffect>> *effects = nullptr) {
  return CreateTinyEffectArray(_fbb, effects ? _fbb.CreateVector<flatbuffers::Offset<NullSpace::HapticFiles::TinyEffect>>(*effects) : 0);
}

inline const NullSpace::HapticFiles::TinyEffectArray *GetTinyEffectArray(const void *buf) {
  return flatbuffers::GetRoot<NullSpace::HapticFiles::TinyEffectArray>(buf);
}

inline bool VerifyTinyEffectArrayBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NullSpace::HapticFiles::TinyEffectArray>(nullptr);
}

inline void FinishTinyEffectArrayBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NullSpace::HapticFiles::TinyEffectArray> root) {
  fbb.Finish(root);
}

}  // namespace HapticFiles
}  // namespace NullSpace

#endif  // FLATBUFFERS_GENERATED_TINYEFFECTARRAY_NULLSPACE_HAPTICFILES_H_
